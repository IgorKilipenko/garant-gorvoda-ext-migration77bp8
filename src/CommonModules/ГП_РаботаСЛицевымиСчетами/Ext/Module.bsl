// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
#Область ПрограммныйИнтерфейс

// Получает л/с контрагента из РС.УПЖКХ_СведенияДляВзаиморасчетовПоЛС
// Параметры:
//  КонтрагентСсылка - СправочникСсылка.Контрагенты
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено - Если Неопределено, устанавливается в
//      значение по умолчанию функцией `УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию`
//  ДатаАктуальности - Дата, Неопределено
//  ТолькоДействующие - Булево
// Возвращаемое значение:
//  - Массив из СправочникСсылка.КВП_ЛицевыеСчета
Функция ПолучитьЛицевыеСчетаКонтрагента(
        Знач КонтрагентСсылка, Знач ОрганизацияСсылка = Неопределено,
        Знач ДатаАктуальности = Неопределено, ТолькоДействующие = Истина) Экспорт

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |   СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет КАК ЛицевойСчет
        |ПОМЕСТИТЬ ВТ_СписокЛицевыхСчетов
        |ИЗ
        |   РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаАктуальности, Контрагент = &Контрагент И Организация = &Организация) КАК СведенияДляВзаиморасчетовПоЛС
        |";

    Если ТолькоДействующие = Истина Тогда
        Запрос.Текст = Запрос.Текст +
            ";
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |	ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
            |ИЗ
            |	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаАктуальности,
            |       ЛицевойСчет В (ВЫБРАТЬ Т.ЛицевойСчет ИЗ ВТ_СписокЛицевыхСчетов КАК Т)) КАК ЛицевыеСчета
            |ГДЕ
            |	ЛицевыеСчета.Действует
            |";
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТ_СписокЛицевыхСчетов", "");
    КонецЕсли;

    Если ДатаАктуальности <> Неопределено Тогда
        Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", "");
    КонецЕсли;

    ОрганизацияСсылка = ?(ОрганизацияСсылка = Неопределено,
            УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), ОрганизацияСсылка);
    Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);

    Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета, СправочникОбъект.КВП_ЛицевыеСчета
// Возвращаемое значение:
//  - СправочникСсылка.КВП_Здания
Функция ПолучитьЗданиеЛицевогоСчета(Знач ЛицевойСчет) Экспорт
    ПомещениеЛС = Неопределено;

    Если ТипЗнч(ЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
        ПомещениеЛС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЛицевойСчет, "Адрес");
    Иначе
        ПомещениеЛС = ЛицевойСчет.Адрес;
    КонецЕсли;

    Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПомещениеЛС, "Владелец");
КонецФункции

// Параметры:
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета, СправочникОбъект.КВП_ЛицевыеСчета
// Возвращаемое значение:
//  - Строка
Функция ПолучитьНаименованиеЗданияЛицевогоСчета(Знач ЛицевойСчет) Экспорт
    ЗданиеЛС = ПолучитьЗданиеЛицевогоСчета(ЛицевойСчет);
    Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗданиеЛС, "Наименование");
КонецФункции

// Параметры:
//  НаименованиеЛС - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Значение - Строка, Неопределено
Функция УдалитьКонтрагентаИзСтрокиНаименованияЛицевогоСчетаПоШаблону(Знач НаименованиеЛС) Экспорт
    РезультатФункции = Новый Структура("Успех, Значение", Ложь);

    ШаблонПоиска = "^[^/]+\s+/\s+(.*)$";
    РезультатЗамены = СтрЗаменитьПоРегулярномуВыражению(НаименованиеЛС, ШаблонПоиска, "$1");

    РезультатФункции.Успех = НаименованиеЛС <> РезультатЗамены;
    Если РезультатФункции.Успех = Истина Тогда
        РезультатФункции.Значение = РезультатЗамены;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с ++
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//  ДатаДокумента - Дата, Неопределено
// Возвращаемое значение:
//  - ДокументОбъект.КВП_ЗакрытиеЛицевогоСчета
Функция НовыйДокументЗакрытияЛицевогоСчета(Знач ЛицевойСчет, Знач ДатаДокумента = Неопределено) Экспорт
    НовыйДокументОбъект = Документы.КВП_ЗакрытиеЛицевогоСчета.СоздатьДокумент();

    НовыйДокументОбъект.ОбнулитьНачисления = Ложь;
    НовыйДокументОбъект.АннулироватьДанныеОСобственности = Ложь;
    НовыйДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
    Если ДатаДокумента <> Неопределено Тогда
        НовыйДокументОбъект.Дата = ДатаДокумента;
    КонецЕсли;

    НовыйДокументОбъект.ЛицевойСчет = ЛицевойСчет;

    Возврат НовыйДокументОбъект;
КонецФункции // Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с --

// Возвращает таблицу кодов МКД л/с
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * Наименование - Строка
Функция ПолучитьТаблицуВсехКодовМКД() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |   ЛицевыеСчета.Наименование КАК Наименование,
        |   ЛицевыеСчета.lc_КодМКД КАК lc_КодМКД,
        |   ЛицевыеСчета.Идентификатор КАК Идентификатор,
        |   ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ЛицевыеСчета.ОтветственныйСобственникПредставление КАК ОтветственныйСобственникПредставление
        |ИЗ
        |   Справочник.КВП_ЛицевыеСчета КАК ЛицевыеСчета
        |ГДЕ
        |   ЛицевыеСчета.ЭтоГруппа = Ложь
        |";

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
