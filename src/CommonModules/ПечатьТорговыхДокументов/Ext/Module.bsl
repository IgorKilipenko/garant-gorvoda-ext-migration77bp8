// Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации ++
#Область СлужебныеПроцедурыИФункции

#Область ПереопределениеСтандартныхФункций

&ИзменениеИКонтроль("ПечатьАктаОбОказанииУслуг")
Функция ГП_ПечатьАктаОбОказанииУслуг(СведенияАктаОбОказанииУслуг, ОбъектыПечати, СтруктураПараметровПечати)

    УстановитьПривилегированныйРежим(Истина);

    ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
    Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
        ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
    КонецЕсли;
    ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;

    ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.АвтоМасштаб			= Истина;
    ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
    ТабличныйДокумент.КлючПараметровПечати	= СтруктураПараметровПечати.ИмяПараметровПечати;

    #Вставка
    // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации ++
    // Замена макета печати
    ГП_ЭтоМодифицированныйАктРеализации = Ложь;
    Если СтруктураПараметровПечати.ИмяМакетаПечати =  "Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт" Тогда
        СтруктураПараметровПечати.ИмяМакетаПечати = "Документ.РеализацияТоваровУслуг.ГП_ПФ_MXL_Акт";
        ГП_ЭтоМодифицированныйАктРеализации = Истина;
    КонецЕсли;
    // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации ++
    #КонецВставки
    Макет = УправлениеПечатью.МакетПечатнойФормы(СтруктураПараметровПечати.ИмяМакетаПечати);

    ПервыйДокумент = Истина;

    Для Каждого СведенияОДокументе ИЗ СведенияАктаОбОказанииУслуг Цикл

        Если НЕ ПервыйДокумент Тогда
            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;

        ЭтоПечатьЗаПоставщика = СтруктураПараметровПечати.ВидДокументаПечати	 = "ПоступлениеИзПереработки"
        ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "ПоступлениеТоваровУслуг"
        ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаПоступления"
        ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "ПоступлениеДопРасходов";

        ПервыйДокумент = Ложь;

        // Запомним номер строки, с которой начали выводить текущий документ.
        НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

        ТаблицаУслуги = СведенияОДокументе.ТаблицаДокумента;

        // Выводим шапку документа
        ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
        ДанныеПечатиЗаголовок = Новый Структура("ТекстЗаголовка, ТекстЗаголовкаИсправления");
        ТекстЗаголовка = НСтр("ru='Акт № %1 от %2 г.'");
        НомерДокумента = ?(ЗначениеЗаполнено(СведенияОДокументе.ГосударственныйКонтракт), СведенияОДокументе.ГосударственныйКонтракт + "/", "") + СведенияОДокументе.НомерДокумента;
        ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, 
        НомерДокумента, 
        Формат(СведенияОДокументе.ДатаДокумента, "ДФ='дд ММММ гггг'"));
        ДанныеПечатиЗаголовок.Вставить("ТекстЗаголовка", ТекстЗаголовка);
        Если СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаРеализации" ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаПоступления" Тогда
            ТекстЗаголовкаИсправления = НСтр("ru='Исправление № %1 от %2 г.'");
            ТекстЗаголовкаИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовкаИсправления, 
            СведенияОДокументе.НомерИсправления, 
            Формат(СведенияОДокументе.ДатаИсправления, "ДФ='дд ММММ гггг'"));
            ДанныеПечатиЗаголовок.Вставить("ТекстЗаголовкаИсправления", ТекстЗаголовкаИсправления);
        КонецЕсли;

        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиЗаголовок);

        ТабличныйДокумент.Вывести(ОбластьМакета);

        ГосударственныйКонтрактСсылка = СведенияОДокументе.ГосударственныйКонтрактСсылка;

        СведенияОбПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
        СведенияОДокументе.Поставщик,
        СведенияОДокументе.ДатаДокумента,
        СведенияОДокументе.БанковскийСчетПродавца,
        ,
        ГосударственныйКонтрактСсылка,
        Истина);
        ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбПоставщике, 
        "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
        #Вставка // Гарант+ Килипенко 15.10.2024 [F00229734] Формирование счета на оплату ++
        Если ГП_ЭтоМодифицированныйАктРеализации Тогда
            // Удаление контактной информации из представления
            ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбПоставщике, 
                "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,НомерСчета,Банк,БИК,КоррСчет");
        КонецЕсли;
        #КонецВставки // Гарант+ Килипенко 15.10.2024 [F00229734] Формирование счета на оплату --

        ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
        ДанныеПечатиПоставщик = Новый Структура;
        ДанныеПечатиПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
        ДанныеПечатиПоставщик.Вставить("Поставщик", СведенияОДокументе.Поставщик);

        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПоставщик);
        ТабличныйДокумент.Вывести(ОбластьМакета);

        Если Макет.Области.Найти("Получатель") <> Неопределено Тогда
            ОбластьМакета = Макет.ПолучитьОбласть("Получатель");
        Иначе
            ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
        КонецЕсли;

        СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
        СведенияОДокументе.Получатель,
        СведенияОДокументе.ДатаДокумента,
        ,
        ,
        ГосударственныйКонтрактСсылка);
        ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте,
        "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
        #Вставка
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации ++
        Если ГП_ЭтоМодифицированныйАктРеализации Тогда
            // Удаление контактной информации из представления
            ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, 
                "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,НомерСчета,Банк,БИК,КоррСчет");
        КонецЕсли;
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации --
        #КонецВставки

        ДанныеПечатиПолучатель = Новый Структура;
        ДанныеПечатиПолучатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
        ДанныеПечатиПолучатель.Вставить("Получатель", СведенияОДокументе.Получатель);
        ДанныеПечатиПолучатель.Вставить("Основание", СведенияОДокументе.ПредставлениеДоговора);

        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПолучатель);

        ТабличныйДокумент.Вывести(ОбластьМакета);

        // Инициализация счетчика строк
        НомерСтроки = 0;

        // Выводим заголовок многострочной части
        ОбластьШапки = ?(ВыводитьКоды, "ШапкаСКодом", "ШапкаТаблицы");
        ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
        ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
        ДанныеПечатиКод = Новый Структура;
        Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
            ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Артикул");
        ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
            ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Код");
        КонецЕсли;
        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиКод);
        ТабличныйДокумент.Вывести(ОбластьМакета);

        ОбластьСтроки = ?(ВыводитьКоды, "СтрокаСКодом", "Строка");
        ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

        // Выводим многострочную часть документа
        Для каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл

            НомерСтроки = НомерСтроки + 1;

            СтруктураПараметры = Новый Структура();
            СтруктураПараметры.Вставить("НомерСтроки", 				НомерСтроки);
            СтруктураПараметры.Вставить("НоменклатураНаименование", СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование));
            СтруктураПараметры.Вставить("Товар", 				   	СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование));
            СтруктураПараметры.Вставить("Номенклатура", 			СтрокаТабличнойЧасти.Номенклатура);
            СтруктураПараметры.Вставить("Количество", 				СтрокаТабличнойЧасти.Количество);
            СтруктураПараметры.Вставить("ЕдиницаИзмерения", 		СтрокаТабличнойЧасти.ЕдиницаИзмеренияНаименование);
            СтруктураПараметры.Вставить("Цена", 				   	СтрокаТабличнойЧасти.Цена);
            СтруктураПараметры.Вставить("Сумма", 				   	СтрокаТабличнойЧасти.Сумма);

            Если ВыводитьКоды Тогда
                СтруктураПараметры.Вставить("НоменклатураКод", 		СтрокаТабличнойЧасти.НоменклатураКод);
                СтруктураПараметры.Вставить("КодАртикул", 			СтрокаТабличнойЧасти.НоменклатураКод);
            КонецЕсли;

            ОбластьСтроки.Параметры.Заполнить(СтруктураПараметры);

            ТабличныйДокумент.Вывести(ОбластьСтроки);

        КонецЦикла;

        // Выводим подвал документа
        Если ТаблицаУслуги <> Неопределено Тогда
            Сумма    = ТаблицаУслуги.Итог("Сумма");
            СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
        Иначе
            Сумма    = 0;
            СуммаНДС = 0;
        КонецЕсли;

        ОбластьМакета = Макет.ПолучитьОбласть("Итого");
        ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма)));
        ТабличныйДокумент.Вывести(ОбластьМакета);

        ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");

        СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(СведенияОДокументе.ТаблицаДокумента, "СтавкаНДС", Истина);

        ДанныеПечатиИтоговНДС = ДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, СведенияОДокументе.СуммаВключаетНДС);
        #Вставка
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации ++
        Если ГП_ЭтоМодифицированныйАктРеализации И СведенияОДокументе.СуммаВключаетНДС = Ложь Тогда;
            ГП_ОбластьМакетаВсегоСУчетомНДС = Макет.ПолучитьОбласть("ГП_ИтогоСУчетомНДС");
            ГП_ОбластьМакетаВсегоСУчетомНДС.Параметры.ВсегоСУчетомНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
        КонецЕсли;
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации --
        #КонецВставки

        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтоговНДС);
        ТабличныйДокумент.Вывести(ОбластьМакета);
        #Вставка
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации ++
        Если ГП_ЭтоМодифицированныйАктРеализации И ГП_ОбластьМакетаВсегоСУчетомНДС <> Неопределено Тогда
            ТабличныйДокумент.Вывести(ГП_ОбластьМакетаВсегоСУчетомНДС);
        КонецЕсли;
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации --
        #КонецВставки

        СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
        ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
        ИтоговаяСтрока = НСтр("ru='Всего оказано услуг %1, на сумму %2'");
        ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИтоговаяСтрока, НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.Валюта));
        СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, СведенияОДокументе.Валюта);
        #Вставка
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации ++
        Если ГП_ЭтоМодифицированныйАктРеализации И ГП_ОбластьМакетаВсегоСУчетомНДС <> Неопределено Тогда
            СтруктураНДСДляЗаполнения = ДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, Истина);
            
            ТекстНДС = НРег(Сред(СтруктураНДСДляЗаполнения.НДС, 1, 1)) + Сред(СтруктураНДСДляЗаполнения.НДС, 2);
            СуммаНДСПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтруктураНДСДляЗаполнения.ВсегоНДС, 
                    СведенияОДокументе.Валюта);
            СуммаНДСПрописью = НРег(Сред(СуммаНДСПрописью, 1, 1)) + Сред(СуммаНДСПрописью, 2);
            
            СуммаПрописью = СтрШаблон("%1, %2 - %3",
                СуммаПрописью, 
                ТекстНДС,
                СуммаНДСПрописью);
        КонецЕсли;
        // Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации --
        #КонецВставки
        ДанныеПечатиСуммаПрописью = Новый Структура;
        ДанныеПечатиСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
        ДанныеПечатиСуммаПрописью.Вставить("СуммаПрописью", СуммаПрописью);
        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
        ТабличныйДокумент.Вывести(ОбластьМакета);

        // Выводим подписи
        ОбластьМакета = Макет.ПолучитьОбласть("Подписи");

        Если ЭтоПечатьЗаПоставщика Тогда
            ЗаместительПоПриказу = "";
        Иначе
            СтатусФизическогоЛица = Справочники.Организации.СтатусФизическогоЛицаНаДату(
            СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений);
            ЗаРуководителяНаОсновании = ?(ПустаяСтрока(СведенияОДокументе.ЗаРуководителяНаОснованииНаименование), "" , ", " + СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
            ЗаместительПоПриказу = ?(
            СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.Самозанятый,
            "",
            СведенияОДокументе.РуководительФИО + ЗаРуководителяНаОсновании);
        КонецЕсли;

        ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбПоставщике, "НаименованиеДляПечатныхФорм");
        Если НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) И ЗначениеЗаполнено(ПредставлениеПоставщика) Тогда 
            ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование + " " + ПредставлениеПоставщика;
        ИначеЕсли НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) Тогда 
            ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование;
        Иначе
            ДолжностьИНазваниеОрганизации = ПредставлениеПоставщика;
        КонецЕсли;


        ПредставлениеЗаказчика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм");
        ДанныеПечатиПодписи = Новый Структура;
        ДанныеПечатиПодписи.Вставить("НазваниеЗаказчика", ПредставлениеЗаказчика);

        Если НЕ ЭтоПечатьЗаПоставщика Тогда
            Если ЗначениеЗаполнено(СведенияОДокументе.ЗаЗаказчикаНаОсновании) Тогда
                ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика+", "+СведенияОДокументе.ЗаЗаказчикаНаОсновании;
            Иначе
                ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика;
            КонецЕсли;
            ДанныеПечатиПодписи.Вставить("ПредставительЗаказчика", ПредставительЗаказчика);
        Иначе
            ЗаРуководителяНаОсновании = ?(ПустаяСтрока(СведенияОДокументе.ЗаРуководителяНаОснованииНаименование), "" , ", " + СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
            ДанныеПечатиПодписи.Вставить("ПредставительЗаказчика", СведенияОДокументе.РуководительФИО + ЗаРуководителяНаОсновании);
        КонецЕсли;

        ДанныеПечатиПодписи.Вставить("ДолжностьИНазваниеОрганизации", ДолжностьИНазваниеОрганизации);
        ДанныеПечатиПодписи.Вставить("ЗаместительПоПриказу", ЗаместительПоПриказу);
        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодписи);

        ТабличныйДокумент.Вывести(ОбластьМакета);

        // В табличном документе зададим имя области, в которую был 
        // выведен объект. Нужно для возможности печати покомплектно.
        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
        НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);

        УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, СведенияОДокументе, ОбъектыПечати, СтруктураПараметровПечати);

    КонецЦикла;

    Возврат ТабличныйДокумент;

КонецФункции

// Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату ++
//
&ИзменениеИКонтроль("ПечатьСчетаНаОплату")
Функция ГП_ПечатьСчетаНаОплату(СведенияСчетаНаОплату, ОбъектыПечати, ПараметрыПечати)
    Перем ПодразделениеОтветственныхЛиц;

    УстановитьПривилегированныйРежим(Истина);

    ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.АвтоМасштаб			= Истина;
    ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
    ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

    ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
    Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
        ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
    КонецЕсли;
    ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;

    ПервыйДокумент = Истина;

    ПроверяемыеБанковскиеСчета = ДанныеДляПроверкиБанковскихСчетовПриПечатиСчетовНаОплату(СведенияСчетаНаОплату);
    РезультатыПроверкиБанковскихСчетов =
    БанковскиеСчетаСервер.ПроверитьКорректностьБанковскихСчетов(ПроверяемыеБанковскиеСчета);

    Для Каждого СведенияОДокументе Из СведенияСчетаНаОплату Цикл

        ОтборРезультатов = Новый Структура("Счет", СведенияОДокументе.БанковскийСчетПродавца);
        НайденныеРезультатыПроверки = РезультатыПроверкиБанковскихСчетов.НайтиСтроки(ОтборРезультатов);
        СведенияОПроверяемомСчете = Неопределено;
        Для Каждого СтрокаРезультата Из НайденныеРезультатыПроверки Цикл
            Если СтрокаРезультата.ПроверяемаяДата = СведенияОДокументе.ДатаДокумента Тогда
                СведенияОПроверяемомСчете = СтрокаРезультата;
                Прервать;
            КонецЕсли;
        КонецЦикла;

        Если СведенияОПроверяемомСчете <> Неопределено И СведенияОПроверяемомСчете.ЕстьОшибки Тогда
            РезультатПроверкиСчета = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СведенияОПроверяемомСчете);
            ПризнакСчета = БанковскиеСчетаСервер.НовыйПризнакСчета();
            ПризнакСчета.СчетОрганизации = Истина;
            ТекстОшибки = БанковскиеСчетаСервер.ТекстОшибкиБанковскогоСчета(РезультатПроверкиСчета, ПризнакСчета);
            ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, СведенияОДокументе.Организация);
        КонецЕсли;

        #Удаление // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату
        Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетЗаказ");
        #КонецУдаления
        #Вставка
        // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату ++
        Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ГП_ПФ_MXL_СчетЗаказ");
        // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату --
        #КонецВставки

        Если НЕ ПервыйДокумент Тогда
            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;

        ПервыйДокумент = Ложь;
        ЕстьСкидка = (СведенияОДокументе.ТаблицаДокумента.Итог("СуммаСкидки") <> 0) И ЗначениеЗаполнено(Макет.Области.Найти("Скидка"));

        // При печати комплекта, в случае если к реализации введено несколько счетов, область будет содержать больше одного счета
        // В этом случае удаляем имя у уже существующей области, чтобы создать новую с тем же именем. 
        // При этом номер строки начала области не меняем чтобы новая область включала предыдущую
        Элемент = ОбъектыПечати.НайтиПоЗначению(СведенияОДокументе.Документ);
        Если Элемент <> Неопределено 
            И ТабличныйДокумент.Области.Найти(Элемент.Представление) <> Неопределено Тогда

            ТекущаяОбласть = ТабличныйДокумент.Области.Найти(Элемент.Представление);
            ТекущаяОбласть.Имя = "";

        Иначе

            // Запомним номер строки, с которой начали выводить текущий документ.
            НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
        КонецЕсли;

        // Выводим шапку счета
        ВывестиЗаголовокПредупреждение(СведенияОДокументе.Получатель, ТабличныйДокумент, Макет);

        СведенияОПолучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Получатель, СведенияОДокументе.ДатаДляПолученияСведений);
        СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Покупатель, СведенияОДокументе.ДатаДляПолученияСведений);

        ДанныеПечатиЗаголовокСчета = Новый Структура;
        ДанныеПечатиЗаголовокСчета.Вставить("ИННПолучателя", СведенияОПолучателе.ИНН);
        ДанныеПечатиЗаголовокСчета.Вставить("КПППолучателя", СведенияОПолучателе.КПП);

        Если ТипЗнч(СведенияОДокументе.БанковскийСчетПродавца) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
            ДанныеПечатиЗаголовокСчета.Вставить("БИКБанкаПолучателя",СведенияОДокументе.БикБанкаПолучателя);
            ДанныеПечатиЗаголовокСчета.Вставить("БанкПолучателя",СведенияОДокументе.БанкПолучателя);
            ДанныеПечатиЗаголовокСчета.Вставить("БанкПолучателяПредставление",СокрЛП(СведенияОДокументе.НаименованиеБанкаПолучателя));
            ДанныеПечатиЗаголовокСчета.Вставить("СчетБанкаПолучателя",СведенияОДокументе.СчетБанкаПолучателя);
            ДанныеПечатиЗаголовокСчета.Вставить("СчетБанкаПолучателяПредставление",СведенияОДокументе.СчетБанкаПолучателя);
            ДанныеПечатиЗаголовокСчета.Вставить("СчетПолучателяПредставление", СведенияОДокументе.НомерСчетаПолучателя);
            ДанныеПечатиЗаголовокСчета.Вставить("СчетПолучателя", СведенияОДокументе.НомерСчетаПолучателя);
        КонецЕсли;

        ПредставлениеПолучателя = УчетДенежныхСредствБП.СформироватьТекстНаименованияПлательщикаПолучателя(, СведенияОДокументе.Получатель, СведенияОДокументе.БанковскийСчетПродавца, , СведенияОДокументе.ДатаДляПолученияСведений);
        ДанныеПечатиЗаголовокСчета.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);

        // Получим логотип организации
        ДвоичныеДанныеКартинки = Неопределено;
        Если ТипЗнч(СведенияОДокументе.Получатель) = Тип("СправочникСсылка.Организации") Тогда
            ДвоичныеДанныеКартинки = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(СведенияОДокументе.Получатель, "ФайлЛоготип");
        КонецЕсли;

        СчетВВалюте = СведенияОДокументе.Валюта
        <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
        Если СчетВВалюте И ЗначениеЗаполнено(СведенияОДокументе.ДоговорКонтрагента) Тогда
            ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(
            СведенияОДокументе.ДоговорКонтрагента);
            СчетВВалюте = ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
        КонецЕсли;

        ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.БанковскийСчетПродавца,
        "ВалютаДенежныхСредств");
        Если ЗначениеЗаполнено(ВалютаДенежныхСредств) И ВалютаДенежныхСредств
            <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
            // Банковский счет должен быть однозначно рублевым, вне зависимости от вида договора.
            СчетВВалюте = Истина;
        КонецЕсли;

        //Расчет сумм по документу
        Сумма       = СведенияОДокументе.ТаблицаДокумента.Итог("Сумма");
        СуммаНДС    = СведенияОДокументе.ТаблицаДокумента.Итог("СуммаНДС");
        ВсегоСкидок = СведенияОДокументе.ТаблицаДокумента.Итог("СуммаСкидки");

        // скидка по документу
        Если СведенияОДокументе.СуммаСкидки <> 0 Тогда
            ДанныеОбъекта = Новый Структура("СуммаСкидки, СуммаВключаетНДС");
            ЗаполнитьЗначенияСвойств(ДанныеОбъекта, СведенияОДокументе);
            ТаблицаТовары = СведенияОДокументе.ТаблицаДокумента.Скопировать();

            ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТаблицаТовары, ДанныеОбъекта);

            Всего    = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
            СуммаНДС = ТаблицаТовары.Итог("СуммаНДС");
            Сумма    = Всего - СведенияОДокументе.СуммаСкидки - ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
        ИначеЕсли ВсегоСкидок <> 0 Тогда
            Сумма = Сумма - ВсегоСкидок;
        КонецЕсли; 

        НДСИсчисляетсяНалоговымАгентом = СведенияОДокументе.НДСИсчисляетсяНалоговымАгентом = Истина
        И УчетНДС.ВедетсяУчетНДСПоФЗ335(СведенияОДокументе.ДатаДляПолученияСведений);

        ДанныеПечатиИтоговНДС = НовыйДанныеПечатиИтоговНДС();
        Если НДСИсчисляетсяНалоговымАгентом Тогда
            ДанныеПечатиИтоговНДС.НДС      = УчетНДС.НадписьСтавкаНДСИсчисляетсяНалоговымАгентом();
            ДанныеПечатиИтоговНДС.ВсегоНДС = НСтр("ru='-'");
        Иначе
            СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(СведенияОДокументе.ТаблицаДокумента, "СтавкаНДС", Истина);
            ЗаполнитьЗначенияСвойств(ДанныеПечатиИтоговНДС, 
            ДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, СведенияОДокументе.СуммаВключаетНДС, ":"));
        КонецЕсли;

        ДвоичныеДанныеQRКода = Неопределено;
        Если СведенияОПокупателе.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
            И Не СчетВВалюте Тогда
            ПечатьQRКодаСБП = Ложь;
            Если ТипЗнч(СведенияОДокументе.БанковскийСчетПродавца) = Тип("СправочникСсылка.БанковскиеСчета")
                И ТипЗнч(СведенияОДокументе.Получатель) = Тип("СправочникСсылка.Организации") Тогда
                СведенияОДокументе.НастройкаИнтеграцииСБП = ИнтеграцияССБПБППовтИсп.НастройкаИнтеграцииСБППоБИК(
                СведенияОДокументе.Получатель, СведенияОДокументе.БикБанкаПолучателя);
                Если ИнтеграцияСПлатежнымиСистемами.ИнтеграцияДоступна()
                    И ЗначениеЗаполнено(СведенияОДокументе.НастройкаИнтеграцииСБП) Тогда
                    ДвоичныеДанныеQRКода = ИнтеграцияССБПБП.QRКодСБП(СведенияОДокументе);
                    ПечатьQRКодаСБП = Истина;
                КонецЕсли;
            КонецЕсли;

            Если Не ПечатьQRКодаСБП Тогда
                ДвоичныеДанныеQRКода = QRКодРеквизитыПлатежа(СведенияОДокументе, ДанныеПечатиЗаголовокСчета, ДанныеПечатиИтоговНДС);
            КонецЕсли;
        КонецЕсли; 

        ЕстьQR      = ЗначениеЗаполнено(ДвоичныеДанныеQRКода);
        ЕстьЛоготип = ЗначениеЗаполнено(ДвоичныеДанныеКартинки);

        // Если макет поддерживает QR код
        Если Макет.Области.Найти("QRКод") <> Неопределено Тогда
            ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));

            // Начало фиксации формата шапки документа
            НачалоНовогоФормата = ТабличныйДокумент.ВысотаТаблицы;

            ОбластьРеквизиты = Макет.Область("РеквизитыПраво");
            Если НЕ ЕстьQR Тогда
                ОбластьРеквизиты.ШиринаКолонки = ОбластьРеквизиты.ШиринаКолонки + Макет.Область("QRКод").ШиринаКолонки;
            КонецЕсли; 

            Если ЕстьЛоготип Тогда
                ОбластьРеквизиты  = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом|Реквизиты");
                ОбластьQR         = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом|QRКод");
                ОбластьРисунка    = ОбластьQR.Области.Найти("РисунокQRЛоготип");

                // В случае "битой" картинки формирование счета не должно прерваться
                Попытка
                    ОбластьРеквизиты.Рисунки.ЛоготипСчета.Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
                Исключение
                    ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать счета'"), УровеньЖурналаРегистрации.Ошибка, 
                    Метаданные.Документы.СчетНаОплатуПокупателю,СведенияОДокументе.Документ, НСтр("ru = 'Не удалось получить логотип'"));
                КонецПопытки;
            Иначе
                ОбластьРеквизиты  = Макет.ПолучитьОбласть("ЗаголовокСчета|Реквизиты");
                ОбластьQR         = Макет.ПолучитьОбласть("ЗаголовокСчета|QRКод");
                ОбластьРисунка    = ОбластьQR.Области.Найти("РисунокQR");
            КонецЕсли;

            ОбластьРеквизиты.Параметры.Заполнить(СведенияОДокументе);
            ОбластьРеквизиты.Параметры.Заполнить(ДанныеПечатиЗаголовокСчета);

            ТабличныйДокумент.Вывести(ОбластьРеквизиты);


            Если ЕстьQR 
                И ОбластьРисунка <> Неопределено Тогда

                ОбластьРисунка.Картинка = Новый Картинка(ДвоичныеДанныеQRКода);

                ТабличныйДокумент.Присоединить(ОбластьQR);
            КонецЕсли;

            ТабличныйДокумент.Область(НачалоНовогоФормата+1,,ТабличныйДокумент.ВысотаТаблицы).СоздатьФорматСтрок();
            // Конец фиксации формата шапки документа
        Иначе
            // Если есть логотип и макет измененный (нет область с QR кодом)
            Если ЕстьЛоготип И Макет.Области.Найти("ЗаголовокСчетаСЛоготипом") <> Неопределено Тогда
                ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");

                // В случае "битой" картинки формирование счета не должно прерваться
                Попытка
                    ОбластьМакета.Рисунки.ЛоготипСчета.Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
                Исключение
                    ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать счета'"), УровеньЖурналаРегистрации.Ошибка, 
                    Метаданные.Документы.СчетНаОплатуПокупателю,СведенияОДокументе.Документ, НСтр("ru = 'Не удалось получить логотип'"));
                КонецПопытки;
            Иначе
                // Выводим область по умолчанию "ЗаголовокСчета", в случае если нет не логотипа ни QR кода, 
                // либо они есть, но областей для них в макете нет 

                ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
            КонецЕсли; 

            ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
            ОбластьМакета.Параметры.Заполнить(ДанныеПечатиЗаголовокСчета);

            ТабличныйДокумент.Вывести(ОбластьМакета);
        КонецЕсли;

        ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

        НомерДокумента = НомерСчетаНаОплату(СведенияОДокументе.ГосударственныйКонтракт, СведенияОДокументе.НомерДокумента);

        ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Счет на оплату № %1 от %2 г.'"), 
        НомерДокумента, Формат(СведенияОДокументе.ДатаДокумента, "ДФ='дд ММММ гггг'"));

        ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));

        ТабличныйДокумент.Вывести(ОбластьМакета);

        ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
        ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
        СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Поставщик, СведенияОДокументе.ДатаДляПолученияСведений);
        Если ЗначениеЗаполнено(СведенияОДокументе.Подразделение) 
            И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Подразделение, "ОбособленноеПодразделение") Тогда

            СведенияОбОрганизации.КПП = УчетНДСБП.КППНаДату(СведенияОДокументе.Подразделение, СведенияОДокументе.ДатаДокумента);
        КонецЕсли;

        #Удаление // Гарант+ Килипенко 15.10.2024 [F00229734] Формирование счета на оплату
        ПредставлениеПоставщика  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
        СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
        #КонецУдаления
        #Вставка
        // Гарант+ Килипенко 15.10.2024 [F00229734] Формирование счета на оплату ++
        ПредставлениеПоставщика  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
            СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,");
        // Гарант+ Килипенко 15.10.2024 [F00229734] Формирование счета на оплату --
        #КонецВставки

        ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", ПредставлениеПоставщика));
        ТабличныйДокумент.Вывести(ОбластьМакета);

        ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
        ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);

        #Удаление // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату
        ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
        СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
        #КонецУдаления
        #Вставка
        // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату ++
        ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
            СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,");
        // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату --
        #КонецВставки
        Основание = СокрЛП(Строка(СведенияОДокументе.ДоговорКонтрагента));
        ДанныеПечатиПокупатель = Новый Структура;
        ДанныеПечатиПокупатель.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
        ДанныеПечатиПокупатель.Вставить("Основание", Основание);

        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПокупатель);
        ТабличныйДокумент.Вывести(ОбластьМакета);

        ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
        ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
        ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
        ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

        // Начало фиксации формата таблицы документа
        НачалоНовогоФормата = ТабличныйДокумент.ВысотаТаблицы;

        ТабличныйДокумент.Вывести(ОбластьНомера);
        Если ВыводитьКоды Тогда
            ДанныеПечатиКолонкиКодов = Новый Структура;
            Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
                ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Артикул");
            ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
                ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Код");
            КонецЕсли;
            ОбластьКодов.Параметры.Заполнить(ДанныеПечатиКолонкиКодов);
            ТабличныйДокумент.Присоединить(ОбластьКодов);
        КонецЕсли;
        ТабличныйДокумент.Присоединить(ОбластьДанных);
        Если ЕстьСкидка Тогда
            ОбластьСкидки  = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
            ТабличныйДокумент.Присоединить(ОбластьСкидки);
        КонецЕсли;
        ТабличныйДокумент.Присоединить(ОбластьСуммы);

        ОбластьКолонкаТовар = Макет.Область("Товар");
        Если Не ВыводитьКоды Тогда
            ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
        КонецЕсли;
        Если Не ЕстьСкидка И ЗначениеЗаполнено(Макет.Области.Найти("Скидка")) Тогда
            ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("Скидка").ШиринаКолонки;
        КонецЕсли;

        ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
        ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
        ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
        ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

        НомерСтроки = 0;
        Для каждого Строка Из СведенияОДокументе.ТаблицаДокумента Цикл
            НомерСтроки = НомерСтроки + 1;
            ОбластьНомера.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));

            ТабличныйДокумент.Вывести(ОбластьНомера);

            Если ВыводитьКоды Тогда
                ОбластьКодов.Параметры.Заполнить(Новый Структура("Артикул", Строка.НоменклатураАртикул));
                ТабличныйДокумент.Присоединить(ОбластьКодов);
            КонецЕсли;
            ДанныеПечатиСтрокаОбластьДанных = Новый Структура;
            ДанныеПечатиСтрокаОбластьДанных.Вставить("Товар",			 СокрЛП(Строка.НоменклатураНаименование));
            ДанныеПечатиСтрокаОбластьДанных.Вставить("Количество",		 Строка.Количество);
            ДанныеПечатиСтрокаОбластьДанных.Вставить("ЕдиницаИзмерения",
            ?(СведенияОДокументе.ВидОперации = Перечисления.ВидыОперацийСчетаПокупателю.ОсновныеСредства, НСтр("ru = 'шт.'"), Строка.ЕдиницаИзмеренияНаименование));
            ДанныеПечатиСтрокаОбластьДанных.Вставить("Цена",			 ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.Цена));
            ОбластьДанных.Параметры.Заполнить(ДанныеПечатиСтрокаОбластьДанных);
            ТабличныйДокумент.Присоединить(ОбластьДанных);

            Если ЕстьСкидка Тогда
                ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
                ОбластьСкидки.Параметры.Заполнить(Новый Структура("СуммаСкидки", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.СуммаСкидки)));
                ТабличныйДокумент.Присоединить(ОбластьСкидки);
            КонецЕсли;

            ОбластьСуммы.Параметры.Заполнить(Новый Структура("Сумма", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.Сумма - Строка.СуммаСкидки)));

            ТабличныйДокумент.Присоединить(ОбластьСуммы);
        КонецЦикла;

        ТабличныйДокумент.Область(НачалоНовогоФормата+1,,ТабличныйДокумент.ВысотаТаблицы).СоздатьФорматСтрок();
        // Конец фиксации формата таблицы документа

        Если ЗначениеЗаполнено(Макет.Области.Найти("Подвал")) Тогда
            ОбластьПодвал  = Макет.ПолучитьОбласть("Подвал");
            ТабличныйДокумент.Вывести(ОбластьПодвал);
        КонецЕсли; 

        Если СведенияОДокументе.СуммаСкидки <> 0 
            И ЗначениеЗаполнено(Макет.Области.Найти("СкидкаПоДокументу")) Тогда

            ОбластьСкидки = Макет.ПолучитьОбласть("СкидкаПоДокументу");
            ОбластьСкидки.Параметры.Заполнить(Новый Структура("СуммаСкидки", ОбщегоНазначенияБПВызовСервера.ФорматСумм(СведенияОДокументе.СуммаСкидки)));
            ТабличныйДокумент.Вывести(ОбластьСкидки);
        КонецЕсли; 

        ДанныеЗаполненияИтого = Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма));

        СуммаКОплате = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
        ИтогоКОплате = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКОплате);
        ДанныеЗаполненияИтогоКОплате = Новый Структура("ИтогоКОплате", ИтогоКОплате);

        Если ЗначениеЗаполнено(Макет.Области.Найти("Скидка")) Тогда

            ОбластьИтого  = Макет.ПолучитьОбласть("Итого");
            ОбластьИтого.Параметры.Заполнить(ДанныеЗаполненияИтого);

            ТабличныйДокумент.Вывести(ОбластьИтого);

            // Вывести ИтогоНДС
            ОбластьИтогоНДС  = Макет.ПолучитьОбласть("ИтогоНДС");
            ОбластьИтогоНДС.Параметры.Заполнить(ДанныеПечатиИтоговНДС);

            ТабличныйДокумент.Вывести(ОбластьИтогоНДС);

            // Вывести ИтогоКОплате
            ОбластьИтогоКОплате  = Макет.ПолучитьОбласть("ИтогоКОплате");
            ОбластьИтогоКОплате.Параметры.Заполнить(ДанныеЗаполненияИтогоКОплате);

            ТабличныйДокумент.Вывести(ОбластьИтогоКОплате);

        Иначе
            // В случае если используется пользовательский макет - используем вертикальные названия областей.
            ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
            ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
            ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
            ОбластьСумма  = Макет.ПолучитьОбласть("Итого|Сумма");

            ТабличныйДокумент.Вывести(ОбластьНомера);
            Если ВыводитьКоды Тогда
                ТабличныйДокумент.Присоединить(ОбластьКодов);
            КонецЕсли;
            ТабличныйДокумент.Присоединить(ОбластьДанных);
            ОбластьСумма.Параметры.Заполнить(ДанныеЗаполненияИтого);
            ТабличныйДокумент.Присоединить(ОбластьСумма);

            // Вывести ИтогоНДС
            ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
            ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
            ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
            ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

            ТабличныйДокумент.Вывести(ОбластьНомера);
            Если ВыводитьКоды Тогда
                ТабличныйДокумент.Присоединить(ОбластьКодов);
            КонецЕсли;
            ОбластьДанных.Параметры.Заполнить(ДанныеПечатиИтоговНДС);
            ОбластьСуммы.Параметры.Заполнить(ДанныеПечатиИтоговНДС);

            ТабличныйДокумент.Присоединить(ОбластьДанных);
            ТабличныйДокумент.Присоединить(ОбластьСуммы);

            // Вывести ИтогоКОплате
            ОбластьНомера = Макет.ПолучитьОбласть("ИтогоКОплате|НомерСтроки");
            ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоКОплате|КолонкаКодов");
            ОбластьДанных = Макет.ПолучитьОбласть("ИтогоКОплате|Данные");
            ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоКОплате|Сумма");
            ТабличныйДокумент.Вывести(ОбластьНомера);
            Если ВыводитьКоды Тогда
                ТабличныйДокумент.Присоединить(ОбластьКодов);
            КонецЕсли;
            ТабличныйДокумент.Присоединить(ОбластьДанных);
            ОбластьСуммы.Параметры.Заполнить(ДанныеЗаполненияИтогоКОплате);

            ТабличныйДокумент.Присоединить(ОбластьСуммы);
        КонецЕсли;

        // Вывести Сумму прописью
        ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
        ДанныеПечатиСуммаПрописью = Новый Структура("ИтоговаяСтрока, СуммаПрописью");
        СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
        ДанныеПечатиСуммаПрописью.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований %1, на сумму %2'"),
        НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.Валюта));
        ДанныеПечатиСуммаПрописью.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, СведенияОДокументе.Валюта);
        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
        ТабличныйДокумент.Вывести(ОбластьМакета);

        ДвоичныеДанныеКартинки = Неопределено;

        ДобавленОтступПередДопУсловиями = Ложь;

        // Срок оплаты
        Если СведенияОДокументе.СрокОплаты <> Дата(1,1,1) И
            ЗначениеЗаполнено(Макет.Области.Найти("СрокОплаты")) Тогда

            // Добавим отступ перед текстом
            Если ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловияОтступ")) Тогда
                ОбластьМакетаОтступ = Макет.ПолучитьОбласть("ДополнительныеУсловияОтступ");
                ТабличныйДокумент.Вывести(ОбластьМакетаОтступ);
                ДобавленОтступПередДопУсловиями = Истина;
            КонецЕсли;

            ОбластьМакета = Макет.ПолучитьОбласть("СрокОплаты");
            СтруктураПараметров = Новый Структура("СрокОплаты", Формат(СведенияОДокументе.СрокОплаты, "ДФ=dd.MM.yyyy"));
            ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
            #Удаление // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату
            ТабличныйДокумент.Вывести(ОбластьМакета);
            #КонецУдаления

        КонецЕсли;

        // Дополнительные условия
        Если НЕ ПустаяСтрока(СведенияОДокументе.ТекстДополнительныхУсловий)
            И ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловия")) Тогда

            // Добавим отступ перед текстом
            Если НЕ ДобавленОтступПередДопУсловиями И
                ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловияОтступ")) Тогда
                ОбластьМакетаОтступ = Макет.ПолучитьОбласть("ДополнительныеУсловияОтступ");
                ТабличныйДокумент.Вывести(ОбластьМакетаОтступ);
            КонецЕсли;

            // Выводим построчно многострочный текст
            // для того, чтобы корректно печатались длинные тексты
            ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
            ТекстДополнительныхУсловий = СведенияОДокументе.ТекстДополнительныхУсловий;
            ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
            Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
                СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
                ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
                ТабличныйДокумент.Вывести(ОбластьМакета);
            КонецЦикла;
        КонецЕсли;

        ДанныеПечатиПодвалСчета = Новый Структура;
        СтатусФизическогоЛица = Справочники.Организации.СтатусФизическогоЛицаНаДату(
        СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений);
        ЭтоСамозанятый = СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.Самозанятый;
        СчетВыставленЛичноПредпринимателем = Не ЗначениеЗаполнено(СведенияОДокументе.РуководительФИО) Или
        СведенияОДокументе.Руководитель = СведенияОПолучателе.ИндивидуальныйПредприниматель;
        // В случае если счет выставляет предприниматель, который свои полномочия никому не делегировал - выводим специальный подвал документа
        Если СведенияОПолучателе.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
            И СчетВыставленЛичноПредпринимателем Или ЭтоСамозанятый Тогда
            ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаПредприниматель");
            ДанныеПечатиПодвалСчета.Вставить("ФИОПредпринимателя", СведенияОПолучателе.ФамилияИнициалыФизлица);
            ДанныеПечатиПодвалСчета.Вставить("Предприниматель",
            ?(ЭтоСамозанятый, НСтр("ru = 'Поставщик (Исполнитель)'"), НСтр("ru = 'Предприниматель'")));
        Иначе
            ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
            ДанныеПечатиПодвалСчета.Вставить("ФИОРуководителя", СведенияОДокументе.РуководительФИО);
            ДанныеПечатиПодвалСчета.Вставить("ФИОБухгалтера", СведенияОДокументе.ГлавныйБухгалтерФИО);
            ДанныеПечатиПодвалСчета.Вставить("ЗаРуководителяПоПриказу", СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
            ДанныеПечатиПодвалСчета.Вставить("ЗаГлавногоБухгалтераПоПриказу", СведенияОДокументе.ЗаГлавногоБухгалтераНаОснованииНаименование);
        КонецЕсли;

        ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодвалСчета);
        ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
        ТабличныйДокумент.Вывести(ОбластьМакета);

        // В табличном документе зададим имя области, в которую был 
        // выведен объект. Нужно для возможности печати покомплектно.
        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
        НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
        УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, СведенияОДокументе, ОбъектыПечати, ПараметрыПечати);

    КонецЦикла;

    Возврат ТабличныйДокумент;
КонецФункции // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату --

#КонецОбласти // ПереопределениеСтандартныхФункций

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 23.09.2024 [F00228750] Доработка ПФ Акт реализации --
