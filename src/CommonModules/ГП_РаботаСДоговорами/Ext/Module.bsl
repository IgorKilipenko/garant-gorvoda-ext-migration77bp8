#Область ПрограммныйИнтерфейс

// Возвращает таблицу соответствий номеров договоров (!!! Только Абонентский отдел) полученных из наименования договора
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Ссылка - СправочникСсылка.ДоговорыКонтрагентов
//      * Наименование - Строка
//      * НомерИзНаименования - Строка
Функция ПолучитьТаблицуСоответствийНомеровНаименованийДоговоров() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
        |	ДоговорыКонтрагентов.Наименование КАК Наименование,
        |	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК НомерИзНаименования
        |ИЗ
        |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |	ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
        |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
        |	И ДоговорыКонтрагентов.lc_ВидДоговора В (&ВидыДоговора)
        |	И ДоговорыКонтрагентов.Владелец ССЫЛКА Справочник.Контрагенты
        |";

    СписокВидовДоговоров = Новый Массив;
    СписокВидовДоговоров.Добавить(ПолучитьДополнительныйВидДоговораАбонентскийОтдел().Ссылка);

    Запрос.УстановитьПараметр("ВидыДоговора", СписокВидовДоговоров);

    РезультатЗапроса = Запрос.Выполнить();
    СоответствияНомеровСуществующихДоговоров = РезультатЗапроса.Выгрузить();
    Для Каждого СтрокаДанных Из СоответствияНомеровСуществующихДоговоров Цикл
        // Заполнение поля НомерИзНаименования
        СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(СтрокаДанных.Наименование);
        Если СтруктураНомера.Успех = Истина Тогда
            СтрокаДанных.НомерИзНаименования = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
                    "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
        КонецЕсли;
    КонецЦикла;

    Возврат СоответствияНомеровСуществующихДоговоров;
КонецФункции

// Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров ++
//
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Ссылка - СправочникСсылка.ДоговорыКонтрагентов
//      * Наименование - Строка
//      * Номер - Строка
//      * Контрагент - СправочникСсылка.Контрагенты
Функция ПолучитьВсеДоговорыАбонентскогоОтдела() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
        |	ДоговорыКонтрагентов.Наименование КАК Наименование,
        |	ДоговорыКонтрагентов.Номер КАК Номер,
        |	ДоговорыКонтрагентов.Владелец КАК Контрагент
        |ИЗ
        |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |	ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
        |	И ДоговорыКонтрагентов.lc_ВидДоговора В (&ВидыДоговора)
        |	И ДоговорыКонтрагентов.Владелец ССЫЛКА Справочник.Контрагенты
        |";

    СписокВидовДоговоров = Новый Массив;
    СписокВидовДоговоров.Добавить(ПолучитьДополнительныйВидДоговораАбонентскийОтдел().Ссылка);
    Запрос.УстановитьПараметр("ВидыДоговора", СписокВидовДоговоров);

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров --

// Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров ++
//
// Параметры:
//  ДоговорСсылка - СправочникСсылка.ДоговорыКонтрагентов - Документ для которого ищется номер
//      собственный номер этого документа будет игнорироваться
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Значение - Число
//      * НомерСтрокой - Строка, Неопределено
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено
Функция ПолучитьМаксимальныйНомерДоговораАбонентскогоОтдела(Знач ДоговорСсылка = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, Значение, НомерСтрокой, Договор", Ложь, 0);

    ДанныеДоговоров = ПолучитьВсеДоговорыАбонентскогоОтдела();

    Для Каждого СтрокаДанных Из ДанныеДоговоров Цикл
        Если ДоговорСсылка <> Неопределено И СтрокаДанных.Ссылка = ДоговорСсылка Тогда
            Продолжить; // Игнорируем текущий объект
        КонецЕсли;

        Если ПустаяСтрока(СтрокаДанных.Номер) Тогда
            Продолжить; // Не заполнен номер
        КонецЕсли;

        РезультатПреобразования = ПреобразоватьНомерДоговораВЧисло(СтрокаДанных.Номер);
        Если РезультатПреобразования.Успех = Ложь Тогда
            Продолжить; // Ошибка расшифровки
        КонецЕсли;

        ТекущийМаксимальныйНомер = Макс(РезультатПреобразования.Значение, РезультатФункции.Значение);
        Если ТекущийМаксимальныйНомер > РезультатФункции.Значение Тогда
            РезультатФункции.Значение = ТекущийМаксимальныйНомер;
            РезультатФункции.НомерСтрокой = СтрокаДанных.Номер;
            РезультатФункции.Договор = СтрокаДанных.Ссылка;
            РезультатФункции.Успех = Истина;
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров --

// Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров ++
//
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ИзмененныеДоговоры - Массив из СправочникСсылка.ДоговорыКонтрагентов
Функция ЗаполнитьНомераДоговоровАбонентскогоОтделаПоНаименованию() Экспорт
    РезультатФункции = Новый Структура("Успех, ИзмененныеДоговоры, ТекстСообщения", Истина, Новый Массив);

    ТаблицаНомеровДоговоровАбонентскогоОтдела = ПолучитьТаблицуСоответствийНомеровНаименованийДоговоров();

    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ТаблицаНомеровДоговоровАбонентскогоОтдела Цикл
            СущНомерДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Ссылка, "Номер");
            Если ПустаяСтрока(СокрЛП(СущНомерДоговора)) = Ложь Тогда
                Продолжить;
            КонецЕсли;

            ДоговорОбъект = СтрокаДанных.Ссылка.ПолучитьОбъект();
            ДоговорОбъект.Номер = СтрокаДанных.НомерИзНаименования;

            ДоговорОбъект.Записать();
            РезультатФункции.ИзмененныеДоговоры.Добавить(ДоговорОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию();

    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ИзмененныеДоговоры.Очистить();
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка при записи / формировании номеров договоров.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров --

// Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров ++
//
// Получает номер договора из наименования договора
// Параметры:
//  НаименованиеДоговора - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Номер - Строка
//      * Суффикс - Строка - Суффикс номера
Функция ПолучитьНомерДоговораПоНаименованию(Знач НаименованиеДоговора) Экспорт
    РезультатФункции = Новый Структура("Успех, Номер, Суффикс", Ложь);

    ШаблонПоиска =
        "(?i)^\s*Договор\s*[#№N]\s*([0-9]+)\s*((?:[\\/_-]+\s*[0-9а-яА-ЯЁёa-zA-Z]+)?)";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеДоговора, ШаблонПоиска);

    // Проверка найденных групп
    НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
    Если РезультатПоиска.НачальнаяПозиция = 0 ИЛИ НайденныеГруппы.Количество() < 1 Тогда
        Возврат РезультатФункции; // Номер не найден
    КонецЕсли;

    // Формирование результата
    РезультатФункции.Успех = Истина;
    РезультатФункции.Номер = НайденныеГруппы[0].Значение;
    РезультатФункции.Суффикс = ?(НайденныеГруппы.Количество() > 1 И ПустаяСтрока(СокрЛП(НайденныеГруппы[1].Значение)) = Ложь,
            СтрЗаменитьПоРегулярномуВыражению(НайденныеГруппы[1].Значение, "^[\\/_-]+\s*", ""), "");

    Возврат РезультатФункции;
КонецФункции // // Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров --

// Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров ++
//
// Параметры:
//  НомерДоговора - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Значение - Неопределено
Функция ПреобразоватьНомерДоговораВЧисло(Знач НомерДоговора) Экспорт
    РезультатФункции = Новый Структура("Успех, Значение", Ложь);

    ШаблонПоиска =
        "^\s*([0-9]+)[^0-9]*";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НомерДоговора, ШаблонПоиска);

    // Проверка найденных групп
    НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
    Если РезультатПоиска.НачальнаяПозиция = 0 ИЛИ НайденныеГруппы.Количество() < 1 Тогда
        Возврат РезультатФункции; // Номер не найден
    КонецЕсли;

    // Формирование результата
    РезультатФункции.Успех = Истина;
    РезультатФункции.Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НайденныеГруппы[0].Значение);

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 19.11.2024 [F00231185] авто-нумерация договоров --

// Параметры:
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникОбъект.ДоговорыКонтрагентов
// Возвращаемое значение:
//  - Булево
Функция ЭтоДоговорАбонентскогоОтдела(Знач Договор) Экспорт
    ДополнительныйВидДоговора = Неопределено;
    Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорКонтрагента") Тогда
        ДополнительныйВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "lc_ВидДоговора");
        Возврат ДополнительныйВидДоговора = ПолучитьДополнительныйВидДоговораАбонентскийОтдел().Ссылка;
    Иначе
        ДополнительныйВидДоговора = Договор.lc_ВидДоговора;
    КонецЕсли;

    Возврат ДополнительныйВидДоговора = ПолучитьДополнительныйВидДоговораАбонентскийОтдел().Ссылка;
КонецФункции

#Область Константы

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.lc_ВидыДоговоров
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьДополнительныйВидДоговораАбонентскийОтдел() Экспорт
    РезультатФункции = Новый Структура("Ссылка, Код, Наименование");
    РезультатФункции.Код = "000000004";

    РезультатФункции.Ссылка = Справочники.lc_ВидыДоговоров.НайтиПоКоду(РезультатФункции.Код, Истина);
    Если ЗначениеЗаполнено(РезультатФункции) = Ложь Тогда
        ВызватьИсключение("Отсутствует обязательный элемент ""АбонентскийОтдел"" справочника ""lc_ВидыДоговоров""");
    КонецЕсли;

    РезультатФункции.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РезультатФункции.Ссылка, "Наименование");

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // Константы

#КонецОбласти // ПрограммныйИнтерфейс
