// ++ Гарант+ Килипенко 22.07.2024 [F00226285] заполнение назначения услуг ++
#Область ПрограммныйИнтерфейс

#Область Счетчики
// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
//  СчетчикКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx-xxx (КонтрагентКод{8}-ОбъектАбонентаКод{4}-СчетчикКод{3})
Функция СформироватьСоставнойКодСчетчикаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод, Знач СчетчикКод) Экспорт
    НаправлениеДополнения = "Слева";
    СимволДополнения = "0";

    Возврат СтрШаблон("%1-%2-%3",
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КонтрагентКод, ПолучитьДлинуКодаКонтрагентаБП77(), СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОбъектАбонентаКод, ПолучитьДлинуКодаОбъектаАбонентаБП77(), СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СчетчикКод, ПолучитьДлинуКодаСчетчикаБП77(), СимволДополнения, НаправлениеДополнения));
КонецФункции

// Выполняет разбор составного кода счетчика (идентификатора БП77)
// Параметры:
//  Счетчик - СправочникСсылка.КВП_Счетчики, СправочникОбъект.КВП_Счетчики
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
Функция ПолучитьЧастиСоставногоКодаСчетчика(Знач Счетчик) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод, СчетчикКод", Истина, "", "", "");

    Если ТипЗнч(Счетчик) <> Тип("СправочникСсылка.КВП_Счетчики")
        И ТипЗнч(Счетчик) <> Тип("СправочникОбъект.КВП_Счетчики") Тогда
        Возврат РезультатФункции; // неверный тип счетчика
    КонецЕсли;

    ИдентификаторСчетчикаБП77 = Неопределено;

    Если ТипЗнч(Счетчик) = Тип("СправочникСсылка.КВП_Счетчики") Тогда
        Если Счетчик.Пустая() Тогда
            Возврат РезультатФункции; // нет данных идентификатора
        КонецЕсли;

        ИдентификаторСчетчикаБП77 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счетчик, "ГП_ИдентификаторБП77");
    Иначе
        ИдентификаторСчетчикаБП77 = Счетчик.ГП_ИдентификаторБП77;
    КонецЕсли;

    Если ТипЗнч(ИдентификаторСчетчикаБП77) <> Тип("Строка") ИЛИ ПустаяСтрока(ИдентификаторСчетчикаБП77) Тогда
        Возврат РезультатФункции; // нет данных идентификатора
    КонецЕсли;

    РезультатФункции = ПолучитьЧастиСоставногоКодаСчетчикаПоИдентификатору(ИдентификаторСчетчикаБП77);
    Возврат РезультатФункции;
КонецФункции

// Выполняет разбор составного кода счетчика (идентификатора БП77)
// Параметры:
//  ИдентификаторСчетчикаБП77 - Строка - Составной код счетчика
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
Функция ПолучитьЧастиСоставногоКодаСчетчикаПоИдентификатору(Знач ИдентификаторСчетчикаБП77) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод, СчетчикКод", Истина, "", "", "");

    ШаблонРазбораКода = ПолучитьШаблонПоискаЧастейИдентификатораСчетчика();
    РезультатПоискаЧастей = СтрНайтиПоРегулярномуВыражению(ИдентификаторСчетчикаБП77, ШаблонРазбораКода);
    Если РезультатПоискаЧастей.НачальнаяПозиция = 0
        ИЛИ РезультатПоискаЧастей.ПолучитьГруппы().Количество() < ПолучитьУровеньВложенностиКодаСчетчикаБП77() Тогда

        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Совпадений не найдено
    КонецЕсли;

    МассивЧастейНомера = РезультатПоискаЧастей.ПолучитьГруппы();
    РезультатФункции.КонтрагентКод = МассивЧастейНомера[0].Значение;
    РезультатФункции.ОбъектАбонентаКод = МассивЧастейНомера[1].Значение;
    РезультатФункции.СчетчикКод = МассивЧастейНомера[2].Значение;

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // Счетчики

#Область КонстантыСчетчиков
// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаКонтрагентаБП77() Экспорт
    Возврат 8;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаОбъектаАбонентаБП77() Экспорт
    Возврат 4;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаСчетчикаБП77() Экспорт
    Возврат 3;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьУровеньВложенностиКодаСчетчикаБП77() Экспорт
    Возврат 3;
КонецФункции

// Маска идентификатора счетчика БП77 для использования в функции подобно
// Возвращаемое значение:
//  - Строка
Функция ПолучитьМаскуСоставногоКодаСчетчикаДляПодобно() Экспорт
    Возврат "________-____-___";
КонецФункции

// Получает шаблон для проверки валидности идентификатора (составного кода) счетчика БП77
// Возвращаемое значение:
//  - Строка
Функция ПолучитьШаблонПроверкиСоставногоКодаСчетчика() Экспорт
    РезультатФункции = ПолучитьШаблонПоискаЧастейИдентификатораСчетчика();
    РезультатФункции = СтрЗаменитьПоРегулярномуВыражению(РезультатФункции, "[\)\(]", "");
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТолькоЗначащие - Булево - Если Истина, тогда ведущие нули будут игнорироваться
// Возвращаемое значение:
//  - Строка
Функция ПолучитьШаблонПоискаЧастейИдентификатораСчетчика(Знач ТолькоЗначащие = Ложь) Экспорт
    Если ТолькоЗначащие Тогда
        Возврат "0*([1-9][0-9]{0,7})-0*([1-9][0-9]{0,3})-0*([1-9][0-9]{0,2})";
    Иначе
        Возврат "([0-9]{8})-([0-9]{4})-([0-9]{3})";
    КонецЕсли;
КонецФункции

// Устарела. Не используется в текущей реализации
//
// Параметры:
//  КакСписокСРазделителем - Булево
// Возвращаемое значение:
//  - Массив из Строка, Строка
Функция ПолучитьКлючиДанныхСчетчикаБП77(Знач КакСписокСРазделителем = Ложь) Экспорт
    РезультатФункции = Новый Массив;
    РезультатФункции.Добавить("КонтрагентКод");
    РезультатФункции.Добавить("КонтрагентПолноеНаименование");
    РезультатФункции.Добавить("КонтрагентНаименование");
    РезультатФункции.Добавить("КонтрагентИНН");
    РезультатФункции.Добавить("ОбъектАбонентаНаименование");
    РезультатФункции.Добавить("ОбъектАбонентаКод");
    РезультатФункции.Добавить("ДоговорНаименование");
    РезультатФункции.Добавить("ДоговорКод");
    РезультатФункции.Добавить("СчетчикНаименование");
    РезультатФункции.Добавить("СчетчикКод");
    РезультатФункции.Добавить("ТипСчетчикаНаименование");
    РезультатФункции.Добавить("ТипСчетчикаКод");
    РезультатФункции.Добавить("ПериодичностьПоверки");
    РезультатФункции.Добавить("КоэффициентПересчета");
    РезультатФункции.Добавить("МаксимальныйПоказатель");
    РезультатФункции.Добавить("Комментарий");
    РезультатФункции.Добавить("ВидСчетчика");
    РезультатФункции.Добавить("МетодРасчетаХВ");
    РезультатФункции.Добавить("МетодРасчетаГВ");
    РезультатФункции.Добавить("МетодРасчетаКан");
    РезультатФункции.Добавить("ТолькоДляКанализации");
    РезультатФункции.Добавить("ДатаУстановки");
    РезультатФункции.Добавить("ДатаПоверки");
    РезультатФункции.Добавить("ДатаПоказаний");
    РезультатФункции.Добавить("ЗначенияПоказаний");

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // КонстантыСчетчиков

#Область ЛицевыеСчета
// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx (КонтрагентКод{8}-ОбъектАбонентаКод{4})
Функция СформироватьСоставнойКодЛицевогоСчетаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    НаправлениеДополнения = "Слева";
    СимволДополнения = "0";

    Возврат СтрШаблон("%1-%2-%3",
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КонтрагентКод, 8, СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОбъектАбонентаКод, 4, СимволДополнения, НаправлениеДополнения));
КонецФункции

// Устарела. В дальнейшем развитии функционала миграции использоваться не будет.
//  Код для сопоставления с БП77 будет формироваться в виде xxxxxxxx{8}-xxxx{4} КонтрагентКод-ОбъектАбонентаКод
//  и будет записан в реквизит лицевого счета `ГП_ИдентификаторБП77`
//
// Выполняет разбор составного кода идентификатора (созданного по данным кодов БП77) вида x_xxxxxxxx
//  Идентификатор формировался не ГП по данным: ОбъектАбонентаКод_КонтрагентКод
// Параметры:
//  УстаревшийСоставнойКодБП77 - Строка - Составной код лицевого счета вида x{1,4}_xxxxxxxx{8} ОбъектАбонентаКод_КонтрагентКод
Функция ПолучитьЧастиИдентификатораКодаЛицевогоСчета(Знач УстаревшийСоставнойКодБП77)
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод", Истина, "", "");

    ШаблонРазбораКода = "([0-9]{1,4})_([0-9]{8})";
    РезультатПоискаЧастей = СтрНайтиПоРегулярномуВыражению(УстаревшийСоставнойКодБП77, ШаблонРазбораКода);
    Если РезультатПоискаЧастей.НачальнаяПозиция = 0 ИЛИ РезультатПоискаЧастей.ПолучитьГруппы().Количество() < 2 Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Совпадений не найдено
    КонецЕсли;

    МассивЧастейНомера = РезультатПоискаЧастей.ПолучитьГруппы();
    РезультатФункции.КонтрагентКод = МассивЧастейНомера[1].Значение;
    РезультатФункции.ОбъектАбонентаКод = МассивЧастейНомера[0].Значение;

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // ЛицевыеСчета

#КонецОбласти // ПрограммныйИнтерфейс
// ++ Гарант+ Килипенко 22.07.2024 [F00226285] заполнение назначения услуг ++
