// Гарант+ Килипенко 22.07.2024 [F00226285] заполнение назначения услуг ++
#Область ПрограммныйИнтерфейс

#Область Счетчики

// Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему ++
//
// Параметры:
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СозданныеЭлементы - Массив из СправочникСсылка.КВП_Счетчики
Функция СоздатьСчетчикиПоСреднемуМетодуРасчета(Знач ДатаАктуальности = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеЭлементы, ТекстСообщения", Истина, Новый Массив);

    ДанныеДляЗаполнения = ПолучитьДанныеДляСозданияСчетчиковПоСреднему(ДатаАктуальности);

    Если ДанныеДляЗаполнения.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ДанныеДляЗаполнения Цикл
            ПараметрыЗаполнения = Новый Структура("Услуга, Наименование, Комментарий, ИдентификаторЛС");
            ПараметрыЗаполнения.Услуга = СтрокаДанных.Услуга;
            ПараметрыЗаполнения.Наименование = Строка(СтрокаДанных.ЛицевойСчет);
            ПараметрыЗаполнения.ИдентификаторЛС = Строка(СтрокаДанных.ИдентификаторЛС);
            ПараметрыЗаполнения.Комментарий = СтрокаДанных.КонтрагентНаименование;

            СозданныйЭлементСсылка = СоздатьНовыйСчетчикПоСреднемуМетодуРасчета(ПараметрыЗаполнения);
            РезультатФункции.СозданныеЭлементы.Добавить(СозданныйЭлементСсылка);
        КонецЦикла;
        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании счетчиков.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеЭлементы.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему --

// Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему ++
//
Функция УдалитьВиртуальныеСчетчики() Экспорт
    СчетчикиДляУдаления = ПолучитьСозданныеВиртуальныеСчетчики();
    Для Каждого СчетчикСсылка Из СчетчикиДляУдаления Цикл
        СчетчикОбъект = СчетчикСсылка.ПолучитьОбъект();
        СчетчикОбъект.УстановитьПометкуУдаления(Истина);
    КонецЦикла;

    Возврат СчетчикиДляУдаления.Количество();
КонецФункции // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему --

// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
//  СчетчикКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx-xxx (КонтрагентКод{8}-ОбъектАбонентаКод{4}-СчетчикКод{3})
Функция СформироватьСоставнойКодСчетчикаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод, Знач СчетчикКод) Экспорт
    НаправлениеДополнения = "Слева";
    СимволДополнения = "0";

    Возврат СтрШаблон("%1-%2-%3",
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
            КонтрагентКод, ПолучитьДлинуКодаКонтрагентаБП77(), СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
            ОбъектАбонентаКод, ПолучитьДлинуКодаОбъектаАбонентаБП77(), СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
            СчетчикКод, ПолучитьДлинуКодаСчетчикаБП77(), СимволДополнения, НаправлениеДополнения));
КонецФункции

// Выполняет разбор составного кода счетчика (идентификатора БП77)
// Параметры:
//  Счетчик - СправочникСсылка.КВП_Счетчики, СправочникОбъект.КВП_Счетчики
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
Функция ПолучитьЧастиСоставногоКодаСчетчика(Знач Счетчик) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод, СчетчикКод", Истина, "", "", "");

    Если ТипЗнч(Счетчик) <> Тип("СправочникСсылка.КВП_Счетчики")
        И ТипЗнч(Счетчик) <> Тип("СправочникОбъект.КВП_Счетчики") Тогда
        Возврат РезультатФункции; // неверный тип счетчика
    КонецЕсли;

    ИдентификаторСчетчикаБП77 = Неопределено;

    Если ТипЗнч(Счетчик) = Тип("СправочникСсылка.КВП_Счетчики") Тогда
        Если Счетчик.Пустая() Тогда
            Возврат РезультатФункции; // нет данных идентификатора
        КонецЕсли;

        ИдентификаторСчетчикаБП77 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счетчик, "ГП_ИдентификаторБП77");
    Иначе
        ИдентификаторСчетчикаБП77 = Счетчик.ГП_ИдентификаторБП77;
    КонецЕсли;

    Если ТипЗнч(ИдентификаторСчетчикаБП77) <> Тип("Строка") ИЛИ ПустаяСтрока(ИдентификаторСчетчикаБП77) Тогда
        Возврат РезультатФункции; // нет данных идентификатора
    КонецЕсли;

    РезультатФункции = ПолучитьЧастиСоставногоКодаСчетчикаПоИдентификатору(ИдентификаторСчетчикаБП77);
    Возврат РезультатФункции;
КонецФункции

// Выполняет разбор составного кода счетчика (идентификатора БП77)
// Параметры:
//  ИдентификаторСчетчикаБП77 - Строка - Составной код счетчика
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
Функция ПолучитьЧастиСоставногоКодаСчетчикаПоИдентификатору(Знач ИдентификаторСчетчикаБП77) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод, СчетчикКод", Истина, "", "", "");

    ШаблонРазбораКода = ПолучитьШаблонПоискаЧастейИдентификатораСчетчика();
    РезультатПоискаЧастей = СтрНайтиПоРегулярномуВыражению(ИдентификаторСчетчикаБП77, ШаблонРазбораКода);
    Если РезультатПоискаЧастей.НачальнаяПозиция = 0
        ИЛИ РезультатПоискаЧастей.ПолучитьГруппы().Количество() < ПолучитьУровеньВложенностиКодаСчетчикаБП77() Тогда

        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Совпадений не найдено
    КонецЕсли;

    МассивЧастейНомера = РезультатПоискаЧастей.ПолучитьГруппы();
    РезультатФункции.КонтрагентКод = МассивЧастейНомера[0].Значение;
    РезультатФункции.ОбъектАбонентаКод = МассивЧастейНомера[1].Значение;
    РезультатФункции.СчетчикКод = МассивЧастейНомера[2].Значение;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КоличествоМесяцев - Число - Количество месяцев периодичности поверки
// Возвращаемое значение:
//  - ПеречислениеСсылка.УПЖКХ_МежпроверочныеИнтервалыСчетчиков, Неопределено
Функция ПолучитьМежпроверочныйИнтервалПериодичности(Знач КоличествоМесяцев) Экспорт
    КоличествоЛет = Цел(КоличествоМесяцев / 12);
    Если КоличествоЛет < 1 ИЛИ КоличествоЛет > 20 Тогда
        Возврат Неопределено;
    КонецЕсли;

    ЛетПрописью = ЧислоПрописью(КоличествоЛет, "Л = ru_RU; НП = Ложь; НД = Ложь", ", , , м, , , , , 0");
    Если КоличествоЛет = 1 Тогда
        ЛетПрописью = ЛетПрописью + "Год";
    ИначеЕсли КоличествоЛет <= 4 Тогда
        ЛетПрописью = ЛетПрописью + "Года";
    ИначеЕсли КоличествоЛет <= 20 Тогда
        ЛетПрописью = ЛетПрописью + "Лет";
    КонецЕсли;

    Возврат Перечисления.УПЖКХ_МежпроверочныеИнтервалыСчетчиков[ЛетПрописью];
КонецФункции

// Гарант+ Килипенко 10-09-2024 [hotfix] Установка разрядности счетчика по умолчанию ++
//
// Параметры:
//  МаксимальныйПоказатель - Строка
// Возвращаемое значение:
//  - Число
Функция ПолучитьРазрядностьСчетчикаПоМаксимальномуПоказателю(Знач МаксимальныйПоказатель) Экспорт
    МаксимальныйПоказатель = СокрЛП(МаксимальныйПоказатель);
    Если ПустаяСтрока(МаксимальныйПоказатель) ИЛИ МаксимальныйПоказатель = "0" Тогда
        Возврат ПолучитьРазрядностьСчетчикаПоУмолчанию();
    КонецЕсли;

    Возврат СтрДлина(МаксимальныйПоказатель);
КонецФункции // Гарант+ Килипенко 10-09-2024 [hotfix] Установка разрядности счетчика по умолчанию --

Функция ПолучитьКодыБП77ДляСпискаСчетчиков(Знач СписокСчетчиков) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Счетчики.Ссылка КАК Счетчик,
        |   Счетчики.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВЫРАЗИТЬ("""" КАК СТРОКА(8)) КАК КонтрагентКод,
        |   ВЫРАЗИТЬ("""" КАК СТРОКА(4)) КАК ОбъектАбонентаКод
        |ИЗ
        |   Справочник.КВП_Счетчики КАК Счетчики
        |ГДЕ
        |   Счетчики.Ссылка В (&СписокСчетчиков)";

    Запрос.УстановитьПараметр("СписокСчетчиков", СписокСчетчиков);

    РезультатЗапроса = Запрос.Выполнить();
    ДанныеСчетчиков = РезультатЗапроса.Выгрузить();

    Для Каждого СтрокаДанных Из ДанныеСчетчиков Цикл
        РезультатРасшифровки = ПолучитьЧастиСоставногоКодаСчетчикаПоИдентификатору(СтрокаДанных.ГП_ИдентификаторБП77);
        Если РезультатРасшифровки.Успех Тогда
            СтрокаДанных.КонтрагентКод = ГП_МиграцияОбщегоНазначения.ОчиститьВедущиеНули(РезультатРасшифровки.КонтрагентКод);
            СтрокаДанных.ОбъектАбонентаКод = ГП_МиграцияОбщегоНазначения.ОчиститьВедущиеНули(РезультатРасшифровки.ОбъектАбонентаКод);
        КонецЕсли;
    КонецЦикла;

    Возврат ДанныеСчетчиков;
КонецФункции

#КонецОбласти // Счетчики

#Область КонстантыСчетчиков

// Гарант+ Килипенко 10-09-2024 [hotfix] Установка разрядности счетчика по умолчанию ++
//
// Возвращаемое значение:
//  - Число
Функция ПолучитьРазрядностьСчетчикаПоУмолчанию() Экспорт
    Возврат 6;
КонецФункции // Гарант+ Килипенко 10-09-2024 [hotfix] Установка разрядности счетчика по умолчанию --

// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаКонтрагентаБП77() Экспорт
    Возврат 8;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаОбъектаАбонентаБП77() Экспорт
    Возврат 4;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаСчетчикаБП77() Экспорт
    Возврат 3;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьУровеньВложенностиКодаСчетчикаБП77() Экспорт
    Возврат 3;
КонецФункции

// Маска идентификатора счетчика БП77 для использования в функции подобно
// Возвращаемое значение:
//  - Строка
Функция ПолучитьМаскуСоставногоКодаСчетчикаДляПодобно() Экспорт
    Возврат "________-____-___";
КонецФункции

// Получает шаблон для проверки валидности идентификатора (составного кода) счетчика БП77
// Возвращаемое значение:
//  - Строка
Функция ПолучитьШаблонПроверкиСоставногоКодаСчетчика() Экспорт
    РезультатФункции = ПолучитьШаблонПоискаЧастейИдентификатораСчетчика();
    РезультатФункции = СтрЗаменитьПоРегулярномуВыражению(РезультатФункции, "[\)\(]", "");
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТолькоЗначащие - Булево - Если Истина, тогда ведущие нули будут игнорироваться
// Возвращаемое значение:
//  - Строка
Функция ПолучитьШаблонПоискаЧастейИдентификатораСчетчика(Знач ТолькоЗначащие = Ложь) Экспорт
    Если ТолькоЗначащие Тогда
        Возврат "0*([1-9][0-9]{0,7})-0*([1-9][0-9]{0,3})-0*([1-9][0-9]{0,2})";
    Иначе
        Возврат "([0-9]{8})-([0-9]{4})-([0-9]{3})";
    КонецЕсли;
КонецФункции

// Устарела. Не используется в текущей реализации
//
// Параметры:
//  КакСписокСРазделителем - Булево
// Возвращаемое значение:
//  - Массив из Строка, Строка
Функция ПолучитьКлючиДанныхСчетчикаБП77(Знач КакСписокСРазделителем = Ложь) Экспорт
    РезультатФункции = Новый Массив;
    РезультатФункции.Добавить("КонтрагентКод");
    РезультатФункции.Добавить("КонтрагентПолноеНаименование");
    РезультатФункции.Добавить("КонтрагентНаименование");
    РезультатФункции.Добавить("КонтрагентИНН");
    РезультатФункции.Добавить("ОбъектАбонентаНаименование");
    РезультатФункции.Добавить("ОбъектАбонентаКод");
    РезультатФункции.Добавить("ДоговорНаименование");
    РезультатФункции.Добавить("ДоговорКод");
    РезультатФункции.Добавить("СчетчикНаименование");
    РезультатФункции.Добавить("СчетчикКод");
    РезультатФункции.Добавить("ТипСчетчикаНаименование");
    РезультатФункции.Добавить("ТипСчетчикаКод");
    РезультатФункции.Добавить("ПериодичностьПоверки");
    РезультатФункции.Добавить("КоэффициентПересчета");
    РезультатФункции.Добавить("МаксимальныйПоказатель");
    РезультатФункции.Добавить("Комментарий");
    РезультатФункции.Добавить("ВидСчетчика");
    РезультатФункции.Добавить("МетодРасчетаХВ");
    РезультатФункции.Добавить("МетодРасчетаГВ");
    РезультатФункции.Добавить("МетодРасчетаКан");
    РезультатФункции.Добавить("ТолькоДляКанализации");
    РезультатФункции.Добавить("ДатаУстановки");
    РезультатФункции.Добавить("ДатаПоверки");
    РезультатФункции.Добавить("ДатаПоказаний");
    РезультатФункции.Добавить("ЗначенияПоказаний");

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие
Функция ПолучитьСоответствиеКодовУслугСчетчиковБП77() Экспорт
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить("ХолоднаяВода", "00-001");
    РезультатФункции.Вставить("Счетчик ХВ (Подогрев)", "00-002");
    РезультатФункции.Вставить("ПодогревХВ", "00-002");
    РезультатФункции.Вставить("ГорячаяВода", "00-003");
    РезультатФункции.Вставить("ГорячаяВодаВход", "00-003");
    РезультатФункции.Вставить("ГорячаяВодаВыход", "00-003");
    РезультатФункции.Вставить("Канализация", "00-004");
    // Холодное водоснабжение (для расчета ВО)
    //  Дополнение к ТЗ для ХВ с признаком ТолькоДляКанализации
    РезультатФункции.Вставить("ХолоднаяВодаВодоотвод", "00-005");
    РезультатФункции.Вставить("НегативноеВоздействие", "00-006");

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // КонстантыСчетчиков

#Область ЛицевыеСчета

// Устарела. !!! Требует внесение изменений в схему формирования
//
// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx (КонтрагентКод{8}-ОбъектАбонентаКод{4})
Функция СформироватьСоставнойКодЛицевогоСчетаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    НаправлениеДополнения = "Слева";
    СимволДополнения = "0";

    // !!!
    // !!! Нужно исправить схему на: ОбъектАбонентаКод - КонтрагентКод
    // !!!  предварительно проверив возможные коллизии
    Возврат СтрШаблон("%1-%2",
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КонтрагентКод, 8, СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОбъектАбонентаКод, 4, СимволДополнения, НаправлениеДополнения));
КонецФункции

// Устарела. В дальнейшем развитии функционала миграции использоваться не будет.
//  Код для сопоставления с БП77 будет формироваться в виде xxxxxxxx{8}-xxxx{4} КонтрагентКод-ОбъектАбонентаКод
//  и будет записан в реквизит лицевого счета `ГП_ИдентификаторБП77`
//
// Выполняет разбор составного кода идентификатора (созданного по данным кодов БП77) вида x_xxxxxxxx
//  Идентификатор формировался не ГП по данным: ОбъектАбонентаКод_КонтрагентКод
// Параметры:
//  УстаревшийСоставнойКодБП77 - Строка - Составной код лицевого счета вида x{1,4}_xxxxxxxx{8} ОбъектАбонентаКод_КонтрагентКод
// Возвращаемое значение:
//  - Структура
Функция ПолучитьЧастиИдентификатораКодаЛицевогоСчета(Знач УстаревшийСоставнойКодБП77) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод", Истина, "", "");

    ШаблонРазбораКода = "([0-9]{1,4})_([0-9]{8})";
    РезультатПоискаЧастей = СтрНайтиПоРегулярномуВыражению(УстаревшийСоставнойКодБП77, ШаблонРазбораКода);
    Если РезультатПоискаЧастей.НачальнаяПозиция = 0 ИЛИ РезультатПоискаЧастей.ПолучитьГруппы().Количество() < 2 Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Совпадений не найдено
    КонецЕсли;

    МассивЧастейНомера = РезультатПоискаЧастей.ПолучитьГруппы();
    РезультатФункции.КонтрагентКод = МассивЧастейНомера[1].Значение;
    РезультатФункции.ОбъектАбонентаКод = МассивЧастейНомера[0].Значение;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ЛицевыеСчета

// Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
//
// Получает таблицу счетчиков и лицевых счетов для заполнения документов Установка счетчиков
// Параметры:
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Счетчик - СправочникСсылка.КВП_Счетчики
//      * Услуга - СправочникСсылка.КВП_Услуги
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * ДатаПоверки - Дата
//      * ДатаБудущейПоверки - Дата
//      * ДатаУстановки - Дата
//      * Показание - Число
//      * ДатаПоказания - Дата
Функция ПолучитьДанныеДляУстановкиСчетчиков(Знач ДатаАктуальности = Неопределено) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_СчетчикиБП77.Счетчик КАК Счетчик,
        |	ГП_СчетчикиБП77.Счетчик.ВидУслуги КАК Услуга,
        |	ГП_СчетчикиБП77.СчетчикКод КАК СчетчикКод,
        |	ГП_СчетчикиБП77.КонтрагентКод КАК КонтрагентКод,
        |	ГП_СчетчикиБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_СчетчикиБП77.ДатаПоверки КАК ДатаПоверки,
        |	ГП_СчетчикиБП77.ДатаБудущейПоверки КАК ДатаБудущейПоверки,
        |	ГП_СчетчикиБП77.ДатаУстановки КАК ДатаУстановки
        |ПОМЕСТИТЬ ВТ_Счетчики
        |ИЗ
        |	РегистрСведений.ГП_СчетчикиБП77 КАК ГП_СчетчикиБП77
        |ГДЕ
        |	ГП_СчетчикиБП77.Счетчик <> &ПустаяСсылкаСчетчик
        |	// И ГП_СчетчикиБП77.Счетчик.Наименование <> """"
        |	И ГП_СчетчикиБП77.Счетчик.ГП_ИдентификаторБП77 ПОДОБНО &МаскаИдентификатораСчетчикаБП77
        |	И ГП_СчетчикиБП77.Счетчик.ПометкаУдаления = ЛОЖЬ
        |	// И ГП_СчетчикиБП77.ДатаУстановки <= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Счетчики лицевых счетов
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Счетчики.Счетчик КАК Счетчик,
        |	ВТ_Счетчики.Услуга КАК Услуга,
        |	ВТ_Счетчики.ДатаПоверки КАК ДатаПоверки,
        |	ВТ_Счетчики.ДатаБудущейПоверки КАК ДатаБудущейПоверки,
        |	ВТ_Счетчики.ДатаУстановки КАК ДатаУстановки,
        |	ГП_УслугиБП77.ЛицевойСчет КАК ЛицевойСчет,
        |	ГП_ПоказанияСчетчиковБП77СрезПоследних.Показание КАК Показание,
        |	ГП_ПоказанияСчетчиковБП77СрезПоследних.Период КАК ДатаПоказания
        |ИЗ
        |	ВТ_Счетчики КАК ВТ_Счетчики
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_УслугиБП77 КАК ГП_УслугиБП77
        |		ПО ВТ_Счетчики.КонтрагентКод = ГП_УслугиБП77.КонтрагентКод
        |			И ВТ_Счетчики.ОбъектАбонентаКод = ГП_УслугиБП77.ОбъектАбонентаКод
        |			И (ГП_УслугиБП77.ЛицевойСчет <> &ПустаяСсылкаЛС)
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ПоказанияСчетчиковБП77.СрезПоследних(&Период, ) КАК ГП_ПоказанияСчетчиковБП77СрезПоследних
        |		ПО ВТ_Счетчики.КонтрагентКод = ГП_ПоказанияСчетчиковБП77СрезПоследних.КонтрагентКод
        |			И ВТ_Счетчики.ОбъектАбонентаКод = ГП_ПоказанияСчетчиковБП77СрезПоследних.ОбъектАбонентаКод
        |			И ВТ_Счетчики.СчетчикКод = ГП_ПоказанияСчетчиковБП77СрезПоследних.СчетчикКод
        |
        |УПОРЯДОЧИТЬ ПО
        |	ГП_УслугиБП77.ЛицевойСчет,
        |	ВТ_Счетчики.ДатаУстановки,
        |	ВТ_Счетчики.ДатаПоверки
        |";

    Если ДатаАктуальности = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ГП_СчетчикиБП77.ДатаУстановки <= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Период", "");
    Иначе
        Запрос.УстановитьПараметр("Период", ДатаАктуальности);
    КонецЕсли;

    Запрос.УстановитьПараметр("ПустаяСсылкаЛС", Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяСсылкаСчетчик", Справочники.КВП_Счетчики.ПустаяСсылка());
    Запрос.УстановитьПараметр("МаскаИдентификатораСчетчикаБП77", ПолучитьМаскуСоставногоКодаСчетчикаДляПодобно());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --

// Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему ++
//
// Выполняет создание нового элемента счетчика и заполнение данных (счетчик с методом расчета: ПоСреднему)
//  созданный элемент записывается в ИБ
// Параметры:
//  ДанныеДляЗаполнения - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Услуга - СправочникСсылка.КВП_Услуги
//      * Комментарий - Строка
// Возвращаемое значение:
//  СправочникСсылка.КВП_Счетчики - Ссылка на созданный элемент
Функция СоздатьНовыйСчетчикПоСреднемуМетодуРасчета(Знач ДанныеДляЗаполнения) Экспорт
    СчетчикОбъект = Справочники.КВП_Счетчики.СоздатьЭлемент();
    СчетчикОбъект.Идентификатор = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторСчетчика( , СчетчикОбъект.Код, , Истина);
    СчетчикОбъект.Разрядность = 6; // По ТЗ
    СчетчикОбъект.Коэффициент = 1; // По ТЗ
    // Тарифность (по умолчанию 1-тарифный)
    СчетчикОбъект.Тарифность = ПолучитьТарифностьСчетчикаПоУмолчанию(); // По ТЗ
    СчетчикОбъект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета;

    СчетчикОбъект.Наименование = СтрШаблон("[[По среднему]] %1", ДанныеДляЗаполнения.Наименование);
    СчетчикОбъект.ГП_Комментарий = СтрШаблон("%1 (ид: (%2))",
            ДанныеДляЗаполнения.Комментарий, ДанныеДляЗаполнения.ИдентификаторЛС);
    СчетчикОбъект.ВидУслуги = ДанныеДляЗаполнения.Услуга;

    СчетчикОбъект.Записать();

    Возврат СчетчикОбъект.Ссылка;
КонецФункции // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему --

// Параметры:
//  ДанныеЗаполнения - Структура
//      * Наименование - Строка
//      * Услуга - СправочникСсылка.КВП_Услуги
//      * ИдентификаторЛС - Строка
//  ДопЧислоДляГенерацииИдентификаторов - Число, Неопределено
// Возвращаемое значение:
//  - СправочникСсылка.КВП_Счетчики
Функция СоздатьНовыйСчетчикПоСреднемуМетодуРасчетаОИ(
        Знач ДанныеЗаполнения, Знач ДопЧислоДляГенерацииИдентификаторов = Неопределено) Экспорт

    Возврат ГП_ПриборыУчета.СоздатьСчетчикОИ(ДанныеЗаполнения, ДопЧислоДляГенерацииИдентификаторов);
КонецФункции

// Параметры:
//  ДанныеЗаполнения - Структура
//      * Наименование - Строка
//      * Услуга - СправочникСсылка.КВП_Услуги
//      * ИдентификаторЛС - Строка
//  ДопЧислоДляГенерацииИдентификаторов - Число, Неопределено
// Возвращаемое значение:
//  - СправочникСсылка.КВП_Счетчики
Функция СоздатьНовыйСчетчикПоСреднемуМетодуРасчетаПотерь(
        Знач ДанныеЗаполнения, Знач ДопЧислоДляГенерацииИдентификаторов = Неопределено) Экспорт

    Возврат ГП_ПриборыУчета.СоздатьСчетчикВиртуальныйСчетчикПотерь(ДанныеЗаполнения, ДопЧислоДляГенерацииИдентификаторов);
КонецФункции

// Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему ++
//
Функция ПолучитьДанныеДляУстановкиСчетчиковПоСреднему(Знач ДатаАктуальности = Неопределено) Экспорт
    Возврат ПолучитьДанныеДляСозданияСчетчиковПоСреднему(ДатаАктуальности, Истина);
КонецФункции // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему --

// Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему ++
//
Функция ПолучитьДанныеДляСозданияСчетчиковПоСреднему(Знач ДатаАктуальности = Неопределено, Знач ДляУстановки = Ложь) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ГП_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_КонтрагентыБП77.Наименование КАК КонтрагентНаименование,
        |	ГП_ЗданияБП77.ОбъектАбонентаКод + ""_"" + ГП_ЗданияБП77.КонтрагентКод КАК ИдентификаторЛС,
        |	ГП_ЗданияБП77.ТолькоДляКанализации КАК ТолькоДляКанализации,
        |	ГП_ЗданияБП77.ПроцентХВ КАК ПроцентХВ,
        |	ГП_ЗданияБП77.ПроцентГВ КАК ПроцентГВ,
        |	ГП_ЗданияБП77.МетодРасчетаХВ КАК МетодРасчетаХВ,
        |	ГП_ЗданияБП77.МетодРасчетаГВ КАК МетодРасчетаГВ,
        |	ГП_ЗданияБП77.МетодРасчетаКан КАК МетодРасчетаКан,
        |	ГП_ЗданияБП77.НаПодогрев КАК НаПодогрев,
        |	ГП_ЗданияБП77.НеНачислять КАК НеНачислять
        |ПОМЕСТИТЬ ВТ_ЗданияБП77
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |		ПО (ГП_КонтрагентыБП77.Код = ГП_ЗданияБП77.КонтрагентКод)
        |ГДЕ
        |	ГП_ЗданияБП77.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ
        |	И ГП_ЗданияБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
        |	КВП_ЛицевыеСчета.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
        |	ВТ_ЗданияБП77.КонтрагентНаименование КАК КонтрагентНаименование,
        |	ВТ_ЗданияБП77.МетодРасчетаХВ КАК МетодРасчетаХВ,
        |	ВТ_ЗданияБП77.МетодРасчетаГВ КАК МетодРасчетаГВ,
        |	ВТ_ЗданияБП77.МетодРасчетаКан КАК МетодРасчетаКан
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаАктуальности) КАК КВП_ЛицевыеСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗданияБП77 КАК ВТ_ЗданияБП77
        |		ПО КВП_ЛицевыеСчета.ЛицевойСчет.Идентификатор = ВТ_ЗданияБП77.ИдентификаторЛС
        |ГДЕ
        |	КВП_ЛицевыеСчета.Действует = ИСТИНА
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.КонтрагентНаименование КАК КонтрагентНаименование,
        |	ВТ_ЛицевыеСчета.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчетаПоСреднемуХВС
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |ГДЕ
        |	ВТ_ЛицевыеСчета.МетодРасчетаХВ = ""По среднему""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.КонтрагентНаименование КАК КонтрагентНаименование,
        |	ВТ_ЛицевыеСчета.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчетаПоСреднемуГВС
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |ГДЕ
        |	ВТ_ЛицевыеСчета.МетодРасчетаГВ = ""По среднему""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.Период КАК Период,
        |	ВЫРАЗИТЬ(УПЖКХ_ИсторияСостоянийПриборовУчета.Объект КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет,
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.ПриборУчета КАК ПриборУчета,
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.ПриборУчета.ВидУслуги КАК Услуга,
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.Действует КАК Действует,
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.ДатаНачала КАК ДатаНачала,
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.ДатаПоверки КАК ДатаПоверки,
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.НомерПломбы КАК НомерПломбы,
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.ПричинаОтключения КАК ПричинаОтключения
        |ПОМЕСТИТЬ ВТ_СчетчикиЛС
        |ИЗ
        |	РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчета.СрезПоследних(&ДатаАктуальности) КАК УПЖКХ_ИсторияСостоянийПриборовУчета
        |ГДЕ
        |	УПЖКХ_ИсторияСостоянийПриборовУчета.Действует = ИСТИНА
        |	И УПЖКХ_ИсторияСостоянийПриборовУчета.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_ЛицевыеСчетаПоСреднемуХВС.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчетаПоСреднемуХВС.КонтрагентНаименование КАК КонтрагентНаименование,
        |	ВТ_ЛицевыеСчетаПоСреднемуХВС.ИдентификаторЛС КАК ИдентификаторЛС,
        |	&УслугаХВС КАК Услуга
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчетаПоСреднемуХВСБезСчетчика
        |ИЗ
        |	ВТ_ЛицевыеСчетаПоСреднемуХВС КАК ВТ_ЛицевыеСчетаПоСреднемуХВС
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетчикиЛС КАК ВТ_СчетчикиЛС
        |		ПО ВТ_ЛицевыеСчетаПоСреднемуХВС.ЛицевойСчет = ВТ_СчетчикиЛС.ЛицевойСчет
        |			И (ВТ_СчетчикиЛС.Услуга = &УслугаХВС)
        |ГДЕ
        |	ВТ_СчетчикиЛС.ПриборУчета ЕСТЬ NULL
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_ЛицевыеСчетаПоСреднемуГВС.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчетаПоСреднемуГВС.КонтрагентНаименование КАК КонтрагентНаименование,
        |	ВТ_ЛицевыеСчетаПоСреднемуГВС.ИдентификаторЛС КАК ИдентификаторЛС,
        |	&УслугаГВС КАК Услуга
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчетаПоСреднемуГВСБезСчетчика
        |ИЗ
        |	ВТ_ЛицевыеСчетаПоСреднемуГВС КАК ВТ_ЛицевыеСчетаПоСреднемуГВС
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетчикиЛС КАК ВТ_СчетчикиЛС
        |		ПО ВТ_ЛицевыеСчетаПоСреднемуГВС.ЛицевойСчет = ВТ_СчетчикиЛС.ЛицевойСчет
        |			И (ВТ_СчетчикиЛС.Услуга = &УслугаГВС)
        |ГДЕ
        |	ВТ_СчетчикиЛС.ПриборУчета ЕСТЬ NULL
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЛицевыеСчетаПоСреднемуХВСБезСчетчика.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчетаПоСреднемуХВСБезСчетчика.КонтрагентНаименование КАК КонтрагентНаименование,
        |	ВТ_ЛицевыеСчетаПоСреднемуХВСБезСчетчика.Услуга КАК Услуга,
        |	ВТ_ЛицевыеСчетаПоСреднемуХВСБезСчетчика.ИдентификаторЛС КАК ИдентификаторЛС
        |ПОМЕСТИТЬ ВТ_ВиртуальныеСчетчикиДляСоздания
        |ИЗ
        |	ВТ_ЛицевыеСчетаПоСреднемуХВСБезСчетчика КАК ВТ_ЛицевыеСчетаПоСреднемуХВСБезСчетчика
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	ВТ_ЛицевыеСчетаПоСреднемуГВСБезСчетчика.ЛицевойСчет,
        |	ВТ_ЛицевыеСчетаПоСреднемуГВСБезСчетчика.КонтрагентНаименование,
        |	ВТ_ЛицевыеСчетаПоСреднемуГВСБезСчетчика.Услуга,
        |	ВТ_ЛицевыеСчетаПоСреднемуГВСБезСчетчика.ИдентификаторЛС
        |ИЗ
        |	ВТ_ЛицевыеСчетаПоСреднемуГВСБезСчетчика КАК ВТ_ЛицевыеСчетаПоСреднемуГВСБезСчетчика
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_Счетчики.Ссылка КАК Счетчик,
        |	ВТ_ВиртуальныеСчетчикиДляСоздания.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_ВиртуальныеСчетчикиДляСоздания.КонтрагентНаименование КАК КонтрагентНаименование,
        |	ВТ_ВиртуальныеСчетчикиДляСоздания.Услуга КАК Услуга,
        |	ВТ_ВиртуальныеСчетчикиДляСоздания.ИдентификаторЛС КАК ИдентификаторЛС
        |ИЗ
        |	ВТ_ВиртуальныеСчетчикиДляСоздания КАК ВТ_ВиртуальныеСчетчикиДляСоздания
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Счетчики КАК КВП_Счетчики
        |		ПО (КВП_Счетчики.ВидУслуги = ВТ_ВиртуальныеСчетчикиДляСоздания.Услуга)
        |			И (КВП_Счетчики.ПометкаУдаления = ЛОЖЬ)
        |			И (КВП_Счетчики.ЭтоГруппа = ЛОЖЬ)
        |			И ((ВЫРАЗИТЬ(ВТ_ВиртуальныеСчетчикиДляСоздания.ЛицевойСчет.Наименование КАК СТРОКА(84))) = (ВЫРАЗИТЬ(СТРЗАМЕНИТЬ(КВП_Счетчики.Наименование, ""[[По среднему]] "", """") КАК СТРОКА(84))))
        |           И КВП_Счетчики.ГП_Комментарий ПОДОБНО ""%(ид: ("" + ВТ_ВиртуальныеСчетчикиДляСоздания.ИдентификаторЛС + ""))""
        |ГДЕ
        |	КВП_Счетчики.Ссылка ЕСТЬ NULL
        |
        |УПОРЯДОЧИТЬ ПО
        |   Услуга,
        |   ЛицевойСчет
        |";

    Если ДатаАктуальности = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", "");
    Иначе
        Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
    КонецЕсли;

    СтруктураУслугиХВС = ГП_МиграцияОбщегоНазначения.ПолучитьУслугуХолодноеВодоснабжение();
    Запрос.УстановитьПараметр("УслугаХВС", СтруктураУслугиХВС.Ссылка);

    СтруктураУслугиГВС = ГП_МиграцияОбщегоНазначения.ПолучитьУслугуГорячееВодоснабжение();
    Запрос.УстановитьПараметр("УслугаГВС", СтруктураУслугиГВС.Ссылка);

    Если ДляУстановки = Истина Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "КВП_Счетчики.Ссылка ЕСТЬ NULL", "НЕ КВП_Счетчики.Ссылка ЕСТЬ NULL");
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему --

// Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему ++
//
// Устарела. Только для разработки
//
Функция ПолучитьСозданныеВиртуальныеСчетчики() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КВП_Счетчики.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.КВП_Счетчики КАК КВП_Счетчики
        |ГДЕ
        |   КВП_Счетчики.ПометкаУдаления = ЛОЖЬ
        |   И КВП_Счетчики.ЭтоГруппа = ЛОЖЬ
        |   И КВП_Счетчики.Наименование ПОДОБНО ""__По среднему__ %""
        |";

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему --

// Возвращаемое значение:
//  - ПеречислениеСсылка.КВП_ТарифностьСчетчиков - По умолчанию Однотарифный (1-тарифный)
Функция ПолучитьТарифностьСчетчикаПоУмолчанию() Экспорт
    Возврат Перечисления.КВП_ТарифностьСчетчиков.Однотарифный;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 22.07.2024 [F00226285] заполнение назначения услуг --
