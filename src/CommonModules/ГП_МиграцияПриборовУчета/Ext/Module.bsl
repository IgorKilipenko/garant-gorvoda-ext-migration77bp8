// ++ Гарант+ Килипенко 22.07.2024 [F00226285] заполнение назначения услуг ++
#Область ПрограммныйИнтерфейс

#Область Счетчики
// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
//  СчетчикКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx-xxx (КонтрагентКод{8}-ОбъектАбонентаКод{4}-СчетчикКод{3})
Функция СформироватьСоставнойКодСчетчикаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод, Знач СчетчикКод) Экспорт
    НаправлениеДополнения = "Слева";
    СимволДополнения = "0";

    Возврат СтрШаблон("%1-%2-%3",
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
            КонтрагентКод, ПолучитьДлинуКодаКонтрагентаБП77(), СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
            ОбъектАбонентаКод, ПолучитьДлинуКодаОбъектаАбонентаБП77(), СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
            СчетчикКод, ПолучитьДлинуКодаСчетчикаБП77(), СимволДополнения, НаправлениеДополнения));
КонецФункции

// Выполняет разбор составного кода счетчика (идентификатора БП77)
// Параметры:
//  Счетчик - СправочникСсылка.КВП_Счетчики, СправочникОбъект.КВП_Счетчики
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
Функция ПолучитьЧастиСоставногоКодаСчетчика(Знач Счетчик) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод, СчетчикКод", Истина, "", "", "");

    Если ТипЗнч(Счетчик) <> Тип("СправочникСсылка.КВП_Счетчики")
        И ТипЗнч(Счетчик) <> Тип("СправочникОбъект.КВП_Счетчики") Тогда
        Возврат РезультатФункции; // неверный тип счетчика
    КонецЕсли;

    ИдентификаторСчетчикаБП77 = Неопределено;

    Если ТипЗнч(Счетчик) = Тип("СправочникСсылка.КВП_Счетчики") Тогда
        Если Счетчик.Пустая() Тогда
            Возврат РезультатФункции; // нет данных идентификатора
        КонецЕсли;

        ИдентификаторСчетчикаБП77 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счетчик, "ГП_ИдентификаторБП77");
    Иначе
        ИдентификаторСчетчикаБП77 = Счетчик.ГП_ИдентификаторБП77;
    КонецЕсли;

    Если ТипЗнч(ИдентификаторСчетчикаБП77) <> Тип("Строка") ИЛИ ПустаяСтрока(ИдентификаторСчетчикаБП77) Тогда
        Возврат РезультатФункции; // нет данных идентификатора
    КонецЕсли;

    РезультатФункции = ПолучитьЧастиСоставногоКодаСчетчикаПоИдентификатору(ИдентификаторСчетчикаБП77);
    Возврат РезультатФункции;
КонецФункции

// Выполняет разбор составного кода счетчика (идентификатора БП77)
// Параметры:
//  ИдентификаторСчетчикаБП77 - Строка - Составной код счетчика
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
Функция ПолучитьЧастиСоставногоКодаСчетчикаПоИдентификатору(Знач ИдентификаторСчетчикаБП77) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод, СчетчикКод", Истина, "", "", "");

    ШаблонРазбораКода = ПолучитьШаблонПоискаЧастейИдентификатораСчетчика();
    РезультатПоискаЧастей = СтрНайтиПоРегулярномуВыражению(ИдентификаторСчетчикаБП77, ШаблонРазбораКода);
    Если РезультатПоискаЧастей.НачальнаяПозиция = 0
        ИЛИ РезультатПоискаЧастей.ПолучитьГруппы().Количество() < ПолучитьУровеньВложенностиКодаСчетчикаБП77() Тогда

        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Совпадений не найдено
    КонецЕсли;

    МассивЧастейНомера = РезультатПоискаЧастей.ПолучитьГруппы();
    РезультатФункции.КонтрагентКод = МассивЧастейНомера[0].Значение;
    РезультатФункции.ОбъектАбонентаКод = МассивЧастейНомера[1].Значение;
    РезультатФункции.СчетчикКод = МассивЧастейНомера[2].Значение;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КоличествоМесяцев - Число - Количество месяцев периодичности поверки
// Возвращаемое значение:
//  - ПеречислениеСсылка.УПЖКХ_МежпроверочныеИнтервалыСчетчиков, Неопределено
Функция ПолучитьМежпроверочныйИнтервалПериодичности(Знач КоличествоМесяцев) Экспорт
    КоличествоЛет = Цел(КоличествоМесяцев / 12);
    Если КоличествоЛет < 1 ИЛИ КоличествоЛет > 20 Тогда
        Возврат Неопределено;
    КонецЕсли;

    ЛетПрописью = ЧислоПрописью(КоличествоЛет, "Л = ru_RU; НП = Ложь; НД = Ложь", ", , , м, , , , , 0");
    Если КоличествоЛет = 1 Тогда
        ЛетПрописью = ЛетПрописью + "Год";
    ИначеЕсли КоличествоЛет <= 4 Тогда
        ЛетПрописью = ЛетПрописью + "Года";
    ИначеЕсли КоличествоЛет <= 20 Тогда
        ЛетПрописью = ЛетПрописью + "Лет";
    КонецЕсли;

    Возврат Перечисления.УПЖКХ_МежпроверочныеИнтервалыСчетчиков[ЛетПрописью];
КонецФункции
#КонецОбласти // Счетчики

#Область КонстантыСчетчиков
// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаКонтрагентаБП77() Экспорт
    Возврат 8;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаОбъектаАбонентаБП77() Экспорт
    Возврат 4;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьДлинуКодаСчетчикаБП77() Экспорт
    Возврат 3;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьУровеньВложенностиКодаСчетчикаБП77() Экспорт
    Возврат 3;
КонецФункции

// Маска идентификатора счетчика БП77 для использования в функции подобно
// Возвращаемое значение:
//  - Строка
Функция ПолучитьМаскуСоставногоКодаСчетчикаДляПодобно() Экспорт
    Возврат "________-____-___";
КонецФункции

// Получает шаблон для проверки валидности идентификатора (составного кода) счетчика БП77
// Возвращаемое значение:
//  - Строка
Функция ПолучитьШаблонПроверкиСоставногоКодаСчетчика() Экспорт
    РезультатФункции = ПолучитьШаблонПоискаЧастейИдентификатораСчетчика();
    РезультатФункции = СтрЗаменитьПоРегулярномуВыражению(РезультатФункции, "[\)\(]", "");
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТолькоЗначащие - Булево - Если Истина, тогда ведущие нули будут игнорироваться
// Возвращаемое значение:
//  - Строка
Функция ПолучитьШаблонПоискаЧастейИдентификатораСчетчика(Знач ТолькоЗначащие = Ложь) Экспорт
    Если ТолькоЗначащие Тогда
        Возврат "0*([1-9][0-9]{0,7})-0*([1-9][0-9]{0,3})-0*([1-9][0-9]{0,2})";
    Иначе
        Возврат "([0-9]{8})-([0-9]{4})-([0-9]{3})";
    КонецЕсли;
КонецФункции

// Устарела. Не используется в текущей реализации
//
// Параметры:
//  КакСписокСРазделителем - Булево
// Возвращаемое значение:
//  - Массив из Строка, Строка
Функция ПолучитьКлючиДанныхСчетчикаБП77(Знач КакСписокСРазделителем = Ложь) Экспорт
    РезультатФункции = Новый Массив;
    РезультатФункции.Добавить("КонтрагентКод");
    РезультатФункции.Добавить("КонтрагентПолноеНаименование");
    РезультатФункции.Добавить("КонтрагентНаименование");
    РезультатФункции.Добавить("КонтрагентИНН");
    РезультатФункции.Добавить("ОбъектАбонентаНаименование");
    РезультатФункции.Добавить("ОбъектАбонентаКод");
    РезультатФункции.Добавить("ДоговорНаименование");
    РезультатФункции.Добавить("ДоговорКод");
    РезультатФункции.Добавить("СчетчикНаименование");
    РезультатФункции.Добавить("СчетчикКод");
    РезультатФункции.Добавить("ТипСчетчикаНаименование");
    РезультатФункции.Добавить("ТипСчетчикаКод");
    РезультатФункции.Добавить("ПериодичностьПоверки");
    РезультатФункции.Добавить("КоэффициентПересчета");
    РезультатФункции.Добавить("МаксимальныйПоказатель");
    РезультатФункции.Добавить("Комментарий");
    РезультатФункции.Добавить("ВидСчетчика");
    РезультатФункции.Добавить("МетодРасчетаХВ");
    РезультатФункции.Добавить("МетодРасчетаГВ");
    РезультатФункции.Добавить("МетодРасчетаКан");
    РезультатФункции.Добавить("ТолькоДляКанализации");
    РезультатФункции.Добавить("ДатаУстановки");
    РезультатФункции.Добавить("ДатаПоверки");
    РезультатФункции.Добавить("ДатаПоказаний");
    РезультатФункции.Добавить("ЗначенияПоказаний");

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие
Функция ПолучитьСоответствиеКодовУслугСчетчиковБП77() Экспорт
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить("ХолоднаяВода", "00-001");
    РезультатФункции.Вставить("Счетчик ХВ (Подогрев)", "00-002");
    РезультатФункции.Вставить("ГорячаяВода", "00-003");
    РезультатФункции.Вставить("ГорячаяВодаВход", "00-003");
    РезультатФункции.Вставить("ГорячаяВодаВыход", "00-003");
    РезультатФункции.Вставить("Канализация", "00-004");
    // Холодное водоснабжение (для расчета ВО)
    //  Дополнение к ТЗ для ХВ с признаком ТолькоДляКанализации
    РезультатФункции.Вставить("ХолоднаяВодаВодоотвод", "00-005");
    РезультатФункции.Вставить("НегативноеВоздействие", "00-006");

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // КонстантыСчетчиков

#Область ЛицевыеСчета
// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx (КонтрагентКод{8}-ОбъектАбонентаКод{4})
Функция СформироватьСоставнойКодЛицевогоСчетаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    НаправлениеДополнения = "Слева";
    СимволДополнения = "0";

    Возврат СтрШаблон("%1-%2",
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КонтрагентКод, 8, СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОбъектАбонентаКод, 4, СимволДополнения, НаправлениеДополнения));
КонецФункции

// Устарела. В дальнейшем развитии функционала миграции использоваться не будет.
//  Код для сопоставления с БП77 будет формироваться в виде xxxxxxxx{8}-xxxx{4} КонтрагентКод-ОбъектАбонентаКод
//  и будет записан в реквизит лицевого счета `ГП_ИдентификаторБП77`
//
// Выполняет разбор составного кода идентификатора (созданного по данным кодов БП77) вида x_xxxxxxxx
//  Идентификатор формировался не ГП по данным: ОбъектАбонентаКод_КонтрагентКод
// Параметры:
//  УстаревшийСоставнойКодБП77 - Строка - Составной код лицевого счета вида x{1,4}_xxxxxxxx{8} ОбъектАбонентаКод_КонтрагентКод
// Возвращаемое значение:
//  - Структура
Функция ПолучитьЧастиИдентификатораКодаЛицевогоСчета(Знач УстаревшийСоставнойКодБП77) Экспорт
    РезультатФункции = Новый Структура("Успех, КонтрагентКод, ОбъектАбонентаКод", Истина, "", "");

    ШаблонРазбораКода = "([0-9]{1,4})_([0-9]{8})";
    РезультатПоискаЧастей = СтрНайтиПоРегулярномуВыражению(УстаревшийСоставнойКодБП77, ШаблонРазбораКода);
    Если РезультатПоискаЧастей.НачальнаяПозиция = 0 ИЛИ РезультатПоискаЧастей.ПолучитьГруппы().Количество() < 2 Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Совпадений не найдено
    КонецЕсли;

    МассивЧастейНомера = РезультатПоискаЧастей.ПолучитьГруппы();
    РезультатФункции.КонтрагентКод = МассивЧастейНомера[1].Значение;
    РезультатФункции.ОбъектАбонентаКод = МассивЧастейНомера[0].Значение;

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // ЛицевыеСчета

#Область НазначениеУслуг
// Параметры:
//  ДатаАктуальности - Дата, Неопределено
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено
// Получает данные для заполнения документа Назначение услуги
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ХолоднаяВода - ТаблицаЗначений, Неопределено
//      * ГорячаяВода - ТаблицаЗначений, Неопределено
//      * Канализация - ТаблицаЗначений, Неопределено
//      * ХолоднаяВодаВодоотвод - ТаблицаЗначений, Неопределено
//      * НегативноеВоздействие - ТаблицаЗначений, Неопределено
Функция ПолучитьДанныеЗаполненияНазначенийУслугПоДаннымРегистраСчетчиковБП77(Знач ДатаАктуальности = Неопределено, ОрганизацияСсылка = Неопределено) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, ХолоднаяВода, ГорячаяВода, Канализация, ХолоднаяВодаВодоотвод, НегативноеВоздействие", Истина);

    Если ОрганизацияСсылка = Неопределено Тогда
        ОрганизацияСсылка = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    КонецЕсли;

    МВТ = Новый МенеджерВременныхТаблиц();

    // Формирование временных таблиц;
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    #Область ТекстЗапросаВТЗаполненияНазначенийУслуг
    Запрос.Текст =
        "////////////////////////////////////////////////////////////////////////////////
        |// Сбор данных объектов абонентов из регистра ГП_СчетчикиБП77
        |//
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ГП_СчетчикиБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_СчетчикиБП77.КонтрагентКод КАК КонтрагентКод,
        |	ГП_СчетчикиБП77.ТолькоДляКанализации КАК ТолькоДляКанализации,
        |	ГП_СчетчикиБП77.МетодРасчетаХВ КАК МетодРасчетаХВ,
        |	ГП_СчетчикиБП77.МетодРасчетаГВ КАК МетодРасчетаГВ,
        |	ГП_СчетчикиБП77.МетодРасчетаКан КАК МетодРасчетаКан
        |ПОМЕСТИТЬ ВТ_ОбъектыАбонентовПодготовка
        |ИЗ
        |	РегистрСведений.ГП_СчетчикиБП77 КАК ГП_СчетчикиБП77
        |ГДЕ
        |	(ГП_СчетчикиБП77.МетодРасчетаХВ <> ""Нет""
        |			ИЛИ ГП_СчетчикиБП77.МетодРасчетаГВ <> ""Нет""
        |			ИЛИ ГП_СчетчикиБП77.МетодРасчетаКан <> ""Нет"")
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Подготовка данных объектов абонентов
        |//
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ОбъектыАбонентовПодготовка.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ОбъектыАбонентовПодготовка.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ОбъектыАбонентовПодготовка.ОбъектАбонентаКод + ""_"" + ВТ_ОбъектыАбонентовПодготовка.КонтрагентКод КАК СинтИдентификатор,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовка.МетодРасчетаХВ <> ""Нет""
        |				И ВТ_ОбъектыАбонентовПодготовка.ТолькоДляКанализации = ЛОЖЬ
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоХолоднаяВода,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовка.МетодРасчетаХВ <> ""Нет""
        |				И ВТ_ОбъектыАбонентовПодготовка.ТолькоДляКанализации = ИСТИНА
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоЭтоХолоднаяВодаВодоотвод,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовка.МетодРасчетаГВ <> ""Нет""
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоГорячаяВода,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовка.МетодРасчетаКан <> ""Нет""
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоКанализация
        |ПОМЕСТИТЬ ВТ_ОбъектыАбонентов
        |ИЗ
        |	ВТ_ОбъектыАбонентовПодготовка КАК ВТ_ОбъектыАбонентовПодготовка
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Сбор данных лицевых счетов
        |//
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.ОтветственныйСобственникПредставление КАК ОтветственныйСобственникПредставление,
        |	КВП_ЛицевыеСчета.Наименование КАК Наименование,
        |	КВП_ЛицевыеСчета.Идентификатор КАК Идентификатор
        |ПОМЕСТИТЬ ВТ_КВП_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.Идентификатор ПОДОБНО ""%_%_%""
        |;";
    #КонецОбласти // ТекстЗапросаВТЗаполненияНазначенийУслуг
    Запрос.Выполнить();

    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    #Область ТекстЗапроса
    Запрос.Текст =
        "////////////////////////////////////////////////////////////////////////////////
        |// Результат [0] ХолоднаяВода
        |//
        |ВЫБРАТЬ
        |	ВТ_КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_ОбъектыАбонентов КАК ВТ_ОбъектыАбонентов
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КВП_ЛицевыеСчета КАК ВТ_КВП_ЛицевыеСчета
        |		ПО ВТ_ОбъектыАбонентов.СинтИдентификатор = ВТ_КВП_ЛицевыеСчета.Идентификатор
        |			И (ВТ_ОбъектыАбонентов.ЭтоХолоднаяВода = ИСТИНА)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [1] ГорячаяВода
        |//
        |ВЫБРАТЬ
        |	ВТ_КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_ОбъектыАбонентов КАК ВТ_ОбъектыАбонентов
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КВП_ЛицевыеСчета КАК ВТ_КВП_ЛицевыеСчета
        |		ПО ВТ_ОбъектыАбонентов.СинтИдентификатор = ВТ_КВП_ЛицевыеСчета.Идентификатор
        |			И (ВТ_ОбъектыАбонентов.ЭтоГорячаяВода = ИСТИНА)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [2] Канализация
        |//
        |ВЫБРАТЬ
        |	ВТ_КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_ОбъектыАбонентов КАК ВТ_ОбъектыАбонентов
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КВП_ЛицевыеСчета КАК ВТ_КВП_ЛицевыеСчета
        |		ПО ВТ_ОбъектыАбонентов.СинтИдентификатор = ВТ_КВП_ЛицевыеСчета.Идентификатор
        |			И (ВТ_ОбъектыАбонентов.ЭтоКанализация = ИСТИНА)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [3] ХолоднаяВодаВодоотвод
        |//
        |ВЫБРАТЬ
        |	ВТ_КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_ОбъектыАбонентов КАК ВТ_ОбъектыАбонентов
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КВП_ЛицевыеСчета КАК ВТ_КВП_ЛицевыеСчета
        |		ПО ВТ_ОбъектыАбонентов.СинтИдентификатор = ВТ_КВП_ЛицевыеСчета.Идентификатор
        |			И (ВТ_ОбъектыАбонентов.ЭтоЭтоХолоднаяВодаВодоотвод = ИСТИНА)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [4] НегативноеВоздействие
        |//
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
        |ИЗ
        |	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
        |			&ДатаАктуальности,
        |			ЛицевойСчет В
        |					(ВЫБРАТЬ
        |						ВТ_КВП_ЛицевыеСчета.Ссылка
        |					ИЗ
        |						ВТ_КВП_ЛицевыеСчета)
        |				И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
        |ГДЕ
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор.lc_ВидДоговора.Код = ""000000005"" // Требует рефакторинг (заменить параметром)
        |;";
    #КонецОбласти // ТекстЗапроса

    Если ДатаАктуальности = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", "");
    Иначе
        Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
    КонецЕсли;
    Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);

    ТаблицыПакета = Запрос.ВыполнитьПакет();
    РезультатФункции.ХолоднаяВода = ТаблицыПакета[0].Выгрузить();
    РезультатФункции.ГорячаяВода = ТаблицыПакета[1].Выгрузить();
    РезультатФункции.Канализация = ТаблицыПакета[2].Выгрузить();
    РезультатФункции.ХолоднаяВодаВодоотвод = ТаблицыПакета[3].Выгрузить();
    РезультатФункции.НегативноеВоздействие = ТаблицыПакета[4].Выгрузить();

    РезультатФункции.Успех = (РезультатФункции.ХолоднаяВода.Количество()
            + РезультатФункции.ГорячаяВода.Количество()
            + РезультатФункции.Канализация.Количество()
            + РезультатФункции.ХолоднаяВодаВодоотвод.Количество()
            + РезультатФункции.НегативноеВоздействие.Количество()) > 0;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ЛицевойСчетСсылка - СправочникСсылка.КВП_ЛицевыеСчета
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
//      * Контрагент - СправочникСсылка.Контрагенты
//  - Неопределено - Если данные не найдены
Функция ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
        Знач ЛицевойСчетСсылка, Знач ОрганизацияСсылка = Неопределено, Знач ДатаАктуальности = Неопределено) Экспорт
    Запрос = Новый Запрос();
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Дата КАК Дата,
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор КАК Договор,
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент КАК Контрагент
        |ИЗ
        |	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
        |
        |УПОРЯДОЧИТЬ ПО
        |   КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Дата УБЫВ
        |";

    Если ДатаАктуальности = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Дата", "");
    Иначе
        Запрос.УстановитьПараметр("Дата", ДатаАктуальности);
    КонецЕсли;
    Если ОрганизацияСсылка = Неопределено Тогда
        ОрганизацияСсылка = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    КонецЕсли;
    Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчетСсылка);
    Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);

    РезультатЗапроса = Запрос.Выполнить();
    Если РезультатЗапроса = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    РезультатФункции = Новый Структура("Договор, Контрагент", Выборка.Договор, Выборка.Контрагент);
    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // НазначениеУслуг

#КонецОбласти // ПрограммныйИнтерфейс
// ++ Гарант+ Килипенко 22.07.2024 [F00226285] заполнение назначения услуг ++
