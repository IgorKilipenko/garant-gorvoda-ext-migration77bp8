// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных зданий (из ИБ БП 7.7) из файла и записывает данные в регистр ГП_ЗданияБП77
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхЗданий - Число
//      * ТекстСообщения - Строка
//  - Неопределено
Функция ЗагрузитьДанныеЗданийВРегистр(ДвоичныеДанныеФайла, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхЗданий, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(ДвоичныеДанныеФайла, "Здание");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных зданий.";
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных зданий в регистр
    УслугиБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеЗданийВРегистр(УслугиБП77, Истина);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхЗданий = РезультатЗаписи.КоличествоЗаписанныхЗданий;

    Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Устанавливает связи Зданий (объектов абонентов) БП77 с объектами Зданий из ИБ
//  (записывает ссылку Здание поле регистра ГП_ЗданияБП77)
// Параметры:
//  РазрыватьСуществующиеСвязи - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеСвязи - Массив из СправочникСсылка.КВП_Здания
//      * ТекстСообщения - Строка
Функция УстановитьСоответствияЗданий(Знач РазрыватьСуществующиеСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеСвязи, ТекстСообщения", Истина, Новый Массив, "");

    ТаблицаСоответствияЗданий = ПолучитьЗданияОбъектовАбонентовДляСопоставления(Ложь);

    НачатьТранзакцию();
    Попытка
        Для Каждого ЗданиеБП77 Из ТаблицаСоответствияЗданий Цикл
            Если ЗданиеБП77.Здание = ЗданиеБП77.ЗданиеСопоставление Тогда
                Продолжить; // Связь Здания не изменилась (связь уже установлена)
            КонецЕсли;

            // Разрыв связи со зданием
            Если ЗначениеЗаполнено(ЗданиеБП77.ЗданиеСопоставление) = Ложь Тогда
                Если РазрыватьСуществующиеСвязи Тогда
                    ЗданиеБП77.Здание = Справочники.КВП_Здания.ПустаяСсылка();
                Иначе
                    Продолжить;
                КонецЕсли;
            КонецЕсли;

            // Отбор записей регистра по составному коду
            НаборЗаписейЗданий = СоздатьНаборЗаписейЗданийБП77(ЗданиеБП77);
            НаборЗаписейЗданий.Прочитать();

            // Проверка валидности набора записей (набор должен содержать не более одной записи)
            НоваяЗапись = Неопределено;
            Если НаборЗаписейЗданий.Количество() = 0 Тогда
                НоваяЗапись = НаборЗаписейЗданий.Добавить();
            ИначеЕсли НаборЗаписейЗданий.Количество() = 1 Тогда
                НоваяЗапись = НаборЗаписейЗданий[0];
            КонецЕсли;
            Если НоваяЗапись = Неопределено Тогда
                ВызватьИсключение("Ошибка создания связей для зданий. Неоднозначные параметры отбора составного кода здания.");
            КонецЕсли;

            // Запись связи со зданием
            НоваяЗапись.Здание = ЗданиеБП77.ЗданиеСопоставление;
            НаборЗаписейЗданий.Записать(Истина);
            РезультатФункции.ОбновленныеСвязи.Добавить(НоваяЗапись.Здание);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        ОбщаяЧастьСообщения = "Ошибка при записи соответствий зданий в регистр ""ГП_ЗданияБП77"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.ОбновленныеСвязи.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Создает новые объекты зданий и помещений по данным из БП77 (из регистра ГП_ЗданияБП77).
//  Создаются здания только для тех записей где нет связи со Зданием (не заполнено поле Здание).
//  Перед созданием выполняется процедура установки связей для записей регистра
// Параметры:
//  ПараметрыСоздания - Структура
//      * ОбновлятьСвязиПередСозданием - Булево - Если Истина, тогда перед началом транзакции создания будут обновлены связи зданий БП77
//          в регистре ГП_ЗданияБП77 (по умолчанию Истина).
//          !!! Внимание не рекомендуется устанавливать значение в Ложь, т.к. в текущей реализации при отборе записей для создания
//              документов используются установленные связи зданий в регистре ГП_ЗданияБП77. Если на момент создания зданий связи
//              будут неактуальны функция отработает некорректно.
//      * УстанавливатьСвязиПослеСоздания - Булево - Если Истина, для всех созданных зданий будет выполнена запись ссылки (связи) в
//          поле (измерение) Здание регистра ГП_ЗданияБП77 (по умолчанию Истина).
//      * СоздаватьПомещения - Булево - Если Истина, после создания зданий будут созданы соответствующие помещения (адреса) с
//          назначением родительского здания в качестве владельца помещения (по умолчанию Истина).
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеЗдания - Массив из СправочникСсылка.КВП_Здания
//      * СозданныеПомещения - Массив из СправочникСсылка.УПЖКХ_Помещения
//      * ТекстСообщения - Строка
Функция СоздатьЗданияПоДаннымЗаписейБП77(Знач ПараметрыСоздания = Неопределено) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, СозданныеЗдания, СозданныеПомещения, ТекстСообщения", Истина, Новый Массив, Новый Массив, "");

    // Установка параметров в значения по умолчанию
    Если ПараметрыСоздания = Неопределено Тогда
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("ОбновлятьСвязиПередСозданием", Истина);
        ПараметрыСоздания.Вставить("УстанавливатьСвязиПослеСоздания", Истина);
        ПараметрыСоздания.Вставить("СоздаватьПомещения", Истина);
    КонецЕсли;

    // Выполняем установку(обновление) связей зданий
    Если ПараметрыСоздания.ОбновлятьСвязиПередСозданием Тогда
        РезультатУстановкиСвязей = УстановитьСоответствияЗданий(Истина);
        Если РезультатУстановкиСвязей.Успех = Ложь Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = РезультатУстановкиСвязей.ТекстСообщения;

            Возврат РезультатФункции; // Ошибка при создании (обновлении связей)
        КонецЕсли;
    КонецЕсли;

    // Создание зданий
    ТаблицаЗданийБП77 = ПолучитьЗданияБП77ДляСозданияОбъектов();
    НачатьТранзакцию();
    Попытка
        Для Каждого ЗданиеБП77 Из ТаблицаЗданийБП77 Цикл
            Если ЗначениеЗаполнено(ЗданиеБП77.Здание) Тогда
                ВызватьИсключение("Таблица данных для создания зданий не должна иметь заполненных значений зданий.");
            КонецЕсли;

            // Создание здания
            НовыйЗданиеОбъект = СоздатьНовыйЭлементЗдания(Ложь);
            ЗаполнитьЗначенияПолейЗданияПоУмолчанию(НовыйЗданиеОбъект);
            НовыйЗданиеОбъект.Наименование = ЗданиеБП77.ОбъектАбонентаНаименование;
            НовыйЗданиеОбъект.ГП_ИдентификаторБП77 = СформироватьПростойСоставнойКодЗдания(
                    ЗданиеБП77.КонтрагентКод, ЗданиеБП77.ОбъектАбонентаКод);

            // Расшифровка адреса
            СтруктураАдреса = ГП_МиграцияОбщегоНазначения.ПолучитьАдресПоНаименованиюОбъектаАбонента(
                    ЗданиеБП77.ОбъектАбонентаНаименование);
            Если СтруктураАдреса.Успех Тогда
                НовыйЗданиеОбъект.НомерДома = СтруктураАдреса.Дом;
            КонецЕсли;

            НовыйЗданиеОбъект.Записать();
            ЗданиеБП77.Здание = НовыйЗданиеОбъект.Ссылка;
            РезультатФункции.СозданныеЗдания.Добавить(НовыйЗданиеОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании зданий.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеЗдания.Очистить();
        РезультатФункции.СозданныеПомещения.Очистить();

        Возврат РезультатФункции; // Ошибка при создании зданий
    КонецПопытки;

    Если ПараметрыСоздания.СоздаватьПомещения Тогда
        // Создание помещений
        РезультатСозданияПомещений = СоздатьПомещенияПоДаннымЗаписейБП77(ТаблицаЗданийБП77);

        // Удаление всех созданных зданий (откат транзакции)
        Если РезультатСозданияПомещений.Успех = Ложь Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = РезультатСозданияПомещений.ТекстСообщения;

            УдалитьСозданныеЗдания(РезультатФункции.СозданныеЗдания);

            РезультатФункции.СозданныеЗдания.Очистить();
            Возврат РезультатФункции; // Ошибка при создании зданий
        КонецЕсли;

        РезультатФункции.СозданныеПомещения = РезультатСозданияПомещений.СозданныеПомещения;
    КонецЕсли;

    Если ПараметрыСоздания.УстанавливатьСвязиПослеСоздания Тогда
        // Запись связей для созданных зданий в регистр
        РезультатЗаписейСвязей = ЗаписатьСозданныеЗданияКакСвязиВРегистр(ТаблицаЗданийБП77);

        // Удаление всех созданных зданий и помещений (откат транзакции)
        Если РезультатЗаписейСвязей.Успех = Ложь Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = РезультатЗаписейСвязей.ТекстСообщения;

            // Удаление созданных помещений
            Если ПараметрыСоздания.СоздаватьПомещения Тогда
                УдалитьСозданныеПомещения(РезультатФункции.СозданныеПомещения);
                РезультатФункции.СозданныеПомещения.Очистить();
            КонецЕсли;

            // Удаление созданных зданий
            УдалитьСозданныеЗдания(РезультатФункции.СозданныеЗдания);
            РезультатФункции.СозданныеЗдания.Очистить();
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Устарела. Используется только для разработки. Будет удалена
//
// Выполняет обновление созданных автоматически помещений по данным номеров договоров из регистра данных БП77
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеПомещения - Массив из СправочникСсылка.УПЖКХ_Помещения
//      * ТекстСообщения - Строка, Неопределено
Функция ОбновитьНаименованиеАвтоматическиСозданныхПомещений() Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеПомещения, ТекстСообщения", Истина, Новый Массив);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	УПЖКХ_Помещения.Ссылка КАК Ссылка,
        |	УПЖКХ_Помещения.Наименование КАК Наименование,
        |	УПЖКХ_Помещения.Владелец КАК Здание
        |ПОМЕСТИТЬ ВТ_Помещения
        |ИЗ
        |	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
        |ГДЕ
        |	УПЖКХ_Помещения.ГП_СозданАвтоматически = ИСТИНА
        |	И УПЖКХ_Помещения.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	РегистрСведенийЗданияБП77.ДоговорНаименование КАК ДоговорНаименование,
        |	ВТ_Помещения.Ссылка КАК Помещение,
        |	ВТ_Помещения.Наименование КАК Наименование,
        |	ВТ_Помещения.Здание КАК Здание
        |ИЗ
        |	ВТ_Помещения КАК ВТ_Помещения
        |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ЗданияБП77 КАК РегистрСведенийЗданияБП77
        |		ПО РегистрСведенийЗданияБП77.Здание = ВТ_Помещения.Здание
        |";

    РезультатЗапроса = Запрос.Выполнить();
    Если РезультатЗапроса.Пустой() Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Получение таблицы автоматически созданных помещений
    ТаблицаСозданныхЗданий = РезультатЗапроса.Выгрузить();

    // Обновление наименований помещений
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаПомещения Из ТаблицаСозданныхЗданий Цикл

            НовоеЗначениеНаименования = "";

            // Попытка сформировать наименование помещения по номеру договора
            СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(СтрокаПомещения.ДоговорНаименование);
            Если СтруктураНомера.Успех Тогда
                НовоеЗначениеНаименования = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
                        "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
            Иначе
                Продолжить; // Не перезаписываем наименования пустыми значениями
            КонецЕсли;

            Если СтрокаПомещения.Наименование <> НовоеЗначениеНаименования Тогда
                // Присвоение нового значения наименования
                ПомещениеОбъект = СтрокаПомещения.Помещение.ПолучитьОбъект();
                ПомещениеОбъект.Наименование = НовоеЗначениеНаименования;
                ПомещениеОбъект.Записать();
                РезультатФункции.ОбновленныеПомещения.Добавить(ПомещениеОбъект.Ссылка);
            КонецЕсли;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при обновлении значений помещений.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.ОбновленныеПомещения.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Гарант+ Килипенко 11.11.2024 [F00230766] Перенос признака ТолькоДляКанализации ++
#Область ДляЗапросов

// Параметры:
//  Параметры - Структура
//      * СписокПолей - СписокЗначений из Строка
//      * Отбор - Структура из КлючИЗначение
//          ** Ключ - Строка
//          ** Значение - Произвольный
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьВсеЗданияБП77(Знач Параметры = Неопределено) Экспорт
    Параметры = ?(Параметры = Неопределено, Новый Структура, Параметры);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	&СписокПолейЗданияБП77
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ЗданияБП77
        // ~~~ Нет необходимости выполнять проверку - при этом может привести к проблеме при первичной миграции если регистр не заполнен ~~~
        // |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК КонтрагентыБП77
        // |		ПО ЗданияБП77.КонтрагентКод = КонтрагентыБП77.Код
        |ГДЕ
        |   ИСТИНА
        |   И &ДополнительныеУсловия
        |";

    Если Параметры.Свойство("СписокПолей") = Ложь Тогда
        СписокПолейЗданияБП77 = Неопределено;
    Иначе
        СписокПолейЗданияБП77 = Параметры.СписокПолей;
    КонецЕсли;

    // Формирование колонок таблицы запроса
    СтрокаСпискаПолей = "";
    Если СписокПолейЗданияБП77 <> Неопределено И СписокПолейЗданияБП77.Количество() > 0 Тогда
        Для Каждого ИмяПоляЗдания Из СписокПолейЗданияБП77 Цикл
            Если ИмяПоляЗдания.Пометка = Истина Тогда
                Продолжить; // Исключаем помеченные значения
            КонецЕсли;

            СтрокаСпискаПолей = СтрШаблон(
                    "%1,
                    |ЗданияБП77.%2 КАК %2", СтрокаСпискаПолей, ИмяПоляЗдания.Значение);
        КонецЦикла;
        Если СтрДлина(СтрокаСпискаПолей) > 0 Тогда
            СтрокаСпискаПолей = Сред(СтрокаСпискаПолей, 2);
        КонецЕсли;
    Иначе
        СтрокаСпискаПолей = "*";
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокПолейЗданияБП77", СтрокаСпискаПолей);

    // Дополнительные условия
    ДополнительныеУсловия = "";
    Если Параметры.Свойство("Отбор") = Истина Тогда
        Для Каждого ЭлементКЗ Из Параметры.Отбор Цикл
            ЗначениеОтбора = ЭлементКЗ.Значение;
            Если ТипЗнч(ЗначениеОтбора) = Тип("Булево") Тогда
                ЗначениеОтбора = ?(ЗначениеОтбора = Истина, "ИСТИНА", "ЛОЖЬ");
            КонецЕсли;

            ДополнительныеУсловия = СтрШаблон(
                    "%1
                    |   И %2 = %3",
                    ДополнительныеУсловия,
                    ЭлементКЗ.Ключ,
                    ЗначениеОтбора);
        КонецЦикла;
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДополнительныеУсловия", ДополнительныеУсловия);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаЗданийБП77 = РезультатЗапроса.Выгрузить();

    // Предобработка данных
    Если Параметры.Свойство("ОчиститьКоды") = Истина И Параметры.ОчиститьКоды = Истина Тогда
        ТаблицаЗданийБП77.Колонки.Добавить("КонтрагентКодОчищенный", ОбщегоНазначения.ОписаниеТипаСтрока(8));
        ТаблицаЗданийБП77.Колонки.Добавить("ОбъектАбонентаКодОчищенный", ОбщегоНазначения.ОписаниеТипаСтрока(4));
        Для Каждого СтрокаДанных Из ТаблицаЗданийБП77 Цикл
            СтрокаДанных.КонтрагентКодОчищенный = ГП_МиграцияОбщегоНазначения.ОчиститьВедущиеНули(СтрокаДанных.КонтрагентКод);
            СтрокаДанных.ОбъектАбонентаКодОчищенный = ГП_МиграцияОбщегоНазначения.ОчиститьВедущиеНули(СтрокаДанных.ОбъектАбонентаКод);
        КонецЦикла;
    КонецЕсли;

    Возврат ТаблицаЗданийБП77;
КонецФункции

#КонецОбласти // ДляЗапросов
// Гарант+ Килипенко 11.11.2024 [F00230766] Перенос признака ТолькоДляКанализации --

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных зданий в регистр ГП_ЗданияП77 (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеЗданий - Массив из Структура
//  СохранятьСвязи - Булево - Если Истина, связи со зданиями будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхЗданий - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеЗданийВРегистр(Знач ИсходныеДанныеЗданий, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхЗданий, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеЗданий = Неопределено ИЛИ ИсходныеДанныеЗданий.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийЗдания = "ТолькоДляКанализации,ЭтоНегативноеВоздействиеЦСВ,НеНачислять,ПроцентОтХВ";
    КлючиЧиселЗдания = "ПроцентХВ,ПроцентГВ,КоличествоПроживающих,СрКоличествоХВ,СрКоличествоГВ";

    // Транзакция записи в регистр ГП_ЗданияБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого ЗданиеБП77 Из ИсходныеДанныеЗданий Цикл
            НаборЗаписейЗданий = СоздатьНаборЗаписейЗданийБП77(ЗданиеБП77);

            // Данные для сохранения связанного здания записи
            СвязанноеЗдание = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейЗданий.Прочитать();
                Если НаборЗаписейЗданий.Количество() > 0 Тогда
                    СвязанноеЗдание = НаборЗаписейЗданий[0].Здание;
                    СвязанноеЗдание = ?(ЗначениеЗаполнено(СвязанноеЗдание), СвязанноеЗдание, Неопределено);
                    НаборЗаписейЗданий.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейЗданий.Добавить();

            // Заполнение данных здания
            ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗданиеБП77, ,
                СтрШаблон("%1,%2", КлючиУсловийЗдания, КлючиЧиселЗдания));

            // Преобразование типов значений полей
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийЗдания, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(ЗданиеБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселЗдания, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗданиеБП77[Ключ]);
            КонецЦикла;

            // Сохранение связанного здания записи
            Если СвязанноеЗдание <> Неопределено Тогда
                НоваяЗапись.Здание = СвязанноеЗдание;
                РезультатФункции.КоличествоСохраненныхСвязей = РезультатФункции.КоличествоСохраненныхСвязей + 1;
            КонецЕсли;

            // Заполнение признака ЭтоПлатаЗаХолодноеВодоснабжениеОИ
            ЭтоПлатаЗаХолодноеВодоснабжениеОИ =
                ГП_МиграцияОбщегоНазначения.ЭтоНаименованиеУслугиХолодногоВодоснабженияОИ(ЗданиеБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЭтоПлатаЗаХолодноеВодоснабжениеОИ;

            // Заполнение признака ЭтоНегативноеВоздействиеЦСВ
            ЭтоНегативноеВоздействиеЦСВ =
                ГП_МиграцияОбщегоНазначения.ЭтоНаименованиеУслугиНегативногоВоздействия(ЗданиеБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоНегативноеВоздействиеЦСВ = ЭтоНегативноеВоздействиеЦСВ;

            // Заполнение признака ЭтоПотериВоды
            ЭтоПотериВоды =
                ГП_МиграцияОбщегоНазначения.ЭтоНаименованиеПотериВоды(ЗданиеБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоПотериВоды = ЭтоПотериВоды;

            // Заполнение поля ДоговорНомер
            СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(ЗданиеБП77.ДоговорНаименование);
            Если СтруктураНомера.Успех = Истина Тогда
                НоваяЗапись.ДоговорНомер = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
                        "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
            КонецЕсли;

            НаборЗаписейЗданий.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхЗданий = РезультатФункции.КоличествоЗаписанныхЗданий + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных зданий в регистр ""ГП_ЗданияБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхЗданий = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Получает таблицу соответствий (связей) зданий (объектов абонентов) из БП77 и Зданий из ИБ
// Параметры:
//  ДляВсехЗданий - Булево - Если Ложь, будут выбраны только здания без признаков: [ЭтоПлатаЗаХолодноеВодоснабжениеОИ,
//      ЭтоНегативноеВоздействиеЦСВ], иначе все здания из регистра. По умолчанию = Ложь
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * Здание - СправочникСсылка.УВП_Здания
//      * ЗданиеСопоставление - СправочникСсылка.УВП_Здания
//      * ЛицевойСчетСопоставление - СправочникСсылка.УВП_ЛицевыеСчета
Функция ПолучитьЗданияОбъектовАбонентовДляСопоставления(Знач ДляВсехЗданий = Ложь) Экспорт
    Запрос = Новый Запрос;
    #Область ТекстЗапросаСвязей
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ГП_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_ЗданияБП77.Здание КАК Здание,
        |	ГП_ЗданияБП77.ОбъектАбонентаКод + ""_"" + ГП_ЗданияБП77.КонтрагентКод КАК СоставнойИдентификатор
        |ПОМЕСТИТЬ ВТ_ЗданияБП77
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |%УсловиеОбораЗданий%
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ЗданияБП77.Здание КАК Здание,
        |	ВЫБОР
        |		КОГДА КВП_ЛицевыеСчета.Ссылка ЕСТЬ NULL
        |				ИЛИ КВП_ЛицевыеСчета.Ссылка = &ПустаяСсылкаЛС
        |			ТОГДА &ПустаяСсылкаЗдание
        |		ИНАЧЕ КВП_ЛицевыеСчета.Адрес.Владелец
        |	КОНЕЦ КАК ЗданиеСопоставление,
        |	ЕСТЬNULL(КВП_ЛицевыеСчета.Ссылка, &ПустаяСсылкаЛС) КАК ЛицевойСчетСопоставление,
        |	ВТ_ЗданияБП77.СоставнойИдентификатор КАК СоставнойИдентификатор
        |ПОМЕСТИТЬ ВТ_ВсеСвязиЛС
        |ИЗ
        |	ВТ_ЗданияБП77 КАК ВТ_ЗданияБП77
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |		ПО ВТ_ЗданияБП77.СоставнойИдентификатор = КВП_ЛицевыеСчета.Идентификатор
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ВсеСвязиЛС.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ВсеСвязиЛС.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ВсеСвязиЛС.Здание КАК Здание,
        |	ВТ_ВсеСвязиЛС.КонтрагентКод + ""_"" + ВТ_ВсеСвязиЛС.ОбъектАбонентаКод КАК СоставнойИдентификаторЗдания
        |ПОМЕСТИТЬ ВТ_ЗданияБезСвязейЛС
        |ИЗ
        |	ВТ_ВсеСвязиЛС КАК ВТ_ВсеСвязиЛС
        |ГДЕ
        |	ВТ_ВсеСвязиЛС.ЗданиеСопоставление = &ПустаяСсылкаЗдание
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЗданияБезСвязейЛС.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ЗданияБезСвязейЛС.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ЗданияБезСвязейЛС.Здание КАК Здание,
        |	&ПустаяСсылкаЛС КАК ЛицевойСчетСопоставление,
        |	ЕСТЬNULL(КВП_Здания.Ссылка, &ПустаяСсылкаЗдание) КАК ЗданиеСопоставление
        |ИЗ
        |	ВТ_ЗданияБезСвязейЛС КАК ВТ_ЗданияБезСвязейЛС
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
        |		ПО ВТ_ЗданияБезСвязейЛС.СоставнойИдентификаторЗдания = КВП_Здания.ГП_ИдентификаторБП77
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	ВТ_ВсеСвязиЛС.КонтрагентКод,
        |	ВТ_ВсеСвязиЛС.ОбъектАбонентаКод,
        |	ВТ_ВсеСвязиЛС.Здание,
        |	ВТ_ВсеСвязиЛС.ЛицевойСчетСопоставление,
        |	ВТ_ВсеСвязиЛС.ЗданиеСопоставление
        |ИЗ
        |	ВТ_ВсеСвязиЛС КАК ВТ_ВсеСвязиЛС
        |ГДЕ
        |	ВТ_ВсеСвязиЛС.ЛицевойСчетСопоставление <> &ПустаяСсылкаЛС
        |";
    #КонецОбласти // ТекстЗапросаСвязей

    УсловиеОбораЗданий = "";
    Если ДляВсехЗданий Тогда
        УсловиеОбораЗданий =
            "ГДЕ
            |   ГП_ЗданияБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЛОЖЬ
            |   И ГП_ЗданияБП77.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ
            |";
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОбораЗданий%", УсловиеОбораЗданий);

    Запрос.УстановитьПараметр("ПустаяСсылкаЛС", Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяСсылкаЗдание", Справочники.КВП_Здания.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ЗданиеБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_ЗданияБП77.НаборЗаписей
Функция СоздатьНаборЗаписейЗданийБП77(Знач ЗданиеБП77) Экспорт
    НаборЗаписей = РегистрыСведений.ГП_ЗданияБП77.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КонтрагентКод.Установить(ЗданиеБП77.КонтрагентКод);
    НаборЗаписей.Отбор.ОбъектАбонентаКод.Установить(ЗданиеБП77.ОбъектАбонентаКод);

    Возврат НаборЗаписей;
КонецФункции

// Формирует наименование помещения как номер договора
// Параметры:
//  НаименованиеДоговора - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * НаименованиеПомещения - Строка, Неопределено
Функция СформироватьНаименованиеПомещенияИзНаименованияДоговора(Знач НаименованиеДоговора) Экспорт
    РезультатФункции = Новый Структура("Успех, НаименованиеПомещения", Ложь);

    СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(НаименованиеДоговора);

    Если СтруктураНомера.Успех = Ложь Тогда
        Возврат РезультатФункции; // Номер не распознан
    КонецЕсли;

    РезультатФункции.Успех = Истина;
    РезультатФункции.НаименованиеПомещения = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
            "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
    Возврат РезультатФункции;
КонецФункции

// Получает все записи зданий БП77 для которых не созданы здания в ИБ (отбор выполняется по критерию отсутствия связи для Здания)
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - ОбъектАбонентаКод
//      * Здание - СправочникСсылка.КВП_Здания
//      * ОбъектАбонентаНаименование - Строка
//      * ДоговорНаименование - Строка
Функция ПолучитьЗданияБП77ДляСозданияОбъектов() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ГП_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |   ГП_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |   ГП_ЗданияБП77.Здание КАК Здание,
        |   ГП_ЗданияБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |   ГП_ЗданияБП77.ДоговорНаименование КАК ДоговорНаименование
        |ИЗ
        |   РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |ГДЕ
        |   ГП_ЗданияБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЛОЖЬ
        |   И ГП_ЗданияБП77.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ
        |   И ГП_ЗданияБП77.Здание = &ПустаяСсылкаЗдание
        |";

    Запрос.УстановитьПараметр("ПустаяСсылкаЗдание", Справочники.КВП_Здания.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Устарела. Не используется
//
// Параметры:
//  ТолькоСозданныеАвтоматически - Булево
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Ссылка - СправочникСсылка.КВП_Здания
//      * ГП_ИдентификаторБП77 - Строка
//      * ГП_СозданАвтоматически - Булево
//      * ПометкаУдаления - Булево
Функция ПолучитьСозданныеЗданияПоДаннымБП77(Знач ТолькоСозданныеАвтоматически = Истина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КВП_Здания.Ссылка КАК Ссылка,
        |   КВП_Здания.ГП_ИдентификаторБП77 КАК ИдентификаторБП77,
        |   КВП_Здания.ГП_СозданАвтоматически КАК СозданАвтоматически,
        |   КВП_Здания.ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.КВП_Здания КАК КВП_Здания
        |ГДЕ
        |   КВП_Здания.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |   И КВП_Здания.ГП_СозданАвтоматически = ИСТИНА
        |";

    Если ТолькоСозданныеАвтоматически = Ложь Тогда
        Запрос.Текст = СтрЗаменитьПоРегулярномуВыражению(Запрос.Текст, "И КВП_Здания.ГП_СозданАвтоматически = ИСТИНА\s*$", "");
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьПростойСоставнойКодЗдания(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", КонтрагентКод, ОбъектАбонентаКод);
КонецФункции

// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
//
// Получает таблицу зданий (созданных по данным БП77) без лицевых счетов
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Здание - СправочникСсылка.КВП_Здания
//      * Помещение - СправочникСсылка.УПЖКХ_Помещения
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * КонтрагентНаименование - Строка
Функция ПолучитьПеренесенныеЗданияБезЛицевыхСчетов() Экспорт
    // Формирование временных таблиц
    МВТ = Новый МенеджерВременныхТаблиц();
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;

    #Область ТекстЗапросаВТ
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_Здания.Ссылка КАК Ссылка,
        |	УПЖКХ_Помещения.Ссылка КАК Помещение,
        |	КВП_Здания.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ПеренесенныеЗдания
        |ИЗ
        |	Справочник.КВП_Здания КАК КВП_Здания
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
        |		ПО КВП_Здания.Ссылка = УПЖКХ_Помещения.Владелец
        |ГДЕ
        |	КВП_Здания.ГП_СозданАвтоматически = ИСТИНА
        |	И КВП_Здания.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Существующие лицевые счета в ИБ
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
        |ПОМЕСТИТЬ ВТ_СуществующиеЛС
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.Адрес <> &ПустаяСсылкаПомещение
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Здания без ЛС для соединения со контрагентами
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ПеренесенныеЗдания.Ссылка КАК Здание,
        |	ВТ_ПеренесенныеЗдания.Помещение КАК Помещение,
        |	ВТ_ПеренесенныеЗдания.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ЗданияБезЛС
        |ИЗ
        |	ВТ_ПеренесенныеЗдания КАК ВТ_ПеренесенныеЗдания
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуществующиеЛС КАК ВТ_СуществующиеЛС
        |		ПО ВТ_ПеренесенныеЗдания.Ссылка = ВТ_СуществующиеЛС.Здание
        |ГДЕ
        |	(ВТ_СуществующиеЛС.Ссылка ЕСТЬ NULL
        |			ИЛИ ВТ_СуществующиеЛС.Ссылка = &ПустаяСсылкаЛС)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Соединение зданий без ЛС с наименованием контрагентов из БП77
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЗданияБезЛС.Здание КАК Здание,
        |	ВТ_ЗданияБезЛС.Помещение КАК Помещение,
        |	ГП_КонтрагентыБП77.Код КАК КонтрагентКод,
        |	ГП_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_КонтрагентыБП77.Наименование КАК КонтрагентНаименование
        |ПОМЕСТИТЬ ВТ_Результат
        |ИЗ
        |	ВТ_ЗданияБезЛС КАК ВТ_ЗданияБезЛС
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |		ПО (ГП_ЗданияБП77.КонтрагентКод + ""_"" + ГП_ЗданияБП77.ОбъектАбонентаКод = ВТ_ЗданияБезЛС.ГП_ИдентификаторБП77)
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |		ПО (ГП_ЗданияБП77.КонтрагентКод = ГП_КонтрагентыБП77.Код)
        |;";
    #КонецОбласти // ТекстЗапросаВТ

    Запрос.УстановитьПараметр("ПустаяСсылкаПомещение", Справочники.УПЖКХ_Помещения.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяСсылкаЛС", Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
    Запрос.Выполнить();

    // Основной запрос данных
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;

    #Область ТекстЗапросаЗданийБезЛС
    Запрос.Текст =
        "////////////////////////////////////////////////////////////////////////////////
        |// Результат [0] Здания без лицевых счетов
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Результат.Здание КАК Здание,
        |	ВТ_Результат.Помещение КАК Помещение,
        |	ЕСТЬNULL(ВТ_Результат.КонтрагентКод, """") КАК КонтрагентКод,
        |	ЕСТЬNULL(ВТ_Результат.ОбъектАбонентаКод, """") КАК ОбъектАбонентаКод,
        |	ЕСТЬNULL(ВТ_Результат.КонтрагентНаименование, """") КАК КонтрагентНаименование
        |ИЗ
        |	ВТ_Результат КАК ВТ_Результат
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [1] Контроль (проверка отсутствия задвоений зданий)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Результат.Здание КАК Здание,
        |	КОЛИЧЕСТВО(ВТ_Результат.Здание) КАК Количество
        |ИЗ
        |	ВТ_Результат КАК ВТ_Результат
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_Результат.Здание
        |
        |ИМЕЮЩИЕ
        |	КОЛИЧЕСТВО(ВТ_Результат.Здание) > 1
        |;";
    #КонецОбласти // ТекстЗапросаЗданийБезЛС

    РезультатПакета = Запрос.ВыполнитьПакет();

    // Контроль результата запроса
    ТаблицаКонтроляРезультата = РезультатПакета[1].Выгрузить();
    Если ТаблицаКонтроляРезультата.Количество() > 0 Тогда // Наличие дублей
        ВызватьИсключение("Ошибка сбора данных зданий без лицевых счетов. Имеются дублирующиеся записи зданий.");
    КонецЕсли;

    РезультатФункции = РезультатПакета[0].Выгрузить();
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++

// Устарела. Не используется в текущей реализации. Будет удалена
//
// Гарант+ Килипенко 11.11.2024 [F00230766] Перенос признака ТолькоДляКанализации ++
//
// Возвращаемое значение:
//  - СписокЗначений
Функция Удалить_ПолучитьВсеПоляЗданийБП77() Экспорт
    РезультатФункции = Новый СписокЗначений;

    РезультатФункции.Добавить("КонтрагентКод");
    РезультатФункции.Добавить("ОбъектАбонентаКод");
    РезультатФункции.Добавить("Здание");
    РезультатФункции.Добавить("ОбъектАбонентаНаименование");
    РезультатФункции.Добавить("УлицаКод");
    РезультатФункции.Добавить("УлицаНаименование");
    РезультатФункции.Добавить("УлицаКодГорода");
    РезультатФункции.Добавить("Улица2");
    РезультатФункции.Добавить("Корпус");
    РезультатФункции.Добавить("Квартира");
    РезультатФункции.Добавить("КодМКД");
    РезультатФункции.Добавить("Реквизиты");
    РезультатФункции.Добавить("КоличествоПроживающих");
    РезультатФункции.Добавить("ТолькоДляКанализации");
    РезультатФункции.Добавить("ПроцентХВ");
    РезультатФункции.Добавить("ПроцентГВ");
    РезультатФункции.Добавить("КонтролерКод");
    РезультатФункции.Добавить("КонтролерНаименование");
    РезультатФункции.Добавить("РасчетчикКод");
    РезультатФункции.Добавить("РасчетчикНаименование");
    РезультатФункции.Добавить("ВидПотребителяКод");
    РезультатФункции.Добавить("ВидПотребителяНаименование");
    РезультатФункции.Добавить("ЭтоНегативноеВоздействиеЦСВ");
    РезультатФункции.Добавить("ЭтоПлатаЗаХолодноеВодоснабжениеОИ");
    РезультатФункции.Добавить("МетодРасчетаХВ");
    РезультатФункции.Добавить("МетодРасчетаГВ");
    РезультатФункции.Добавить("МетодРасчетаКан");
    РезультатФункции.Добавить("НаПодогрев");
    РезультатФункции.Добавить("НеНачислять");
    РезультатФункции.Добавить("СпособФинансированияКод");
    РезультатФункции.Добавить("ХарактеристикаОбъектаКод");
    РезультатФункции.Добавить("СрКоличествоХВ");
    РезультатФункции.Добавить("СрКоличествоГВ");
    РезультатФункции.Добавить("ПроцентОтХВ");
    РезультатФункции.Добавить("ЭтоПотериВоды");
    РезультатФункции.Добавить("ДоговорКод");
    РезультатФункции.Добавить("ДоговорНаименование");
    РезультатФункции.Добавить("ДоговорНомер");
    РезультатФункции.Добавить("ВидДоговораКод");
    РезультатФункции.Добавить("ВидДоговораНаименование");
    РезультатФункции.Добавить("ВодозаборКод");
    РезультатФункции.Добавить("ВодозаборНаименование");
    РезультатФункции.Добавить("СпособФинансированияНаименование");
    РезультатФункции.Добавить("ХарактеристикаОбъектаНаименование");

    Возврат РезультатФункции;
КонецФункции
// Гарант+ Килипенко 11.11.2024 [F00230766] Перенос признака ТолькоДляКанализации --

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныеПроцедурыИФункции

// Служебная функция. Помещает результат во временное хранилище или выполняет возврат результата
// Параметры:
//  Результат - Произвольный
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПоместитьВХранилищеИВернуть(Знач Результат, Знач АдресХранилища = Неопределено) Экспорт
    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(Результат, АдресХранилища);
КонецФункции

// Параметры:
//  ЗаполнитьЗначенияПоУмолчанию - Булево
// Возвращаемое значение:
//  - СправочникОбъект.КВП_Здания
Функция СоздатьНовыйЭлементЗдания(Знач ЗаполнитьЗначенияПоУмолчанию = Ложь)
    НовоеЗданиеОбъект = Справочники.КВП_Здания.СоздатьЭлемент();

    Если ЗаполнитьЗначенияПоУмолчанию = Истина Тогда
        ЗаполнитьЗначенияПолейЗданияПоУмолчанию(НовоеЗданиеОбъект);
    КонецЕсли;

    Возврат НовоеЗданиеОбъект;
КонецФункции

// Параметры:
//  ЗданиеОбъект - СправочникОбъект.КВП_Здания
Процедура ЗаполнитьЗначенияПолейЗданияПоУмолчанию(Знач ЗданиеОбъект)
    ЗданиеОбъект.ГП_СозданАвтоматически = Истина;
    ЗданиеОбъект.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Здание;
    ЗданиеОбъект.НомерДома = "1";
    ЗданиеОбъект.Многоквартирное = Истина;
    ЗданиеОбъект.Этажей = 1;

    //	Тип собственности здания определяется по виду собственности помещений данного здания:
    //  если в квартирах здания все квартиры муниципальные - дом муниципальный;
    //	если в квартирах здания все квартиры государственные - дом государственный;
    //	в противном случае дом общий.
    ЗданиеОбъект.Собственность = Перечисления.КВП_ТипыСобственностиЗданий.Частная; // Уточнить!
КонецПроцедуры

// Параметры:
//  ЗаполнитьЗначенияПоУмолчанию - Булево
// Возвращаемое значение:
//  - СправочникОбъект.УПЖКХ_Помещения
Функция СоздатьНовыйЭлементПомещение(Знач ЗаполнитьЗначенияПоУмолчанию = Истина)
    НовоеПомещениеОбъект = Справочники.УПЖКХ_Помещения.СоздатьЭлемент();

    Если ЗаполнитьЗначенияПоУмолчанию Тогда
        НовоеПомещениеОбъект.ГП_СозданАвтоматически = Истина;
        НовоеПомещениеОбъект.ВидПомещения = ПолучитьВидПомещенияПоУмолчанию();
    КонецЕсли;

    Возврат НовоеПомещениеОбъект;
КонецФункции

// Возвращаемое значение:
//  - Справочники.УПЖКХ_ВидыПомещений
Функция ПолучитьВидПомещенияПоУмолчанию()
    РезультатФункции = Справочники.УПЖКХ_ВидыПомещений.НайтиПоКоду("00-000001");
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТаблицаЗданийБП77 - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * Здание - СправочникСсылка.КВП_Здания
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеПомещения - Массив из СправочникСсылка.УПЖКХ_Помещения
//      * ТекстСообщения - Строка
Функция СоздатьПомещенияПоДаннымЗаписейБП77(Знач ТаблицаЗданийБП77)
    РезультатФункции = Новый Структура(
            "Успех, СозданныеПомещения, ТекстСообщения", Истина, Новый Массив, "");

    НачатьТранзакцию();
    Попытка
        Для Каждого ЗданиеБП77 Из ТаблицаЗданийБП77 Цикл
            Если ЗначениеЗаполнено(ЗданиеБП77.Здание) = Ложь Тогда
                ВызватьИсключение("Для создания помещений все здания должны быть записаны.");
            КонецЕсли;

            // Создание помещения
            НовыйПомещениеОбъект = СоздатьНовыйЭлементПомещение(Истина);
            НовыйПомещениеОбъект.Наименование = "";
            СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(ЗданиеБП77.ДоговорНаименование);
            Если СтруктураНомера.Успех Тогда
                НовыйПомещениеОбъект.Наименование = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
                        "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
            КонецЕсли;
            НовыйПомещениеОбъект.ГП_ИдентификаторБП77 = СформироватьПростойСоставнойКодЗдания(
                    ЗданиеБП77.КонтрагентКод, ЗданиеБП77.ОбъектАбонентаКод);
            НовыйПомещениеОбъект.Владелец = ЗданиеБП77.Здание;
            НовыйПомещениеОбъект.Записать();
            РезультатФункции.СозданныеПомещения.Добавить(НовыйПомещениеОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании помещений.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеПомещения.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТаблицаЗданийБП77 - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * Здание - СправочникСсылка.КВП_Здания
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка
Функция ЗаписатьСозданныеЗданияКакСвязиВРегистр(Знач ТаблицаЗданийБП77)
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);

    НачатьТранзакцию();
    Попытка
        Для Каждого ЗданиеБП77 Из ТаблицаЗданийБП77 Цикл
            НаборЗаписейЗданиеБП77 = СоздатьНаборЗаписейЗданийБП77(ЗданиеБП77);
            НаборЗаписейЗданиеБП77.Прочитать();
            Если НаборЗаписейЗданиеБП77.Количество() > 1 Тогда
                ВызватьИсключение("Запись в регистре ""Здания БП 7.7"" не уникальна.");
            КонецЕсли;
            НаборЗаписейЗданиеБП77[0].Здание = ЗданиеБП77.Здание;
            НаборЗаписейЗданиеБП77.Записать(Истина);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при записи связей созданных зданий в регистр.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СозданныеЗдания - Массив из СправочникСсылка.КВП_Здания
Процедура УдалитьСозданныеЗдания(Знач СозданныеЗдания)
    Для Каждого НовоеЗдание Из СозданныеЗдания Цикл
        Попытка
            НовоеЗданиеОбъект = НовоеЗдание.ПолучитьОбъект();
            НовоеЗданиеОбъект.Удалить();
        Исключение
        КонецПопытки;
    КонецЦикла;
КонецПроцедуры

// Параметры:
//  СозданныеПомещения - Массив из СправочникСсылка.УПЖКХ_Помещения
Процедура УдалитьСозданныеПомещения(Знач СозданныеПомещения)
    Для Каждого НовоеПомещение Из СозданныеПомещения Цикл
        Попытка
            НовоеПомещениеОбъект = НовоеПомещение.ПолучитьОбъект();
            НовоеПомещениеОбъект.Удалить();
        Исключение
        КонецПопытки;
    КонецЦикла;
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --
