// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных зданий (из ИБ БП 7.7) из файла и записывает данные в регистр ГП_ЗданияБП77
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхУслуг - Число
//      * ТекстСообщения - Строка
//  - Неопределено
Функция ЗагрузитьДанныеЗданийВРегистр(ДвоичныеДанныеФайла, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхУслуг, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияПриборовУчета.ПрочитатьДанныеИзФайлаXML(ДвоичныеДанныеФайла, "Здание");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных зданий.";
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных зданий в регистр
    УслугиБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеЗданийВРегистр(УслугиБП77, Истина);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхУслуг = РезультатЗаписи.КоличествоЗаписанныхУслуг;

    Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных зданий в регистр ГП_ЗданияП77 (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеЗданий - Массив из Структура
//  СохранятьСвязи - Булево - Если Истина, связи с лицевыми счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеЗданийВРегистр(Знач ИсходныеДанныеЗданий, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхЗданий, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеЗданий = Неопределено ИЛИ ИсходныеДанныеЗданий.Количество() = 0 Тогда
        Возврат РезультатФункции;   // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийСчетчика = "ТолькоДляКанализации,ЭтоНегативноеВоздействиеЦСВ";
    КлючиЧиселСчетчика = "ПроцентХВ,ПроцентГВ,КоличествоПроживающих";

    // Транзакция записи счетчиков в регистр ГП_СчетчикиБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого ЗданиеБП77 Из ИсходныеДанныеЗданий Цикл
            НаборЗаписейЗданий = СоздатьНаборЗаписейЗданийБП77(ЗданиеБП77);

            // Данные для сохранения связанного здания записи
            СвязанноеЗдание = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейЗданий.Прочитать();
                Если НаборЗаписейЗданий.Количество() > 0 Тогда
                    СвязанноеЗдание = НаборЗаписейЗданий[0].Здание;
                    СвязанноеЗдание = ?(ЗначениеЗаполнено(СвязанноеЗдание), СвязанноеЗдание, Неопределено);
                    НаборЗаписейЗданий.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейЗданий.Добавить();

            // Заполнение данных здания
            ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗданиеБП77, ,
                СтрШаблон("%1,%2", КлючиУсловийСчетчика, КлючиЧиселСчетчика));

            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(ЗданиеБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗданиеБП77[Ключ]);
            КонецЦикла;

            // Сохранение связанного здания записи
            Если СвязанноеЗдание <> Неопределено Тогда
                НоваяЗапись.Здание = СвязанноеЗдание;
                РезультатФункции.КоличествоСохраненныхСвязей = РезультатФункции.КоличествоСохраненныхСвязей + 1;
            КонецЕсли;

            // Заполнение признака ЭтоПлатаЗаХолодноеВодоснабжениеОИ
            ЭтоПлатаЗаХолодноеВодоснабжениеОИ =
                ГП_МиграцияПриборовУчета.ЭтоНаименованиеУслугиХолодногоВодоснабженияОИ(ЗданиеБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЭтоПлатаЗаХолодноеВодоснабжениеОИ;

            // Заполнение признака ЭтоНегативноеВоздействиеЦСВ
            ЭтоНегативноеВоздействиеЦСВ =
                ГП_МиграцияПриборовУчета.ЭтоНаименованиеУслугиНегативногоВоздействия(ЗданиеБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоНегативноеВоздействиеЦСВ = ЭтоНегативноеВоздействиеЦСВ;

            НаборЗаписейЗданий.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхЗданий = РезультатФункции.КоличествоЗаписанныхЗданий + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных зданий в регистр ""ГП_ЗданияБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхЗданий = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ЗданиеБП77 - Структура
//      * КонтрагентКод - Строка
//      * ЗданиеКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_СчетчикиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейЗданийБП77(Знач ЗданиеБП77) Экспорт
    НаборЗаписейУслуг = РегистрыСведений.ГП_ЗданияБП77.СоздатьНаборЗаписей();
    НаборЗаписейУслуг.Отбор.КонтрагентКод.Установить(ЗданиеБП77.КонтрагентКод);
    НаборЗаписейУслуг.Отбор.ОбъектАбонентаКод.Установить(ЗданиеБП77.ОбъектАбонентаНаименование);

    Возврат НаборЗаписейУслуг;
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныеПроцедурыИФункции

// Служебная функция. Помещает результат во временное хранилище или выполняет возврат результата
// Параметры:
//  Результат - Произвольный
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПоместитьВХранилищеИВернуть(Знач Результат, Знач АдресХранилища = Неопределено) Экспорт
    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(Результат, АдресХранилища);
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --
