// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных зданий (из ИБ БП 7.7) из файла и записывает данные в регистр ГП_ЗданияБП77
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхЗданий - Число
//      * ТекстСообщения - Строка
//  - Неопределено
Функция ЗагрузитьДанныеЗданийВРегистр(ДвоичныеДанныеФайла, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхЗданий, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияПриборовУчета.ПрочитатьДанныеИзФайлаXML(ДвоичныеДанныеФайла, "Здание");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных зданий.";
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных зданий в регистр
    УслугиБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеЗданийВРегистр(УслугиБП77, Истина);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхЗданий = РезультатЗаписи.КоличествоЗаписанныхЗданий;

    Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Устанавливает связи Зданий (объектов абонентов) БП77 с объектами Зданий из ИБ
//  (записывает ссылку Здание поле регистра ГП_ЗданияБП77)
// Параметры:
//  РазрыватьСуществующиеСвязи - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеСвязи - Массив из СправочникСсылка.КВП_Здания
//      * ТекстСообщения - Строка
Функция УстановитьСоответствияЗданий(Знач РазрыватьСуществующиеСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеСвязи, ТекстСообщения", Истина, Новый Массив, "");

    ТаблицаСоответствияЗданий = ПолучитьЗданияОбъектовАбонентовДляСопоставления(Ложь);

    НачатьТранзакцию();
    Попытка
        Для Каждого ЗданиеБП77 Из ТаблицаСоответствияЗданий Цикл
            Если ЗданиеБП77.Здание = ЗданиеБП77.ЗданиеСопоставление Тогда
                Продолжить; // Связь Здания не изменилась (связь уже установлена)
            КонецЕсли;

            // Разрыв связи с лицевым счетом
            Если ЗначениеЗаполнено(ЗданиеБП77.ЗданиеСопоставление) = Ложь Тогда
                Если РазрыватьСуществующиеСвязи Тогда
                    ЗданиеБП77.Здание = Справочники.КВП_Здания.ПустаяСсылка();
                Иначе
                    Продолжить;
                КонецЕсли;
            КонецЕсли;

            // Отбор записей регистра по составному коду
            НаборЗаписейУслуг = СоздатьНаборЗаписейЗданийБП77(ЗданиеБП77);
            НаборЗаписейУслуг.Прочитать();

            // Проверка валидности набора записей (набор должен содержать не более одной записи)
            НоваяЗапись = Неопределено;
            Если НаборЗаписейУслуг.Количество() = 0 Тогда
                НоваяЗапись = НаборЗаписейУслуг.Добавить();
            ИначеЕсли НаборЗаписейУслуг.Количество() = 1 Тогда
                НоваяЗапись = НаборЗаписейУслуг[0];
            КонецЕсли;
            Если НоваяЗапись = Неопределено Тогда
                ВызватьИсключение("Ошибка создания связей для зданий. Неоднозначные параметры отбора составного кода услуги.");
            КонецЕсли;

            // Запись связи с лицевым счетом
            НоваяЗапись.Здание = ЗданиеБП77.ЗданиеСопоставление;
            НаборЗаписейУслуг.Записать(Истина);
            РезультатФункции.ОбновленныеСвязи.Добавить(НоваяЗапись.Здание);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        ОбщаяЧастьСообщения = "Ошибка при записи соответствий зданий в регистр ""ГП_ЗданияБП77"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.ОбновленныеСвязи.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных зданий в регистр ГП_ЗданияП77 (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеЗданий - Массив из Структура
//  СохранятьСвязи - Булево - Если Истина, связи с лицевыми счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеЗданийВРегистр(Знач ИсходныеДанныеЗданий, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхЗданий, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеЗданий = Неопределено ИЛИ ИсходныеДанныеЗданий.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийСчетчика = "ТолькоДляКанализации,ЭтоНегативноеВоздействиеЦСВ,НеНачислять";
    КлючиЧиселСчетчика = "ПроцентХВ,ПроцентГВ,КоличествоПроживающих";

    // Транзакция записи счетчиков в регистр ГП_СчетчикиБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого ЗданиеБП77 Из ИсходныеДанныеЗданий Цикл
            НаборЗаписейЗданий = СоздатьНаборЗаписейЗданийБП77(ЗданиеБП77);

            // Данные для сохранения связанного здания записи
            СвязанноеЗдание = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейЗданий.Прочитать();
                Если НаборЗаписейЗданий.Количество() > 0 Тогда
                    СвязанноеЗдание = НаборЗаписейЗданий[0].Здание;
                    СвязанноеЗдание = ?(ЗначениеЗаполнено(СвязанноеЗдание), СвязанноеЗдание, Неопределено);
                    НаборЗаписейЗданий.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейЗданий.Добавить();

            // Заполнение данных здания
            ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗданиеБП77, ,
                СтрШаблон("%1,%2", КлючиУсловийСчетчика, КлючиЧиселСчетчика));

            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(ЗданиеБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗданиеБП77[Ключ]);
            КонецЦикла;

            // Сохранение связанного здания записи
            Если СвязанноеЗдание <> Неопределено Тогда
                НоваяЗапись.Здание = СвязанноеЗдание;
                РезультатФункции.КоличествоСохраненныхСвязей = РезультатФункции.КоличествоСохраненныхСвязей + 1;
            КонецЕсли;

            // Заполнение признака ЭтоПлатаЗаХолодноеВодоснабжениеОИ
            ЭтоПлатаЗаХолодноеВодоснабжениеОИ =
                ГП_МиграцияОбщегоНазначения.ЭтоНаименованиеУслугиХолодногоВодоснабженияОИ(ЗданиеБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЭтоПлатаЗаХолодноеВодоснабжениеОИ;

            // Заполнение признака ЭтоНегативноеВоздействиеЦСВ
            ЭтоНегативноеВоздействиеЦСВ =
                ГП_МиграцияОбщегоНазначения.ЭтоНаименованиеУслугиНегативногоВоздействия(ЗданиеБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоНегативноеВоздействиеЦСВ = ЭтоНегативноеВоздействиеЦСВ;

            // Заполнение поля ДоговорНомер
            СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(ЗданиеБП77.ДоговорНаименование);
            Если СтруктураНомера.Успех = Истина Тогда
                НоваяЗапись.ДоговорНомер = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
                        "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
            КонецЕсли;

            НаборЗаписейЗданий.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхЗданий = РезультатФункции.КоличествоЗаписанныхЗданий + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных зданий в регистр ""ГП_ЗданияБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхЗданий = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Получает таблицу соответствий (связей) зданий (объектов абонентов) из БП77 и Зданий из ИБ
// Параметры:
//  ДляВсехЗданий - Булево - Если Ложь, будут выбраны только здания без признаков: [ЭтоПлатаЗаХолодноеВодоснабжениеОИ,
//      ЭтоНегативноеВоздействиеЦСВ], иначе все здания из регистра. По умолчанию = Ложь
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * Здание - СправочникСсылка.УВП_Здания
//      * ЗданиеСопоставление - СправочникСсылка.УВП_Здания
//      * ЛицевойСчетСопоставление - СправочникСсылка.УВП_ЛицевыеСчета
Функция ПолучитьЗданияОбъектовАбонентовДляСопоставления(Знач ДляВсехЗданий = Ложь) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ГП_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_ЗданияБП77.Здание КАК Здание,
        |	ГП_ЗданияБП77.ОбъектАбонентаКод + ""_"" + ГП_ЗданияБП77.КонтрагентКод КАК СоставнойИдентификатор
        |ПОМЕСТИТЬ ВТ_ЗданияБП77
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |%УсловиеОбораЗданий%
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ЗданияБП77.Здание КАК Здание,
        |   ВЫБОР
        |       КОГДА (КВП_ЛицевыеСчета.Ссылка ЕСТЬ NULL) ИЛИ (КВП_ЛицевыеСчета.Ссылка = &ПустаяСсылкаЛС)
        |           ТОГДА &ПустаяСсылкаЗдание
        |       ИНАЧЕ
        |           КВП_ЛицевыеСчета.Адрес.Владелец
        |   КОНЕЦ КАК ЗданиеСопоставление,
        |	ЕСТЬNULL(КВП_ЛицевыеСчета.Ссылка, &ПустаяСсылкаЛС) КАК ЛицевойСчетСопоставление
        |ИЗ
        |	ВТ_ЗданияБП77 КАК ВТ_ЗданияБП77
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |		ПО ВТ_ЗданияБП77.СоставнойИдентификатор = КВП_ЛицевыеСчета.Идентификатор
        |";

    УсловиеОбораЗданий = "";
    Если ДляВсехЗданий Тогда
        УсловиеОбораЗданий =
            "ГДЕ
            |   ГП_ЗданияБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЛОЖЬ
            |   И ГП_ЗданияБП77.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ
            |";
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОбораЗданий%", УсловиеОбораЗданий);

    Запрос.УстановитьПараметр("ПустаяСсылкаЛС", Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяСсылкаЗдание", Справочники.КВП_Здания.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ЗданиеБП77 - Структура
//      * КонтрагентКод - Строка
//      * ЗданиеКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_ЗданияБП77.НаборЗаписей
Функция СоздатьНаборЗаписейЗданийБП77(Знач ЗданиеБП77) Экспорт
    НаборЗаписейУслуг = РегистрыСведений.ГП_ЗданияБП77.СоздатьНаборЗаписей();
    НаборЗаписейУслуг.Отбор.КонтрагентКод.Установить(ЗданиеБП77.КонтрагентКод);
    НаборЗаписейУслуг.Отбор.ОбъектАбонентаКод.Установить(ЗданиеБП77.ОбъектАбонентаКод);

    Возврат НаборЗаписейУслуг;
КонецФункции

// Формирует наименование помещения как номер договора
// Параметры:
//  НаименованиеДоговора - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * НаименованиеПомещения - Строка, Неопределено
Функция СформироватьНаименованиеПомещенияИзНаименованияДоговора(Знач НаименованиеДоговора) Экспорт
    РезультатФункции = Новый Структура("Успех, НаименованиеПомещения", Ложь);

    СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(НаименованиеДоговора);

    Если СтруктураНомера.Успех = Ложь Тогда
        Возврат РезультатФункции; // Номер не распознан
    КонецЕсли;

    РезультатФункции.Успех = Истина;
    РезультатФункции.НаименованиеПомещения = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
            "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныеПроцедурыИФункции

// Служебная функция. Помещает результат во временное хранилище или выполняет возврат результата
// Параметры:
//  Результат - Произвольный
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПоместитьВХранилищеИВернуть(Знач Результат, Знач АдресХранилища = Неопределено) Экспорт
    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(Результат, АдресХранилища);
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --
