#Область ПрограммныйИнтерфейс

// Выполняет чтение данных взаиморасчетов (из БП 7.7) из файла и записывает
//  данные в регистр `ГП_ВзаиморасчетыБП77`
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанных - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено
Функция ЗагрузитьДанныеВзаиморасчетовПоАбонентамВРегистр(ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанных, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(
            ПараметрыЗагрузки.ДвоичныеДанныеФайла, "ВзаиморасчетПоАбоненту");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных.";
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных в регистр
    ДанныеВзаиморасчетовАбонентовБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеВзаиморасчетовАбонентовВРегистр(ДанныеВзаиморасчетовАбонентовБП77);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.ТекстСообщения;
    РезультатФункции.КоличествоЗаписанных = РезультатЗаписи.КоличествоЗаписанных;

    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Параметры:
//  Отбор - Структура
//      * КонтрагентКод - Строка
//      * ДоговорКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_ВзаиморасчетыБП77.НаборЗаписей
Функция СоздатьНаборЗаписейВзаиморасчетовАбонентовБП77(Знач Отбор) Экспорт
    НаборЗаписей = РегистрыСведений.ГП_ВзаиморасчетыБП77.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КонтрагентКод.Установить(Отбор.КонтрагентКод);
    НаборЗаписей.Отбор.ДоговорКод.Установить(Отбор.ДоговорКод);

    Возврат НаборЗаписей;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных взаиморасчетов по абонентам в регистр `ГП_ВзаиморасчетыБП77` (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ДанныеВзаиморасчетовАбонентовБП77 - Массив из Структура - Данные БП77
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанных - Число
//      * ТекстСообщения - Строка, Неопределено
Функция ЗаписатьДанныеВзаиморасчетовАбонентовВРегистр(Знач ДанныеВзаиморасчетовАбонентовБП77) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, КоличествоЗаписанных, ТекстСообщения", Истина, 0);

    Если ДанныеВзаиморасчетовАбонентовБП77 = Неопределено ИЛИ ДанныеВзаиморасчетовАбонентовБП77.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиЧисел = "Дебет,Кредит,Сальдо,Водоснабжение,Водоотведение";

    // Транзакция записи в регистр
    НачатьТранзакцию();
    Попытка

        Для Каждого СтрокаДанных Из ДанныеВзаиморасчетовАбонентовБП77 Цикл
            НаборЗаписейВзаиморасчетов = СоздатьНаборЗаписейВзаиморасчетовАбонентовБП77(СтрокаДанных);
            НоваяЗапись = НаборЗаписейВзаиморасчетов.Добавить();

            // Заполнение данных
            ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных, ,
                СтрШаблон("%1", КлючиЧисел));

            // Заполнение полей с преобразованием типов
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧисел, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных[Ключ]);
            КонецЦикла;

            // Заполнение поля ДоговорНомер
            СтруктураНомера = ГП_МиграцияОбщегоНазначения.ПолучитьНомерДоговораПоНаименованию(СтрокаДанных.ДоговорНаименование);
            Если СтруктураНомера.Успех = Истина Тогда
                НоваяЗапись.ДоговорНомер = СтруктураНомера.Номер + ?(ПустаяСтрока(СтруктураНомера.Суффикс),
                        "", СтрШаблон("-%1", СтруктураНомера.Суффикс));
            КонецЕсли;

            НаборЗаписейВзаиморасчетов.Записать(Истина);
            РезультатФункции.КоличествоЗаписанных = РезультатФункции.КоличествоЗаписанных + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        РезультатФункции.КоличествоЗаписанных = 0;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка при записи в регистр ""ГП_ВзаиморасчетыБП77""
                |Информация: %1",
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
