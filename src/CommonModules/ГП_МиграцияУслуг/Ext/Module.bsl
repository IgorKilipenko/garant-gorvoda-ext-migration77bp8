// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных услуг (из ИБ БП 7.7) из файла и записывает данные в регистр ГП_УслугиБП77
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//      * СохранятьСвязи - Булево - Если Ложь, установленные связи с Лицевыми счетами
//                                      будут разорваны (поле Лицевой счет будет установлено в значение пустая ссылка)
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхУслуг - Число
//      * ТекстСообщения - Строка
//  - Неопределено
Функция ЗагрузитьДанныеУслугВРегистр(ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхУслуг, ТекстСообщения", Ложь, 0);
    
    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "Услуга");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;
    
    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных услуг.";
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;
    
    // Запись данных услуг в регистр
    УслугиБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеУслугВРегистр(УслугиБП77, ПараметрыЗагрузки.СохранятьСвязи);
    
    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхУслуг = РезультатЗаписи.КоличествоЗаписанныхУслуг;
    
    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Устанавливает соответствие услуг (объектов абонентов) БП77 из регистра с Счетчиками ИБ
//  (записывает ссылку на лицевой счет в поле регистра Лицевой счет)
// Параметры:
//  РазрыватьСуществующиеСвязи - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеУслуги - Массив из СправочникСсылка.КВП_ЛицевыеСчета
//      * ТекстСообщения - Строка
Функция УстановитьСоответствияУслугСЛицевымиСчетами(Знач РазрыватьСуществующиеСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеУслуги, ТекстСообщения", Истина, Новый Массив, "");
    
    ТаблицаСоответствияУслуг = ПолучитьЛицевыеСчетаОбъектовАбонентовДляСопоставления();
    
    НачатьТранзакцию();
    Попытка
        Для Каждого УслугаБП77 Из ТаблицаСоответствияУслуг Цикл
            Если УслугаБП77.ЛицевойСчет = УслугаБП77.ЛицевойСчетСопоставление Тогда
                Продолжить; // Лицевой счет не изменился (связь уже установлена)
            КонецЕсли;
            
            // Разрыв связи с лицевым счетом
            Если ЗначениеЗаполнено(УслугаБП77.ЛицевойСчетСопоставление) = Ложь Тогда
                Если РазрыватьСуществующиеСвязи Тогда
                    УслугаБП77.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
                Иначе
                    Продолжить;
                КонецЕсли;
            КонецЕсли;
            
            // Отбор записей регистра по составному коду
            НаборЗаписейУслуг = СоздатьНаборЗаписейУслугиБП77(УслугаБП77);
            НаборЗаписейУслуг.Прочитать();
            
            // Проверка валидности набора записей (набор должен содержать не более одной записи)
            НоваяЗапись = Неопределено;
            Если НаборЗаписейУслуг.Количество() = 0 Тогда
                НоваяЗапись = НаборЗаписейУслуг.Добавить();
            ИначеЕсли НаборЗаписейУслуг.Количество() = 1 Тогда
                НоваяЗапись = НаборЗаписейУслуг[0];
            КонецЕсли;
            Если НоваяЗапись = Неопределено Тогда
                ВызватьИсключение("Ошибка создания связей услуг. Неоднозначные параметры отбора составного кода услуги.");
            КонецЕсли;
            
            // Запись связи с лицевым счетом
            НоваяЗапись.ЛицевойСчет = УслугаБП77.ЛицевойСчетСопоставление;
            НаборЗаписейУслуг.Записать(Истина);
            РезультатФункции.ОбновленныеУслуги.Добавить(НоваяЗапись.ЛицевойСчет);
        КонецЦикла;
        
        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        
        ОбщаяЧастьСообщения = "Ошибка при записи соответствий услуг в регистр ""ГП_УслугиБП77"".";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
        РезультатФункции.ОбновленныеУслуги.Очистить();
    КонецПопытки;
    
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  МассивВидовУслугБП77 - Массив из Строка
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено
//  ДатаСоздания - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СообщенияОбОшибках - Массив из Строка
//      * ТекстСообщения - Строка - Текст сообщения об ошибке при выполнении транзакции записи документов
//      * СозданныеДокументыУправленияУслугами - Массив из ДокументСсылка.КВП_УправлениеУслугами
Функция СоздатьДокументыУправлениеУслугамиПоДаннымРегистраСчетчиковБП77(
        Знач МассивВидовУслугБП77, Знач ОрганизацияСсылка = Неопределено, ДатаСоздания = Неопределено) Экспорт
    
    РезультатФункции = Новый Структура(
            "Успех, СообщенияОбОшибках, ТекстСообщения, СозданныеДокументыУправленияУслугами",
            Истина, Новый Массив, "", Новый Массив);
    
    ДатаНачалаДействияПоУмолчанию = Дата(2024, 1, 1); // Константа по условиям ТЗ
    
    // Сбор данных для заполнения
    ДанныеДляЗаполнения = ПолучитьДанныеЗаполненияНазначенийУслуг();
    Если ДанныеДляЗаполнения.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Отсутствуют данные для заполнения
    КонецЕсли;
    
    // Соответствие для определения кода услуги
    КодыСоответствияУслуг = ГП_МиграцияПриборовУчета.ПолучитьСоответствиеКодовУслугСчетчиковБП77();
    
    ОрганизацияСсылка = ?(ОрганизацияСсылка = Неопределено,
            УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), ОрганизацияСсылка);
    ДатаСоздания = ?(ДатаСоздания = Неопределено, ТекущаяДатаСеанса(), ДатаСоздания);
    
    // Создание и заполнение документа для указанных услуг
    НачатьТранзакцию();
    
    Попытка
        Для Каждого ВидУслуги Из МассивВидовУслугБП77 Цикл
            Если ДанныеДляЗаполнения.Свойство(ВидУслуги) = Ложь Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон("Вид услуги имеет неправильное значение: ""%1"".", ВидУслуги));
                Продолжить; // Виду услуги указан не правильно
            КонецЕсли;
            
            Если ДанныеДляЗаполнения[ВидУслуги].Количество() = 0 Тогда
                Продолжить; // Нет данных для заполнения
            КонецЕсли;
            
            КодТекущейУслуги = КодыСоответствияУслуг[ВидУслуги];
            Если КодТекущейУслуги = Неопределено Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон("Не найдено соответствие для услуги: ""%1"".", ВидУслуги));
                Продолжить; // Не найдено соответствие для вида услуги
            КонецЕсли;
            //! Уточнить! Замена услуги `Водоотведения` на `Канализацию`
            //  (По ТЗ F00225713 назначался код 00-004, по ТЗ F00226285 код: "00-008")
            Если КодТекущейУслуги = "00-004" Тогда
                КодТекущейУслуги = "00-008"; //! Уточнить
            КонецЕсли;
            
            ТекущаяУслугаСсылка = Справочники.КВП_Услуги.НайтиПоКоду(КодТекущейУслуги);
            Если ТекущаяУслугаСсылка = Неопределено ИЛИ ЗначениеЗаполнено(ТекущаяУслугаСсылка) = Ложь Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон("Не найдена услуга с кодом: ""%1"".", КодТекущейУслуги));
                Продолжить; // Не найдена услуга по коду
            КонецЕсли;
            
            // Создаем новый элемент документа
            НовыйДокументУУОбъект = Документы.КВП_УправлениеУслугами.СоздатьДокумент();
            НовыйДокументУУОбъект.Дата = ДатаСоздания;
            НовыйДокументУУОбъект.Организация = ОрганизацияСсылка;
            НовыйДокументУУОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета;
            НовыйДокументУУОбъект.Ответственный = Пользователи.ТекущийПользователь();
            НовыйДокументУУОбъект.Комментарий = СтрШаблон("#создан автоматически для вида услуги БП 7.7: ""%1"". (ГарантПлюс)", ВидУслуги);
            
            // Заполняем услугу документа
            НоваяСтрокаУслуги = НовыйДокументУУОбъект.Услуги.Добавить();
            НоваяСтрокаУслуги.Услуга = ТекущаяУслугаСсылка;
            
            // Заполняем объекты документа
            Для Каждого ДанныеДляТекущейУслуги Из ДанныеДляЗаполнения[ВидУслуги] Цикл
                Если ТипЗнч(ДанныеДляТекущейУслуги.ЛицевойСчет) <> Тип("СправочникСсылка.КВП_ЛицевыеСчета")
                    ИЛИ ДанныеДляТекущейУслуги.ЛицевойСчет.Пустая() Тогда
                    Продолжить;
                КонецЕсли;
                
                НоваяСтрокаОбъекты = НовыйДокументУУОбъект.Объекты.Добавить();
                НоваяСтрокаОбъекты.Объект = ДанныеДляТекущейУслуги.ЛицевойСчет;
                НоваяСтрокаОбъекты.ДатаНачала = ДатаНачалаДействияПоУмолчанию;
            КонецЦикла;
            
            // Записываем документ
            НовыйДокументУУОбъект.Записать(РежимЗаписиДокумента.Запись);
            РезультатФункции.СозданныеДокументыУправленияУслугами.Добавить(НовыйДокументУУОбъект.Ссылка);
        КонецЦикла;
        
        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        
        ОбщаяЧастьСообщения = "Ошибка при записи документов УправлениеУслугами.";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
        РезультатФункции.СозданныеДокументыУправленияУслугами.Очистить();
    КонецПопытки;
    
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг --

// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных услуг в регистр ГП_УслугиП77 (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеУслуг - Массив из Структура
//  СохранятьСвязи - Булево - Если Истина, связи с лицевыми счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеУслугВРегистр(Знач ИсходныеДанныеУслуг, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхУслуг, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);
    
    Если ИсходныеДанныеУслуг = Неопределено ИЛИ ИсходныеДанныеУслуг.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;
    
    // Поля для предобработки (приведения типов)
    КлючиУсловийСчетчика = "ТолькоДляКанализации,НаПодогрев,НеНачислять";
    КлючиЧиселСчетчика = "ПроцентХВ,ПроцентГВ";
    
    // Транзакция записи счетчиков в регистр ГП_СчетчикиБП77
    НачатьТранзакцию();
    Попытка
        
        Для Каждого УслугаБП77 Из ИсходныеДанныеУслуг Цикл
            НаборЗаписейУслуг = СоздатьНаборЗаписейУслугиБП77(УслугаБП77);
            
            // Данные для сохранения связанного лицевого счета записи
            СвязанныйЛицевойСчет = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейУслуг.Прочитать();
                Если НаборЗаписейУслуг.Количество() > 0 Тогда
                    СвязанныйЛицевойСчет = НаборЗаписейУслуг[0].ЛицевойСчет;
                    СвязанныйЛицевойСчет = ?(ЗначениеЗаполнено(СвязанныйЛицевойСчет), СвязанныйЛицевойСчет, Неопределено);
                    НаборЗаписейУслуг.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейУслуг.Добавить();
            
            // Заполнение данных услуги
            ЗаполнитьЗначенияСвойств(НоваяЗапись, УслугаБП77, ,
                СтрШаблон("%1,%2", КлючиУсловийСчетчика, КлючиЧиселСчетчика));
            
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(УслугаБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(УслугаБП77[Ключ]);
            КонецЦикла;
            
            // Сохранение связанного лицевого счета записи
            Если СвязанныйЛицевойСчет <> Неопределено Тогда
                НоваяЗапись.ЛицевойСчет = СвязанныйЛицевойСчет;
                РезультатФункции.КоличествоСохраненныхСвязей = РезультатФункции.КоличествоСохраненныхСвязей + 1;
            КонецЕсли;
            
            // Заполнение признака ЭтоПлатаЗаХолодноеВодоснабжениеОИ
            ЭтоПлатаЗаХолодноеВодоснабжениеОИ =
                ГП_МиграцияОбщегоНазначения.ЭтоНаименованиеУслугиХолодногоВодоснабженияОИ(УслугаБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЭтоПлатаЗаХолодноеВодоснабжениеОИ;
            
            // Заполнение признака ЭтоНегативноеВоздействиеЦСВ
            ЭтоНегативноеВоздействиеЦСВ =
                ГП_МиграцияОбщегоНазначения.ЭтоНаименованиеУслугиНегативногоВоздействия(УслугаБП77.ОбъектАбонентаНаименование);
            НоваяЗапись.ЭтоНегативноеВоздействиеЦСВ = ЭтоНегативноеВоздействиеЦСВ;
            
            НаборЗаписейУслуг.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхУслуг = РезультатФункции.КоличествоЗаписанныхУслуг + 1;
        КонецЦикла;
        
        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных услуг в регистр ""ГП_УслугиБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
        РезультатФункции.КоличествоЗаписанныхУслуг = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;
    
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  УслугаБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_УслугиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейУслугиБП77(Знач УслугаБП77) Экспорт
    НаборЗаписейУслуг = РегистрыСведений.ГП_УслугиБП77.СоздатьНаборЗаписей();
    НаборЗаписейУслуг.Отбор.КонтрагентКод.Установить(УслугаБП77.КонтрагентКод);
    НаборЗаписейУслуг.Отбор.ОбъектАбонентаКод.Установить(УслугаБП77.ОбъектАбонентаКод);
    
    Возврат НаборЗаписейУслуг;
КонецФункции

// ++ Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг ++
//
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * ЛицевойСчет - СправочникСсылка.УВП_ЛицевыеСчета
//      * ЛицевойСчетСопоставление - СправочникСсылка.УВП_ЛицевыеСчета
Функция ПолучитьЛицевыеСчетаОбъектовАбонентовДляСопоставления() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_УслугиБП77.КонтрагентКод КАК КонтрагентКод,
        |	ГП_УслугиБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_УслугиБП77.ЛицевойСчет КАК ЛицевойСчет,
        |	ГП_УслугиБП77.ОбъектАбонентаКод + ""_"" + ГП_УслугиБП77.КонтрагентКод КАК СоставнойИдентификатор
        |ПОМЕСТИТЬ ВТ_ГП_УслугиБП77
        |ИЗ
        |	РегистрСведений.ГП_УслугиБП77 КАК ГП_УслугиБП77
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ГП_УслугиБП77.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ГП_УслугиБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ГП_УслугиБП77.ЛицевойСчет КАК ЛицевойСчет,
        |	ЕСТЬNULL(КВП_ЛицевыеСчета.Ссылка, &ПустаяСсылкаЛС) КАК ЛицевойСчетСопоставление
        |ИЗ
        |	ВТ_ГП_УслугиБП77 КАК ВТ_ГП_УслугиБП77
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |		ПО ВТ_ГП_УслугиБП77.СоставнойИдентификатор = КВП_ЛицевыеСчета.Идентификатор
        |";
    
    Запрос.УстановитьПараметр("ПустаяСсылкаЛС", Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
    
    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции // -- Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг --

#Область НазначениеУслуг

// Параметры:
//  ДатаАктуальности - Дата, Неопределено
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено
// Получает данные для заполнения документа Назначение услуги
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ХолоднаяВода - ТаблицаЗначений, Неопределено
//      * ГорячаяВода - ТаблицаЗначений, Неопределено
//      * Канализация - ТаблицаЗначений, Неопределено
//      * ХолоднаяВодаВодоотвод - ТаблицаЗначений, Неопределено
//      * НегативноеВоздействие - ТаблицаЗначений, Неопределено
Функция ПолучитьДанныеЗаполненияНазначенийУслуг(
        Знач ДатаАктуальности = Неопределено, ОрганизацияСсылка = Неопределено) Экспорт
    
    РезультатФункции = Новый Структура(
            "Успех, ХолоднаяВода, ГорячаяВода, Канализация, ХолоднаяВодаВодоотвод, ПодогревХВ, НегативноеВоздействие", Истина);
    
    Если ОрганизацияСсылка = Неопределено Тогда
        ОрганизацияСсылка = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    КонецЕсли;
    
    МВТ = Новый МенеджерВременныхТаблиц();
    
    // Формирование временных таблиц;
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    #Область ТекстЗапросаВТЗаполненияНазначенийУслуг
    Запрос.Текст =
        "////////////////////////////////////////////////////////////////////////////////
        |// Услуги БП77 (без платы за ОИ)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_УслугиБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ГП_УслугиБП77.КонтрагентКод КАК КонтрагентКод,
        |	ГП_УслугиБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |	ГП_УслугиБП77.ЛицевойСчет КАК ЛицевойСчетСвязь,
        |	ГП_УслугиБП77.ТолькоДляКанализации КАК ТолькоДляКанализации,
        |	ГП_УслугиБП77.МетодРасчетаХВ КАК МетодРасчетаХВ,
        |	ГП_УслугиБП77.МетодРасчетаГВ КАК МетодРасчетаГВ,
        |	ГП_УслугиБП77.МетодРасчетаКан КАК МетодРасчетаКан,
        |	ГП_УслугиБП77.НаПодогрев КАК НаПодогрев,
        |	ГП_УслугиБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ КАК ЭтоПлатаЗаХолодноеВодоснабжениеОИ,
        |	ГП_УслугиБП77.ЭтоНегативноеВоздействиеЦСВ КАК ЭтоНегативноеВоздействиеЦСВ,
        |	ГП_УслугиБП77.ОбъектАбонентаКод + ""_"" + ГП_УслугиБП77.КонтрагентКод КАК СоставнойКодЛС
        |ПОМЕСТИТЬ ВТ_УслугиБП77
        |ИЗ
        |	РегистрСведений.ГП_УслугиБП77 КАК ГП_УслугиБП77
        |ГДЕ
        |	ГП_УслугиБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Лицевые счета ИБ
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.Идентификатор КАК Идентификатор
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Связь лицевых счетов и услуг БП77 (без платы за ОИ)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.Идентификатор КАК Идентификатор,
        |	ВТ_УслугиБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_УслугиБП77.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_УслугиБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |	ВТ_УслугиБП77.ТолькоДляКанализации КАК ТолькоДляКанализации,
        |	ВТ_УслугиБП77.МетодРасчетаХВ КАК МетодРасчетаХВ,
        |	ВТ_УслугиБП77.МетодРасчетаГВ КАК МетодРасчетаГВ,
        |	ВТ_УслугиБП77.МетодРасчетаКан КАК МетодРасчетаКан,
        |	ВТ_УслугиБП77.НаПодогрев КАК НаПодогрев,
        |	ВТ_УслугиБП77.ЭтоНегативноеВоздействиеЦСВ КАК ЭтоНегативноеВоздействиеЦСВ,
        |	ВТ_УслугиБП77.СоставнойКодЛС КАК СоставнойКодЛС
        |ПОМЕСТИТЬ ВТ_УслугиЛицевыхСчетов
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УслугиБП77 КАК ВТ_УслугиБП77
        |		ПО (ВТ_УслугиБП77.СоставнойКодЛС = ВТ_ЛицевыеСчета.Идентификатор)
        |			И (ВТ_УслугиБП77.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Услуги лицевых счетов (без негативного воздействия и платы за ОИ)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_УслугиЛицевыхСчетов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_УслугиЛицевыхСчетов.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_УслугиЛицевыхСчетов.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |	ВТ_УслугиЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_УслугиЛицевыхСчетов.ТолькоДляКанализации КАК ТолькоДляКанализации,
        |	ВТ_УслугиЛицевыхСчетов.МетодРасчетаХВ КАК МетодРасчетаХВ,
        |	ВТ_УслугиЛицевыхСчетов.МетодРасчетаГВ КАК МетодРасчетаГВ,
        |	ВТ_УслугиЛицевыхСчетов.МетодРасчетаКан КАК МетодРасчетаКан,
        |	ВТ_УслугиЛицевыхСчетов.НаПодогрев КАК НаПодогрев
        |ПОМЕСТИТЬ ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ
        |ИЗ
        |	ВТ_УслугиЛицевыхСчетов КАК ВТ_УслугиЛицевыхСчетов
        |ГДЕ
        |	ВТ_УслугиЛицевыхСчетов.ЛицевойСчет <> &ПустаяСсылкаЛС
        |	И ВТ_УслугиЛицевыхСчетов.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ
        |	И (ВТ_УслугиЛицевыхСчетов.МетодРасчетаХВ <> ""Нет""
        |			ИЛИ ВТ_УслугиЛицевыхСчетов.МетодРасчетаГВ <> ""Нет""
        |			ИЛИ ВТ_УслугиЛицевыхСчетов.МетодРасчетаКан <> ""Нет""
        |				И ВТ_УслугиЛицевыхСчетов.МетодРасчетаКан <> """")
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Подготовка данных для назначения услуг (кроме негативного воздействия и платы за ОИ)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.ЛицевойСчет КАК ЛицевойСчет,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.МетодРасчетаХВ <> ""Нет""
        |				И ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.НаПодогрев = ЛОЖЬ
        |				И ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.ТолькоДляКанализации = ЛОЖЬ
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоХолоднаяВода,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.МетодРасчетаХВ <> ""Нет""
        |				И ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.ТолькоДляКанализации = ИСТИНА
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоЭтоХолоднаяВодаВодоотвод,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.МетодРасчетаГВ <> ""Нет""
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоГорячаяВода,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.МетодРасчетаКан <> ""Нет""
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоКанализация,
        |	ВЫБОР
        |		КОГДА ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.МетодРасчетаХВ <> ""Нет""
        |				И ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.НаПодогрев = ИСТИНА
        |				И ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ.ТолькоДляКанализации = ЛОЖЬ
        |			ТОГДА ИСТИНА
        |		ИНАЧЕ ЛОЖЬ
        |	КОНЕЦ КАК ЭтоПодогревХВ
        |ПОМЕСТИТЬ ВТ_УслугиОбъектыАбонентов
        |ИЗ
        |	ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ КАК ВТ_ОбъектыАбонентовПодготовкаБезНВиОИ
        |";
    #КонецОбласти // ТекстЗапросаВТЗаполненияНазначенийУслуг
    
    Запрос.УстановитьПараметр("ПустаяСсылкаЛС", Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
    Запрос.Выполнить();
    
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    #Область ТекстЗапроса
    Запрос.Текст =
        "////////////////////////////////////////////////////////////////////////////////
        |// Результат [0] ХолоднаяВода
        |ВЫБРАТЬ
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_УслугиОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_УслугиОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_УслугиОбъектыАбонентов КАК ВТ_УслугиОбъектыАбонентов
        |ГДЕ
        |	ВТ_УслугиОбъектыАбонентов.ЭтоХолоднаяВода = ИСТИНА
        |
        |УПОРЯДОЧИТЬ ПО
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [1] ГорячаяВода
        |ВЫБРАТЬ
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_УслугиОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_УслугиОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_УслугиОбъектыАбонентов КАК ВТ_УслугиОбъектыАбонентов
        |ГДЕ
        |	ВТ_УслугиОбъектыАбонентов.ЭтоГорячаяВода = ИСТИНА
        |
        |УПОРЯДОЧИТЬ ПО
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [2] Канализация
        |ВЫБРАТЬ
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_УслугиОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_УслугиОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_УслугиОбъектыАбонентов КАК ВТ_УслугиОбъектыАбонентов
        |ГДЕ
        |	ВТ_УслугиОбъектыАбонентов.ЭтоКанализация = ИСТИНА
        |
        |УПОРЯДОЧИТЬ ПО
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [3] ХолоднаяВодаВодоотвод
        |ВЫБРАТЬ
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_УслугиОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_УслугиОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_УслугиОбъектыАбонентов КАК ВТ_УслугиОбъектыАбонентов
        |ГДЕ
        |	ВТ_УслугиОбъектыАбонентов.ЭтоЭтоХолоднаяВодаВодоотвод = ИСТИНА
        |
        |УПОРЯДОЧИТЬ ПО
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [4] Счетчик ХВ (Подогрев)
        |ВЫБРАТЬ
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_УслугиОбъектыАбонентов.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_УслугиОбъектыАбонентов.КонтрагентКод КАК КонтрагентКод
        |ИЗ
        |	ВТ_УслугиОбъектыАбонентов КАК ВТ_УслугиОбъектыАбонентов
        |ГДЕ
        |	ВТ_УслугиОбъектыАбонентов.ЭтоПодогревХВ = ИСТИНА
        |
        |УПОРЯДОЧИТЬ ПО
        |	ВТ_УслугиОбъектыАбонентов.ЛицевойСчет
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат [5] НегативноеВоздействие
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_УслугиЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет
        |ИЗ
        |	ВТ_УслугиЛицевыхСчетов КАК ВТ_УслугиЛицевыхСчетов
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УслугиБП77 КАК ВТ_УслугиБП77_НВ
        |		ПО (ВТ_УслугиБП77_НВ.ЭтоНегативноеВоздействиеЦСВ = ИСТИНА)
        |			И (ВТ_УслугиЛицевыхСчетов.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ)
        |			И ВТ_УслугиЛицевыхСчетов.КонтрагентКод = ВТ_УслугиБП77_НВ.КонтрагентКод
        |			И ВТ_УслугиЛицевыхСчетов.ОбъектАбонентаКод <> ВТ_УслугиБП77_НВ.ОбъектАбонентаКод
        |			И (ВТ_УслугиБП77_НВ.ОбъектАбонентаНаименование ПОДОБНО ВТ_УслугиЛицевыхСчетов.ОбъектАбонентаНаименование + ""%негатив%возд%"")
        |
        |УПОРЯДОЧИТЬ ПО
        |	ВТ_УслугиЛицевыхСчетов.ЛицевойСчет
        |;";
    #КонецОбласти // ТекстЗапроса
    
    Если ДатаАктуальности = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", "");
    Иначе
        Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
    КонецЕсли;
    Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
    
    ТаблицыПакета = Запрос.ВыполнитьПакет();
    РезультатФункции.ХолоднаяВода = ТаблицыПакета[0].Выгрузить();
    РезультатФункции.ГорячаяВода = ТаблицыПакета[1].Выгрузить();
    РезультатФункции.Канализация = ТаблицыПакета[2].Выгрузить();
    РезультатФункции.ХолоднаяВодаВодоотвод = ТаблицыПакета[3].Выгрузить();
    РезультатФункции.ПодогревХВ = ТаблицыПакета[4].Выгрузить();
    РезультатФункции.НегативноеВоздействие = ТаблицыПакета[5].Выгрузить();
    
    РезультатФункции.Успех = (РезультатФункции.ХолоднаяВода.Количество()
            + РезультатФункции.ГорячаяВода.Количество()
            + РезультатФункции.Канализация.Количество()
            + РезультатФункции.ХолоднаяВодаВодоотвод.Количество()
            + РезультатФункции.ХолоднаяВодаВодоотвод.Количество()
            + РезультатФункции.ПодогревХВ.Количество()
            + РезультатФункции.НегативноеВоздействие.Количество()) > 0;
    
    Возврат РезультатФункции;
КонецФункции

// Устарела. Не используется в текущей реализации
//
// Параметры:
//  ЛицевойСчетСсылка - СправочникСсылка.КВП_ЛицевыеСчета
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
//      * Контрагент - СправочникСсылка.Контрагенты
//  - Неопределено - Если данные не найдены
Функция ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
        Знач ЛицевойСчетСсылка, Знач ОрганизацияСсылка = Неопределено, Знач ДатаАктуальности = Неопределено) Экспорт
    Запрос = Новый Запрос();
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Дата КАК Дата,
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор КАК Договор,
        |	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент КАК Контрагент
        |ИЗ
        |	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
        |
        |УПОРЯДОЧИТЬ ПО
        |   КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Дата УБЫВ
        |";
    
    Если ДатаАктуальности = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Дата", "");
    Иначе
        Запрос.УстановитьПараметр("Дата", ДатаАктуальности);
    КонецЕсли;
    Если ОрганизацияСсылка = Неопределено Тогда
        ОрганизацияСсылка = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    КонецЕсли;
    Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчетСсылка);
    Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    Если РезультатЗапроса = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    РезультатФункции = Новый Структура("Договор, Контрагент", Выборка.Договор, Выборка.Контрагент);
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // НазначениеУслуг

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг --
