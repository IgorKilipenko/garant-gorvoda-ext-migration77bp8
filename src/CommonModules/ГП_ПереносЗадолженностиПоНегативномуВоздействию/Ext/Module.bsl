#Область ПрограммныйИнтерфейс

// Параметры:
//  - Организация - СправочникСсылка.Организации
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Контрагент - СправочникСсылка.Контрагенты
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
//      * НомерДоговора - Строка
//      * СуммаОстаток - Число
Функция ПолучитьОстаткиДляПереносаЗадолженности(Знач Период = Неопределено, Знач Организация = Неопределено) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Хозрасчетный.Ссылка КАК Счет
        |ПОМЕСТИТЬ ВТ_ФильтрСписокСчетов
        |ИЗ
        |    ПланСчетов.Хозрасчетный КАК Хозрасчетный
        |ГДЕ
        |    Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
        |
        |ИНДЕКСИРОВАТЬ ПО
        |    Счет
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ХозрасчетныйОстаткиНаКонец.Субконто1 КАК Контрагент,
        |    ХозрасчетныйОстаткиНаКонец.Субконто2 КАК Договор,
        |    (ВЫРАЗИТЬ(ХозрасчетныйОстаткиНаКонец.Субконто2 КАК Справочник.ДоговорыКонтрагентов)).Номер КАК НомерДоговора,
        |    ХозрасчетныйОстаткиНаКонец.СуммаОстаток КАК СуммаОстаток
        |ИЗ
        |    РегистрБухгалтерии.Хозрасчетный.Остатки(
        |            &КонецПериода,
        |            Счет В
        |                (ВЫБРАТЬ
        |                    Т.Счет
        |                ИЗ
        |                    ВТ_ФильтрСписокСчетов КАК Т),
        |            &АналитикаРасчетов,
        |            Организация = &Организация
        |                И Субконто2.lc_ВидДоговора В (&ДополнительныеВидыДоговоров)) КАК ХозрасчетныйОстаткиНаКонец
        |ГДЕ
        |	ХозрасчетныйОстаткиНаКонец.СуммаОстаток <> 0
        |";

    ФильтрСписокСчетов = Новый Массив;
    ФильтрСписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
    ФильтрСписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
    Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);

    АналитикаРасчетов = Новый Массив;
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);

    ДополнительныеВидыДоговоров = Новый Массив;
    ДополнительныеВидыДоговоров.Добавить(ГП_РаботаСДоговорами.ПолучитьДополнительныйВидДоговораПлатаЗаНегативноеВоздействие().Ссылка);
    Запрос.УстановитьПараметр("ДополнительныеВидыДоговоров", ДополнительныеВидыДоговоров);

    Организация = ?(Организация = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), Организация);
    Запрос.УстановитьПараметр("Организация", Организация);

    Если Период = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериода", "");
    Иначе
        КонецПериода = ?(ТипЗнч(Период) = Тип("Граница"), Период, Новый Граница(Период, ВидГраницы.Включая));
        Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ДокументОбъект.КорректировкаДолга
Функция НовыйДокументКорректировкиДолга(Знач Контрагент) Экспорт
    ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
    ДокументОбъект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
    ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
    ДокументОбъект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
    ДокументОбъект.КонтрагентДебитор = Контрагент;
    ДокументОбъект.КонтрагентКредитор = Контрагент;
    ДокументОбъект.Комментарий = "#создан автоматически для переноса долга с договора негативного воздействия (ГарантПлюс)";

    Возврат ДокументОбъект;
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаДолга
//  МассивВидовДоговоров - Массив из ПеречислениеСсылка.ВидыДоговоровКонтрагентов
Функция ЗаполнитьДокументКорректировкиДолгаПоКонтрагенту(ДокументОбъект, Знач МассивВидовДоговоров = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, ТаблицаОстатков, ТекстСообщения", Истина);

    МассивВидовДоговоров = ?(МассивВидовДоговоров = Неопределено, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
                Перечисления.ВидыДоговоровКонтрагентов.СПокупателем), МассивВидовДоговоров);

    // Формирование параметров заполнения таблицы остатков
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Дата", ДокументОбъект.Дата);
    СтруктураПараметров.Вставить("Ссылка", ДокументОбъект.Ссылка);
    СтруктураПараметров.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка));
    СтруктураПараметров.Вставить("Организация", ДокументОбъект.Организация);
    СтруктураПараметров.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
    СтруктураПараметров.Вставить("КурсДокумента", ДокументОбъект.КурсДокумента);
    СтруктураПараметров.Вставить("КратностьДокумента", ДокументОбъект.КратностьДокумента);
    СтруктураПараметров.Вставить("ВидОперации", ДокументОбъект.ВидОперации);

    АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
    СтруктураПараметров.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);

    ЗаполняемыеТаблицы = Новый ТаблицаЗначений;
    ЗаполняемыеТаблицы.Колонки.Добавить("ПоКонтрагенту", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
    ЗаполняемыеТаблицы.Колонки.Добавить("ВидЗадолженности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗадолженности"));
    ЗаполняемыеТаблицы.Колонки.Добавить("МассивВидовДоговоров", Новый ОписаниеТипов("Массив"));
    СтруктураПараметров.Вставить("ЗаполняемыеТаблицы", ЗаполняемыеТаблицы);

    ЗаполняемаяТаблица = СтруктураПараметров.ЗаполняемыеТаблицы.Добавить();
    ЗаполняемаяТаблица.ПоКонтрагенту = ДокументОбъект.КонтрагентДебитор;
    ЗаполняемаяТаблица.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
    ЗаполняемаяТаблица.МассивВидовДоговоров = МассивВидовДоговоров;

    АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
    Документы.КорректировкаДолга.ЗаполнитьОстаткамиВзаиморасчетов(СтруктураПараметров, АдресВременногоХранилища);
    РезультатЗаполнения = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);

    // Очищаем хранилища
    УдалитьИзВременногоХранилища(АдресВременногоХранилища);
    УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);

    Если РезультатЗаполнения.Успешно = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТаблицаОстатков = Неопределено;
        РезультатФункции.ТекстСообщения = "Ошибка подбора данных о задолженности";

        Возврат РезультатФункции; // Ошибка получения остатков
    КонецЕсли;

    РезультатФункции.ТаблицаОстатков = РезультатЗаполнения.ЗаполненныеТаблицы[Перечисления.ВидыЗадолженности.Дебиторская];

    // Исключаем строки где договор <> Негативное воздействие
    СтрокиДляУдаления = Новый Массив;
    ВидДоговораНегативногоВоздействия = ГП_РаботаСДоговорами.ПолучитьДополнительныйВидДоговораПлатаЗаНегативноеВоздействие().Ссылка;
    Для Каждого СтрокаДанных Из РезультатФункции.ТаблицаОстатков Цикл
        Если ТипЗнч(СтрокаДанных.ДоговорКонтрагента) <> Тип("СправочникСсылка.ДоговорыКонтрагентов")
            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) = Ложь Тогда
            Продолжить;
        КонецЕсли;

        ДополнительныйВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.ДоговорКонтрагента, "lc_ВидДоговора");
        Если ДополнительныйВидДоговора = ВидДоговораНегативногоВоздействия Тогда
            Продолжить;
        КонецЕсли;

        СтрокиДляУдаления.Добавить(СтрокаДанных);
    КонецЦикла;

    Для Каждого СтрокаУдаления Из СтрокиДляУдаления Цикл
        РезультатФункции.ТаблицаОстатков.Удалить(СтрокаУдаления);
    КонецЦикла;

    // Добавляем колонку с договорами на которые нужно выполнять перенос долга
    РезультатФункции.ТаблицаОстатков =
        ДополнитьТаблицуКорректировкиДолгаДоговорамиАбонентскогоОтдела(РезультатФункции.ТаблицаОстатков);

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаДолга
//  Контрагент - СправочникСсылка.Контрагенты
Функция СоздатьИЗаполнитьДокументКорректировкиДолгаПоКонтрагенту(Знач ДатаДокумента, Знач Контрагент) Экспорт
    ДокументОбъект = НовыйДокументКорректировкиДолга(Контрагент);
    ДокументОбъект.Дата = ДатаДокумента;
    РезультатЗаполнения = ЗаполнитьДокументКорректировкиДолгаПоКонтрагенту(ДокументОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
                Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));

    Если РезультатЗаполнения.Успех = Ложь Тогда
        ОбщегоНазначения.СообщитьПользователю(РезультатЗаполнения.ТекстСообщения);
        Возврат Неопределено;
    КонецЕсли;

    ДокументОбъект.ДебиторскаяЗадолженность.Очистить();
    ДокументОбъект.ДебиторскаяЗадолженность.Загрузить(РезультатЗаполнения.ТаблицаОстатков);

    ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
    Возврат ДокументОбъект.Ссылка;
КонецФункции

Функция ВыполнитьПереносДолгаСДокументовНегативногоВоздействия(Знач Период = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеДокументы, СообщенияОбОшибках, ТекстСообщения", Истина, Новый Массив, Новый Массив);

    ТаблицаОстатковДолгаНВ = ПолучитьОстаткиДляПереносаЗадолженности(Период);
    ТаблицаОстатковДолгаНВ.Свернуть("Контрагент");
    МассивКонтрагентов = ТаблицаОстатковДолгаНВ.ВыгрузитьКолонку("Контрагент");

    ДатаСозданияДокументов = Период;

    НачатьТранзакцию();
    Попытка
        Для Каждого ТекущийКонтрагент Из МассивКонтрагентов Цикл
            СозданныйДокументСсылка = СоздатьИЗаполнитьДокументКорректировкиДолгаПоКонтрагенту(ДатаСозданияДокументов, ТекущийКонтрагент);
            Если СозданныйДокументСсылка = Неопределено ИЛИ ЗначениеЗаполнено(СозданныйДокументСсылка) = Ложь Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(
                    СтрШаблон("Не удалось создать документ корректировки для контрагента: %1", Строка(ТекущийКонтрагент)));
                Продолжить;
            КонецЕсли;

            РезультатФункции.СозданныеДокументы.Добавить(СозданныйДокументСсылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        РезультатФункции.Успех = Ложь;
        РезультатФункции.СозданныеДокументы.Очистить();
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Не удалось выполнить создание документов корректировки.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Если РезультатФункции.Успех = Истина Тогда
        РезультатФункции.ТекстСообщения = СтрШаблон("Выполнено создание %1 / %2 документов корректировки долга",
                РезультатФункции.СозданныеДокументы.Количество(), МассивКонтрагентов.Количество());
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ДополнитьТаблицуКорректировкиДолгаДоговорамиАбонентскогоОтдела(Знач ТаблицаКорректировки)
    МассивДоговоровНВ = ТаблицаКорректировки.ВыгрузитьКолонку("ДоговорКонтрагента");
    ТаблицаСоответствийДоговоров = ГП_РаботаСДоговорами.ПолучитьАбонентскиеДоговорыПоДоговорамНегативногоВоздействия(
            МассивДоговоровНВ, Истина);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ПОМЕСТИТЬ ВТ_ТаблицаКорректировки
        |ИЗ
        |   &ТаблицаКорректировки КАК ТаблицаКорректировки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ТаблицаСоответствийДоговоров.Договор КАК Договор,
        |   ТаблицаСоответствийДоговоров.ДоговорНегативноеВоздействие КАК ДоговорНегативноеВоздействие
        |ПОМЕСТИТЬ ВТ_ТаблицаСоответствийДоговоров_Исходный
        |ИЗ
        |   &ТаблицаСоответствийДоговоров КАК ТаблицаСоответствийДоговоров
        |ГДЕ
        |   НЕ ТаблицаСоответствийДоговоров.ДоговорНегативноеВоздействие ЕСТЬ NULL
        |   И ТаблицаСоответствийДоговоров.ДоговорНегативноеВоздействие <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   МИНИМУМ(ВТ_ТаблицаСоответствийДоговоров_Исходный.Договор) КАК Договор,
        |   ВТ_ТаблицаСоответствийДоговоров_Исходный.ДоговорНегативноеВоздействие КАК ДоговорНегативноеВоздействие
        |ПОМЕСТИТЬ ВТ_ТаблицаСоответствийДоговоров
        |ИЗ
        |   ВТ_ТаблицаСоответствийДоговоров_Исходный КАК ВТ_ТаблицаСоответствийДоговоров_Исходный
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТ_ТаблицаСоответствийДоговоров_Исходный.ДоговорНегативноеВоздействие
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_ТаблицаКорректировки.*,
        |   ЕСТЬNULL(ВТ_ТаблицаСоответствийДоговоров.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПереноса
        |ИЗ
        |   ВТ_ТаблицаКорректировки КАК ВТ_ТаблицаКорректировки
        |   ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСоответствийДоговоров КАК ВТ_ТаблицаСоответствийДоговоров
        |   ПО ВТ_ТаблицаКорректировки.ДоговорКонтрагента = ВТ_ТаблицаСоответствийДоговоров.ДоговорНегативноеВоздействие
        |       И  ВТ_ТаблицаКорректировки.ДоговорКонтрагента <> ВТ_ТаблицаСоответствийДоговоров.Договор
        |";

    Запрос.УстановитьПараметр("ТаблицаКорректировки", ТаблицаКорректировки);
    Запрос.УстановитьПараметр("ТаблицаСоответствийДоговоров", ТаблицаСоответствийДоговоров);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаКорректировки = РезультатЗапроса.Выгрузить();

    Для Каждого СтрокаДанных Из ТаблицаКорректировки Цикл
        СтрокаДанных.КорДоговорКонтрагента = СтрокаДанных.ДоговорПереноса;
        СтрокаДанных.КорСчетУчетаРасчетов = СтрокаДанных.СчетУчетаРасчетов;
    КонецЦикла;

    ТаблицаКорректировки.Колонки.Удалить("ДоговорПереноса");

    Возврат ТаблицаКорректировки;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
