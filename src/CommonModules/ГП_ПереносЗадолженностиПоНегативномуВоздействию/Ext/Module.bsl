#Область ПрограммныйИнтерфейс

// Параметры:
//  - Организация - СправочникСсылка.Организации
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Контрагент - СправочникСсылка.Контрагенты
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
//      * НомерДоговора - Строка
//      * СуммаОстаток - Число
Функция ПолучитьОстаткиДляПереносаЗадолженности(Знач Период = Неопределено, Знач Организация = Неопределено) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Хозрасчетный.Ссылка КАК Счет
        |ПОМЕСТИТЬ ВТ_ФильтрСписокСчетов
        |ИЗ
        |    ПланСчетов.Хозрасчетный КАК Хозрасчетный
        |ГДЕ
        |    Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
        |
        |ИНДЕКСИРОВАТЬ ПО
        |    Счет
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ХозрасчетныйОстаткиНаКонец.Субконто1 КАК Контрагент,
        |    ХозрасчетныйОстаткиНаКонец.Субконто2 КАК Договор,
        |    (ВЫРАЗИТЬ(ХозрасчетныйОстаткиНаКонец.Субконто2 КАК Справочник.ДоговорыКонтрагентов)).Номер КАК НомерДоговора,
        |    ХозрасчетныйОстаткиНаКонец.СуммаОстаток КАК СуммаОстаток
        |ПОМЕСТИТЬ ВТ_ОстатокНаКонец
        |ИЗ
        |    РегистрБухгалтерии.Хозрасчетный.Остатки(
        |            &КонецПериода,
        |            Счет В
        |                (ВЫБРАТЬ
        |                    Т.Счет
        |                ИЗ
        |                    ВТ_ФильтрСписокСчетов КАК Т),
        |            &АналитикаРасчетов,
        |            Организация = &Организация
        |                И Субконто2.lc_ВидДоговора В (&ДополнительныеВидыДоговоров)) КАК ХозрасчетныйОстаткиНаКонец
        |ГДЕ
        |	ХозрасчетныйОстаткиНаКонец.СуммаОстаток <> 0
        |";

    ФильтрСписокСчетов = Новый Массив;
    ФильтрСписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
    ФильтрСписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
    Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);

    АналитикаРасчетов = Новый Массив;
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);

    ДополнительныеВидыДоговоров = Новый Массив;
    ДополнительныеВидыДоговоров.Добавить(ГП_РаботаСДоговорами.ПолучитьДополнительныйВидДоговораПлатаЗаНегативноеВоздействие().Ссылка);
    Запрос.УстановитьПараметр("ДополнительныеВидыДоговоров", ДополнительныеВидыДоговоров);

    Организация = ?(Организация = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), Организация);
    Запрос.УстановитьПараметр("Организация", Организация);

    Если Период = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериода", "");
    Иначе
        КонецПериода = ?(ТипЗнч(Период) = Тип("Граница"), Период, Новый Граница(Период, ВидГраницы.Включая));
        Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ДокументОбъект.КорректировкаДолга
Функция НовыйДокументКорректировкиДолга(Знач Контрагент) Экспорт
    ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
    ДокументОбъект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
    ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
    ДокументОбъект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
    ДокументОбъект.КонтрагентДебитор = Контрагент;
    ДокументОбъект.КонтрагентКредитор = Контрагент;
    ДокументОбъект.Комментарий = "#создан автоматически для переноса долга с договора негативного воздействия (ГарантПлюс)";

    Возврат ДокументОбъект;
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаДолга
//  Контрагент - СправочникСсылка.Контрагенты
Функция ЗаполнитьДокументКорректировкиДолгаПоКонтрагенту(ДокументОбъект, Знач СписокДоговоров) Экспорт
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Дата", ДокументОбъект.Дата);
    СтруктураПараметров.Вставить("Ссылка", ДокументОбъект.Ссылка);
    СтруктураПараметров.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка));
    СтруктураПараметров.Вставить("Организация", ДокументОбъект.Организация);
    СтруктураПараметров.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
    СтруктураПараметров.Вставить("КурсДокумента", ДокументОбъект.КурсДокумента);
    СтруктураПараметров.Вставить("КратностьДокумента", ДокументОбъект.КратностьДокумента);
    СтруктураПараметров.Вставить("ВидОперации", ДокументОбъект.ВидОперации);
    
    АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
    СтруктураПараметров.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);
    
    ЗаполняемыеТаблицы = Новый ТаблицаЗначений;
	ЗаполняемыеТаблицы.Колонки.Добавить("ПоКонтрагенту",        Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ЗаполняемыеТаблицы.Колонки.Добавить("ВидЗадолженности",     Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗадолженности"));
	ЗаполняемыеТаблицы.Колонки.Добавить("МассивВидовДоговоров", Новый ОписаниеТипов("Массив"));
    СтруктураПараметров.Вставить("ЗаполняемыеТаблицы", ЗаполняемыеТаблицы);

    ЗаполняемаяТаблица = СтруктураПараметров.ЗаполняемыеТаблицы.Добавить();
    ЗаполняемаяТаблица.ПоКонтрагенту        = ДокументОбъект.КонтрагентДебитор;
    ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Дебиторская;
    ЗаполняемаяТаблица.МассивВидовДоговоров = СписокДоговоров;

    АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
    Документы.КорректировкаДолга.ЗаполнитьОстаткамиВзаиморасчетов(СтруктураПараметров, АдресВременногоХранилища);
    РезультатЗаполнения = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
    Если РезультатЗаполнения.Успешно = Ложь Тогда
        ОбщегоНазначения.СообщитьПользователю("Ошибка подобора данных о задалженности");
        Возврат Ложь;
    КонецЕсли;
    
    ТаблицаПереносаОстатков = РезультатЗаполнения.ЗаполненныеТаблицы[Перечисления.ВидыЗадолженности.Дебиторская];

    УдалитьИзВременногоХранилища(АдресВременногоХранилища);
    УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаДолга
//  Контрагент - СправочникСсылка.Контрагенты
Функция СоздатьИЗаполнитьДокументКорректировкиДолгаПоКонтрагенту(Знач Контрагент, Знач СписокДоговоров) Экспорт
    ДокументОбъект = НовыйДокументКорректировкиДолга(Контрагент);
    ДокументОбъект.Дата = ТекущаяДатаСеанса();
    ЗаполнитьДокументКорректировкиДолгаПоКонтрагенту(ДокументОбъект, СписокДоговоров);
    ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
    Возврат ДокументОбъект;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
