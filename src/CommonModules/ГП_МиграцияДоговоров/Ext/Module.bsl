// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных договоров (из БП 7.7) из файла и записывает данные в регистр `ГП_ДоговорыБП77`
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//      * СохранятьСвязи - Булево - Если Ложь, установленные связи с ДоговоромКонтрагента
//                                      будут разорваны (поле `Договор` будет установлено в значение пустая ссылка)
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхДоговоров - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено
Функция ЗагрузитьДанныеДоговоровВРегистр(ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхДоговоров, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "Договор");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных.";
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных договоров в регистр
    ДоговорБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеДоговоровВРегистр(ДоговорБП77, ПараметрыЗагрузки.СохранятьСвязи);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхДоговоров = РезультатЗаписи.КоличествоЗаписанныхДоговоров;

    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Создает новые объекты `Договоры` по данным из регистра `ГП_ДокументыБП77` для перенесенных ГарантПлюс Контрагентов (абонентов)
//  Создается только основные договоры контрагентов. Созданным договорам будет назначен владелец - Контрагент
// Параметры:
//  ПараметрыСоздания - Структура
//      * ОбновлятьСвязиПередСозданием - Булево - Если Истина, тогда перед началом транзакции создания будут обновлены связи
//          договоров БП77 в регистре `ГП_ДоговорыБП77` (по умолчанию Истина).
//      * ОбновлятьСвязиПослеСоздания - Булево - Если Истина, после операции создания договоров будет выполнено обновление
//          связей в регистре `ГП_ДоговорыБП77`.
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеДоговоры - Массив из СправочникСсылка.ДоговорыКонтрагентов
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьОсновныеДоговорыДляПеренесенныхКонтрагентов(Знач ПараметрыСоздания = Неопределено) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, СозданныеДоговоры, ТекстСообщения", Истина, Новый Массив);

    // Установка параметров в значения по умолчанию
    Если ПараметрыСоздания = Неопределено Тогда
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("ОбновлятьСвязиПередСозданием", Истина);
        ПараметрыСоздания.Вставить("ОбновлятьСвязиПослеСоздания", Истина);
    КонецЕсли;

    // Выполняем установку(обновление) связей зданий
    // Если ПараметрыСоздания.ОбновлятьСвязиПередСозданием Тогда
    //     РезультатУстановкиСвязей = УстановитьСоответствияАбонентов(Истина);
    //     Если РезультатУстановкиСвязей.Успех = Ложь Тогда
    //         РезультатФункции.Успех = Ложь;
    //         РезультатФункции.ТекстСообщения = РезультатУстановкиСвязей.ТекстСообщения;
    //
    //         Возврат РезультатФункции; // Ошибка при создании (обновлении связей)
    //     КонецЕсли;
    // КонецЕсли;

    // Получение данных для создания
    ТаблицаДоговоровБП77 = ПолучитьТаблицуДоговоровБП77ДляСозданияНовых();
    Если ТаблицаДоговоровБП77.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных для создания
    КонецЕсли;

    ВидДоговораДополнительноАбонентскийОтдел = Справочники.lc_ВидыДоговоров.НайтиПоКоду("000000004");
    // ВидДоговораДополнительноПатаЗаНегативноеВоздействие = Справочники.lc_ВидыДоговоров.НайтиПоКоду("000000005");

    // Создание основных договоров
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанныхДоговора Из ТаблицаДоговоровБП77 Цикл
            НовыйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
            НовыйДоговорОбъект.Наименование = СтрокаДанныхДоговора.Наименование;
            НовыйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
            НовыйДоговорОбъект.Дата = СтрокаДанныхДоговора.ДатаВозникновенияОбязательства;

            // Поля миграции данных
            НовыйДоговорОбъект.ГП_СозданАвтоматически = Истина;
            НовыйДоговорОбъект.ГП_ИдентификаторБП77 = СформироватьСоставнойКодДоговора(
                    СтрокаДанныхДоговора.КонтрагентКод, СтрокаДанныхДоговора.ДоговорКод);

            // Вид договора (дополнительно)
            Если СтрокаДанныхДоговора.ВидДоговораКод = "00018" Тогда // Это Абонентский отдел
                НовыйДоговорОбъект.lc_ВидДоговора = ВидДоговораДополнительноАбонентскийОтдел;
            КонецЕсли;

            // Установка владельца договора
            НовыйДоговорОбъект.Владелец = СтрокаДанныхДоговора.Контрагент;

            НовыйДоговорОбъект.Записать();
            РезультатФункции.СозданныеДоговоры.Добавить(НовыйДоговорОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании договоров.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеДоговоры.Очистить();
    КонецПопытки;

    // Обновление связей
    // Если РезультатФункции.Успех И ПараметрыСоздания.ОбновлятьСвязиПослеСоздания Тогда
    //     РезультатУстановкиСвязей = УстановитьСоответствияАбонентов(Истина);
    //     Если РезультатУстановкиСвязей.Успех = Ложь Тогда
    //         ОбщегоНазначения.СообщитьПользователю(РезультатУстановкиСвязей.ТекстСообщения);
    //     КонецЕсли;
    // КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных договоров в регистр `ГП_ДоговорыП77` (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеДоговоров - Массив из Структура - Данные БП77
//  СохранятьСвязи - Булево - Если Истина, связи с договорами счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхДоговоров - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеДоговоровВРегистр(Знач ИсходныеДанныеДоговоров, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, КоличествоЗаписанныхДоговоров, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеДоговоров = Неопределено ИЛИ ИсходныеДанныеДоговоров.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийДоговора = "АвтоОбработкаНДС,ВестиУчетРасчетовУЕ";
    КлючиЧиселКонтрагента = "СтавкаШтрафныхСанкций,ОплатаДоговора,ОтражатьСуммовуюРазницуПриЗачетеАванса,ПроцентКорректировкиКурсаУЕ"
        + ",ВодаПоДог,КанПоДог,СуммаПоДог";
    КлючиДатКонтрагента = "ДатаВозникновенияОбязательства,ДатаПогашенияОбязательства,ДатаНачалаНачисленияШтрафныхСанкций"
        + ",ДатаПрекращенияНачисленияШтрафныхСанкций";

    // Транзакция записи в регистр ГП_ДоговорыБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого ДоговорБП77 Из ИсходныеДанныеДоговоров Цикл
            НаборЗаписейДоговоров = СоздатьНаборЗаписейДоговоровБП77(ДоговорБП77);

            // Данные для сохранения связанного договора записи
            СвязанныйКонтрагент = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейДоговоров.Прочитать();
                Если НаборЗаписейДоговоров.Количество() > 0 Тогда
                    СвязанныйКонтрагент = НаборЗаписейДоговоров[0].Контрагент;
                    СвязанныйКонтрагент = ?(ЗначениеЗаполнено(СвязанныйКонтрагент), СвязанныйКонтрагент, Неопределено);
                    НаборЗаписейДоговоров.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейДоговоров.Добавить();

            // Заполнение данных договора
            ЗаполнитьЗначенияСвойств(НоваяЗапись, ДоговорБП77, ,
                СтрШаблон("%1,%2,%3", КлючиУсловийДоговора, КлючиЧиселКонтрагента, КлючиДатКонтрагента));

            // Заполнение полей с преобразованием типов
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиДатКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДоговорБП77[Ключ], ЧастиДаты.Дата);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийДоговора, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(ДоговорБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДоговорБП77[Ключ]);
            КонецЦикла;

            НаборЗаписейДоговоров.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхДоговоров = РезультатФункции.КоличествоЗаписанныхДоговоров + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при загрузке данных договоров в регистр ""ГП_ДоговорыБП77"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.СообщениеОбОшибке = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоЗаписанныхДоговоров = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДоговорБП77 - Структура
//      * КонтрагентКод - Строка - Код контрагента в БП77
//      * Код - Строка - Код договора в БП77
// Возвращаемое значение:
//  - РегистрСведений.ГП_ДоговорыБП77.НаборЗаписей
Функция СоздатьНаборЗаписейДоговоровБП77(Знач ДоговорБП77) Экспорт
    НаборЗаписей = РегистрыСведений.ГП_ДоговорыБП77.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КонтрагентКод.Установить(ДоговорБП77.КонтрагентКод);
    НаборЗаписей.Отбор.Код.Установить(ДоговорБП77.Код);

    Возврат НаборЗаписей;
КонецФункции

// Получает таблицу договоров для перенесенных ГарантПлюс абонентов для создания основных договоров в ИБ
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * ДоговорКод - Строка
//      * ВидДоговораКод - Строка
//      * Наименование - Строка
//      * ДатаВозникновенияОбязательства - Дата
//      * ВидДоговораНаименование - Строка
//      * Контрагент - СправочникСсылка.Контрагенты
Функция ПолучитьТаблицуДоговоровБП77ДляСозданияНовых() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "////////////////////////////////////////////////////////////////////////////////
        |// Существующие договоры контрагентов
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
        |	ДоговорыКонтрагентов.Владелец КАК Контрагент
        |ПОМЕСТИТЬ ВТ_ДоговорыКонтрагентов
        |ИЗ
        |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |	ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
        |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Перенесенные ГарантПлюс Контрагенты с не назначенными договорами
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	Контрагенты.Ссылка КАК Контрагент,
        |	Контрагенты.ГП_СозданАвтоматически КАК ГП_СозданАвтоматически,
        |	Контрагенты.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ПеренесенныеКонтрагентыБезДоговоров
        |ИЗ
        |	Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |	Контрагенты.ЭтоГруппа = ЛОЖЬ
        |	И Контрагенты.ПометкаУдаления = ЛОЖЬ
        |	И Контрагенты.ГП_СозданАвтоматически = ИСТИНА
        |	И Контрагенты.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9]%""
        |	И НЕ Контрагенты.Ссылка В
        |				(ВЫБРАТЬ
        |					ВТ_ДоговорыКонтрагентов.Контрагент
        |				ИЗ
        |					ВТ_ДоговорыКонтрагентов)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Основные договоры абонентов для создания
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_КонтрагентыБП77.Код КАК КонтрагентКод,
        |	ГП_ДоговорыБП77.Код КАК ДоговорКод,
        |	ГП_ДоговорыБП77.ВидДоговораКод КАК ВидДоговораКод,
        |	ГП_ДоговорыБП77.Наименование КАК Наименование,
        |	ГП_ДоговорыБП77.ДатаВозникновенияОбязательства КАК ДатаВозникновенияОбязательства,
        |	ГП_ДоговорыБП77.ВидДоговораНаименование КАК ВидДоговораНаименование,
        |	ВТ_ПеренесенныеКонтрагентыБезДоговоров.Контрагент КАК Контрагент
        |ИЗ
        |	ВТ_ПеренесенныеКонтрагентыБезДоговоров КАК ВТ_ПеренесенныеКонтрагентыБезДоговоров
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |		ПО ВТ_ПеренесенныеКонтрагентыБезДоговоров.ГП_ИдентификаторБП77 = ГП_КонтрагентыБП77.Код
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ДоговорыБП77 КАК ГП_ДоговорыБП77
        |		ПО (ГП_КонтрагентыБП77.Код = ГП_ДоговорыБП77.КонтрагентКод)
        |			И (ГП_КонтрагентыБП77.ОсновнойДоговорКод = ГП_ДоговорыБП77.Код)
        |			И (ГП_ДоговорыБП77.Договор = &ПустаяСсылкаДоговор)
        |";

    Запрос.УстановитьПараметр("ПустаяСсылкаДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();

    Возврат РезультатФункции;
КонецФункции

// Формирует составной код договора (ИдентификаторБП77)
// Параметры:
//  КонтрагентКод - Строка - Код контрагента в БП77
//  ДоговорКод - Строка - Код договора в БП77
// Возвращаемое значение:
//  - Строка
Функция СформироватьСоставнойКодДоговора(Знач КонтрагентКод, Знач ДоговорКод) Экспорт
    Возврат СтрШаблон("%1_%2", КонтрагентКод, ДоговорКод);
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --
