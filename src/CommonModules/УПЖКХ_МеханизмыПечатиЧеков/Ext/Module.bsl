// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++
#Область ПереопределениеСтандартногоФункционала

&ИзменениеИКонтроль("ОбновитьСтатусыЧековВТабличнойЧасти")
Процедура ГП_ОбновитьСтатусыЧековВТабличнойЧасти(Объект, ЛицевойСчет)

	ДокументОснование = Объект.Ссылка;

	Если Не ЗначениеЗаполнено(ДокументОснование) ИЛИ Объект.ЛицевыеСчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента(Неопределено);
    НеУчитыватьЗначениеЛицевыхСчетов = Ложь;
    Если ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
        КонтрагентДокументаОплаты = Неопределено;
        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
            КонтрагентДокументаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
        Иначе
            ОбщегоНазначения.СообщитьПользователю(
                СтрШаблон(
                    "Внимание! Текущий механизм формирования чеков по контрагенту не поддерживает работу с документом ""%1"".
                    |Статусы чеков могут быть сформированы неправильно",
                    ТипЗнч(ДокументОснование)));
        КонецЕсли;

        Если ТипЗнч(КонтрагентДокументаОплаты) = Тип("СправочникСсылка.Контрагенты") И НЕ КонтрагентДокументаОплаты.Пустая() Тогда
            НеУчитыватьЗначениеЛицевыхСчетов = Истина;
        КонецЕсли;
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

	Если ЗначениеЗаполнено(ЛицевойСчет) Тогда
		СписокЛицевыхСчетов  = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", ЛицевойСчет));
		ТаблицаЛицевыхСчетов = Объект.ЛицевыеСчета.Выгрузить(СписокЛицевыхСчетов, "НомерСтроки, Объект");
	Иначе
		СписокЛицевыхСчетов  = Объект.ЛицевыеСчета;
		ТаблицаЛицевыхСчетов = Объект.ЛицевыеСчета.Выгрузить(, "НомерСтроки, Объект");
	КонецЕсли;

	Если ТаблицаЛицевыхСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЛицевыхСчетов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЛицевыхСчетов.Объект КАК ЛицевойСчет,
	|	&ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	&ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.НомерСтроки КАК НомерСтроки,
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(ФискальныеОперации.Дата) КАК Дата
	|ПОМЕСТИТЬ втДатаПоследнегоЧека
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
    #Удаление // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа
	|		ПО втЛицевыеСчета.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
    #КонецУдаления
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

	|		ПО
    |           ВЫБОР
    |               КОГДА &ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = ЛОЖЬ
    |                   ТОГДА втЛицевыеСчета.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
    |               ИНАЧЕ
    |                   // Для использования механизма формирования чеков по контрагенту документа
    |                   ФискальныеОперации.УПЖКХ_ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
    |           КОНЕЦ

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|			И втЛицевыеСчета.ДокументОснование = ФискальныеОперации.ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.НомерСтроки,
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДатаПоследнегоЧека.НомерСтроки КАК НомерСтроки,
	|	втДатаПоследнегоЧека.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитОтправлен)
	|					ИЛИ ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|				ТОГДА 2
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ОблачнаяКассаВОчереди)
	|				ТОГДА 3
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЧекПробит,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|					И (НЕ ФискальныеОперации.УПЖКХ_ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ НЕ ФискальныеОперации.УПЖКХ_ОблачнаяКассаДатаОтправки = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА 1
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитОтправлен)
	|				ТОГДА 2
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ОблачнаяКассаВОчереди)
	|					И (ФискальныеОперации.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ОтправляетОФД)
	|						ИЛИ ФискальныеОперации.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ТребуетсяОтправкаИзПрограммы))
	|				ТОГДА 3
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|					И ФискальныеОперации.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ТребуетсяОтправкаИзПрограммы)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧекОтправлен
	|ИЗ
	|	втДатаПоследнегоЧека КАК втДатаПоследнегоЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
    #Удаление // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа
	|		ПО втДатаПоследнегоЧека.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
    #КонецУдаления
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

	|		ПО
    |           ВЫБОР
    |               КОГДА &ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = ЛОЖЬ
    |                   ТОГДА втДатаПоследнегоЧека.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
    |               ИНАЧЕ
    |                   // Для использования механизма формирования чеков по контрагенту документа
    |                   ФискальныеОперации.УПЖКХ_ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
    |           КОНЕЦ

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|			И втДатаПоследнегоЧека.ДокументОснование = ФискальныеОперации.ДокументОснование
	|			И втДатаПоследнегоЧека.Дата = ФискальныеОперации.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	втДатаПоследнегоЧека.НомерСтроки,
	|	втДатаПоследнегоЧека.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетов", ТаблицаЛицевыхСчетов);
	Запрос.УстановитьПараметр("ДокументОснование",    ДокументОснование);
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    Запрос.УстановитьПараметр("ИспользуетсяФормированиеЧековПоКонтрагентуДокумента", НеУчитыватьЗначениеЛицевыхСчетов);

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

	ТаблицаФискальныхОпераций = Запрос.Выполнить().Выгрузить();

	УстановитьПривилегированныйРежим(Ложь);

	Для Каждого СтрокаТЧ Из СписокЛицевыхСчетов Цикл

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", СтрокаТЧ.НомерСтроки);

		МассивСтрокПлатежа = ТаблицаФискальныхОпераций.НайтиСтроки(ПараметрыОтбора);

		Для Каждого СтрокаТаблицы Из МассивСтрокПлатежа Цикл
			СтрокаТЧ.ЧекПробит    = СтрокаТаблицы.ЧекПробит;
			СтрокаТЧ.ЧекОтправлен = СтрокаТаблицы.ЧекОтправлен;
			Прервать;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&ИзменениеИКонтроль("АктуальныеСтатусыДокументов")
Функция ГП_АктуальныеСтатусыДокументов(СписокДокументов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Не СписокДокументов = Неопределено Тогда
		
		// Подготовим таблицу значений для обновления данных в РС "УПЖКХ_СтатусЧековВДокументе".
		ДанныеДляОбновления = Новый ТаблицаЗначений;
		
		ОписаниеТиповДокумент = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УПЖКХ_ОснованиеПробитияЧека.Тип.Типы());
		
		ДанныеДляОбновления.Колонки.Добавить("ДокументОплаты", ОписаниеТиповДокумент, "ДокументОплаты");
		
		// Заполним колонку "Документ".
		Для каждого Документ Из СписокДокументов Цикл
			НоваяСтрока = ДанныеДляОбновления.Добавить();
			НоваяСтрока.ДокументОплаты = Документ;
		КонецЦикла;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеДляОбновления.ДокументОплаты КАК ДокументОплаты
			|ПОМЕСТИТЬ врДанныеОбновления
			|ИЗ
			|	&ДанныеДляОбновления КАК ДанныеДляОбновления";
		
		Запрос.УстановитьПараметр("ДанныеДляОбновления", ДанныеДляОбновления);
		
		РезультатЗапроса = Запрос.Выполнить();
	Иначе
		// Получаем документы из РС "УПЖКХ_СтатусЧековВДокументе", у которых установлен признак
		// "ТребуетсяАктуализацияСтатуса".
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УПЖКХ_СтатусЧековВДокументе.ДокументОплаты КАК ДокументОплаты
			|ПОМЕСТИТЬ врДанныеОбновления
			|ИЗ
			|	РегистрСведений.УПЖКХ_СтатусЧековВДокументе КАК УПЖКХ_СтатусЧековВДокументе
			|ГДЕ
			|	УПЖКХ_СтатусЧековВДокументе.ТребуетсяАктуализацияСтатуса";
		
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	// Алгоритм определения статуса пробитых/отправленных чеков:
	// 1. Получаем список ссылок на документы основания пробития чеков, присоединяем к ним лицевые счета
	// из табличных частей этих же документов.
	// 2. Данные из п.1 соединяем с РС "Фискальные операции". Группируем полученную таблицу
	// по ссылкам на документы и лицевые счета. Эта промежуточная операция необходима
	// для исключаения дублей записей о фискальной операции.
	// 3. Определяем максимальные/минимальные статусы пробитых/отправленных чеков для документа.
	// При этом в документе используются следующие статусы:
	//    3.1. 0 - нет чека;
	//    3.2. 1 - ошибка при пробитии;
	//    3.3. 2 - чек пробит,
	//    3.4. 3 - обработка чека не завершена (на сервисе облачной кассы/ожидает отправки получателю).
	// 4. При определении статуса пробитых/отправленных чеков для всего документа:
	//    4.1. если максимальный статус пробития = 0, тогда 0 - нет пробитых/отправленных чеков;
	//    4.2. если максимум статус пробития = 3, тогда 3 - в документе есть необработанные чеки;
	//    4.3. если минимальный статус пробития = 2, тогда 2 - пробиты/отправленны все чеки;
	//    4.4. если максимальный статус пробития = 1 - нет пробитых/отправленных, а также необработанных,
	//         есть только с ошибками;
	//    4.5. иначе 3 - есть пробитые/отправленные, но есть и иные.
	//
	// Значение признака "Требуется актуализация статуса" определяем в соответствии с следующей логикой:
	// 1. Если все чеки документа находятся в конечном состоянии (обработанны), то актуализация не требуется.
	// 2. Если хотя бы 1 чек документа находится в промежуточном состоянии, то в дальнейшем потребуется актуализация.
	// Состояние чека определяется как промежуточное в следующих случаях:
	//  - чек в очереди на сервисе облачной кассы (ожидание пробития),
	//  - чек в статусе "пробит, не отправлен" и требуется отправка из программы (ожидание отправки).
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	врДанныеОбновления.ДокументОплаты КАК Ссылка,
	|	ЕСТЬNULL(КВП_РегистрацияОплатыЛицевыеСчета.Объект, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет
	|ПОМЕСТИТЬ втОплатыПоЛицевымСчетам
	|ИЗ
	|	врДанныеОбновления КАК врДанныеОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
    #Удаление // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа
	|		ПО врДанныеОбновления.ДокументОплаты = КВП_РегистрацияОплатыЛицевыеСчета.Ссылка
    #КонецУдаления
    #Вставка // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа ++ {

    |		ПО
    |           ВЫБОР
    |               КОГДА &ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = ЛОЖЬ
    |                   ТОГДА врДанныеОбновления.ДокументОплаты = КВП_РегистрацияОплатыЛицевыеСчета.Ссылка
    |               ИНАЧЕ
    |                   // Для использования механизма формирования чеков по контрагенту документа
    |                   ЛОЖЬ
    |           КОНЕЦ

    #КонецВставки // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа -- }
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(врДанныеОбновления.ДокументОплаты) = ТИП(Документ.КВП_РегистрацияОплаты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врДанныеОбновления.ДокументОплаты,
	|	ЕСТЬNULL(УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХЛицевыеСчета.Объект, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка))
	|ИЗ
	|	врДанныеОбновления КАК врДанныеОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.ЛицевыеСчета КАК УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХЛицевыеСчета
	|		ПО врДанныеОбновления.ДокументОплаты = УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХЛицевыеСчета.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(врДанныеОбновления.ДокументОплаты) = ТИП(Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОплатыПоЛицевымСчетам.Ссылка КАК Ссылка,
	|	втОплатыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ФискальныеОперации.Дата) КАК Дата
	|ПОМЕСТИТЬ втДатаПоследнегоЧека
	|ИЗ
	|	втОплатыПоЛицевымСчетам КАК втОплатыПоЛицевымСчетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО втОплатыПоЛицевымСчетам.Ссылка = ФискальныеОперации.ДокументОснование
	|			И втОплатыПоЛицевымСчетам.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втОплатыПоЛицевымСчетам.Ссылка,
	|	втОплатыПоЛицевымСчетам.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДатаПоследнегоЧека.Ссылка КАК Ссылка,
	|	втДатаПоследнегоЧека.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитОтправлен)
	|					ИЛИ ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|				ТОГДА 2
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ОблачнаяКассаВОчереди)
	|				ТОГДА 3
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЧекПробит,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|					И (НЕ ФискальныеОперации.УПЖКХ_ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ НЕ ФискальныеОперации.УПЖКХ_ОблачнаяКассаДатаОтправки = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА 1
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитОтправлен)
	|				ТОГДА 2
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ОблачнаяКассаВОчереди)
	|					И (ФискальныеОперации.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ОтправляетОФД)
	|						ИЛИ ФискальныеОперации.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ТребуетсяОтправкаИзПрограммы))
	|				ТОГДА 3
	|			КОГДА ФискальныеОперации.УПЖКХ_СтатусЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|					И ФискальныеОперации.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ТребуетсяОтправкаИзПрограммы)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧекОтправлен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ФискальныеОперации.УПЖКХ_СтатусЧека, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ОблачнаяКассаВОчереди)
	|					ИЛИ ЕСТЬNULL(ФискальныеОперации.УПЖКХ_СтатусЧека, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|						И ЕСТЬNULL(ФискальныеОперации.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОблачнаяКассаСостояниеОтправкиЧека.ТребуетсяОтправкаИзПрограммы)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуетсяАктуализацияСтатуса
	|ПОМЕСТИТЬ втФискальныеОперацииПоОплатамПредварительная
	|ИЗ
	|	втДатаПоследнегоЧека КАК втДатаПоследнегоЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО втДатаПоследнегоЧека.Ссылка = ФискальныеОперации.ДокументОснование
    #Вставка // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа ++ {

    |           И ВЫБОР
    |               КОГДА &ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = ЛОЖЬ
    |                   ТОГДА втДатаПоследнегоЧека.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
    |               ИНАЧЕ
    |                   // Для использования механизма формирования чеков по контрагенту документа
    |                   ФискальныеОперации.УПЖКХ_ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
    |           КОНЕЦ

    #КонецВставки // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа -- }
    #Удаление // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа
	|			И втДатаПоследнегоЧека.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
    #КонецУдаления
	|			И втДатаПоследнегоЧека.Дата = ФискальныеОперации.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	втДатаПоследнегоЧека.Ссылка,
	|	втДатаПоследнегоЧека.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФискальныеОперацииПоОплатамПредварительная.Ссылка КАК Ссылка,
	|	МИНИМУМ(втФискальныеОперацииПоОплатамПредварительная.ЧекПробит) КАК МинЧекПробит,
	|	МАКСИМУМ(втФискальныеОперацииПоОплатамПредварительная.ЧекПробит) КАК МаксЧекПробит,
	|	МИНИМУМ(втФискальныеОперацииПоОплатамПредварительная.ЧекОтправлен) КАК МинЧекОтправлен,
	|	МАКСИМУМ(втФискальныеОперацииПоОплатамПредварительная.ЧекОтправлен) КАК МаксЧекОтправлен,
	|	МАКСИМУМ(втФискальныеОперацииПоОплатамПредварительная.ТребуетсяАктуализацияСтатуса) КАК ТребуетсяАктуализацияСтатуса
	|ПОМЕСТИТЬ втФискальныеОперацииПоОплатам
	|ИЗ
	|	втФискальныеОперацииПоОплатамПредварительная КАК втФискальныеОперацииПоОплатамПредварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	втФискальныеОперацииПоОплатамПредварительная.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДанныеОбновления.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(втФискальныеОперацииПоОплатам.ТребуетсяАктуализацияСтатуса, ЛОЖЬ) КАК ТребуетсяАктуализацияСтатуса,
	|	ВЫБОР
	|		КОГДА втФискальныеОперацииПоОплатам.МаксЧекПробит = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыПробитияЧековДляДокумента.НетПробитых)
	|		КОГДА втФискальныеОперацииПоОплатам.МаксЧекПробит = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыПробитияЧековДляДокумента.ПробитаЧастьЧеков)
	|		КОГДА втФискальныеОперацииПоОплатам.МинЧекПробит = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыПробитияЧековДляДокумента.ПробитыВсеЧеки)
	|		КОГДА втФискальныеОперацииПоОплатам.МаксЧекПробит = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыПробитияЧековДляДокумента.ТолькоСОшибками)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыПробитияЧековДляДокумента.ПробитаЧастьЧеков)
	|	КОНЕЦ КАК СтатусПробитияЧека,
	|	ВЫБОР
	|		КОГДА втФискальныеОперацииПоОплатам.МаксЧекОтправлен = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыОтправкиЧековДляДокумента.НетОтправленных)
	|		КОГДА втФискальныеОперацииПоОплатам.МаксЧекОтправлен = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыОтправкиЧековДляДокумента.ОтправленаЧастьЧеков)
	|		КОГДА втФискальныеОперацииПоОплатам.МинЧекОтправлен = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыОтправкиЧековДляДокумента.ОтправленыВсеЧеки)
	|		КОГДА втФискальныеОперацииПоОплатам.МаксЧекОтправлен = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыОтправкиЧековДляДокумента.ТолькоСОшибками)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыОтправкиЧековДляДокумента.ОтправленаЧастьЧеков)
	|	КОНЕЦ КАК СтатусОтправкиЧека
	|ИЗ
	|	врДанныеОбновления КАК врДанныеОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФискальныеОперацииПоОплатам КАК втФискальныеОперацииПоОплатам
	|		ПО врДанныеОбновления.ДокументОплаты = втФискальныеОперацииПоОплатам.Ссылка";
    
    #Вставка // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа ++ {

    ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента(Неопределено);
    Запрос.УстановитьПараметр("ИспользуетсяФормированиеЧековПоКонтрагентуДокумента", ИспользуетсяФормированиеЧековПоКонтрагентуДокумента);

    #КонецВставки // Гарант+ Килипенко 10.04.2025 [F00235125] Печать чеков по контрагенту документа -- }
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти // ПереопределениеСтандартногоФункционала
// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++
#Область ПрограммныйИнтерфейс

// Параметры:
//  Период - Дата, Неопределено - Не используется в текущей реализации
// Возвращаемое значение:
//  - Булево
&НаСервере
Функция ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента(Знач Период = Неопределено) Экспорт
    Возврат Константы.ГП_ФормироватьЧекиЖКХПоКонтрагентуДокумента.Получить();
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
