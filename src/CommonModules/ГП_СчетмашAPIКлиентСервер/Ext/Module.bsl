#Область ПрограммныйИнтерфейс

Функция ВремяЖизниТокенаСек() Экспорт
    Возврат 60 * 60 * 23;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - ПеречислениеСсылка.ПризнакиПредметаРасчета
//      * Значение - Число
Функция ПолучитьСоответствиеПризнаковПредметаРасчетаСчетмаш() Экспорт
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар"), 1);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар"), 2);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа"), 3);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга"), 4);
    // ...
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Платеж"), 10);

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - ПеречислениеСсылка.ПризнакиПредметаРасчета
//      * Значение - Число
Функция ПолучитьСоответствиеПризнаковСпособаРасчетаСчетмаш() Экспорт
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная"), 1);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная"), 2);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс"), 3);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой"), 4);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"), 5);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты"), 6);
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита"), 7);

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - ПеречислениеСсылка.СтавкиНДС
//      * Значение - Строка
Функция ПолучитьСоответствиеСтавокНДССчетмаш() Экспорт
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"), "vat20");
    РезультатФункции.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"), "vat120");

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Значение - ПеречислениеСсылка.ПризнакиПредметаРасчета, Число
// Возвращаемое значение:
//  - ПеречислениеСсылка.ПризнакиПредметаРасчета, Число, Неопределено
Функция ПолучитьПризнакПредметаРасчетаСчетмашПоЗначению(Знач Значение) Экспорт
    РезультатФункции = Неопределено;

    СоответствиеЗначений = ПолучитьСоответствиеПризнаковПредметаРасчетаСчетмаш();
    Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ПризнакиПредметаРасчета") Тогда
        НайденноеЗначение = СоответствиеЗначений.Получить(Значение);
        РезультатФункции = НайденноеЗначение;
    ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
        Для Каждого ЭлементКЗ Из СоответствиеЗначений Цикл
            Если ЭлементКЗ.Значение = Значение Тогда
                РезультатФункции = ЭлементКЗ.Ключ;
                Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Значение - ПеречислениеСсылка.ПризнакиСпособаРасчета, Число
// Возвращаемое значение:
//  - ПеречислениеСсылка.ПризнакиСпособаРасчета, Число, Неопределено
Функция ПолучитьПризнакСпособаРасчетаСчетмашПоЗначению(Знач Значение) Экспорт
    РезультатФункции = Неопределено;

    СоответствиеЗначений = ПолучитьСоответствиеПризнаковСпособаРасчетаСчетмаш();
    Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ПризнакиСпособаРасчета") Тогда
        НайденноеЗначение = СоответствиеЗначений.Получить(Значение);
        РезультатФункции = НайденноеЗначение;
    ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
        Для Каждого ЭлементКЗ Из СоответствиеЗначений Цикл
            Если ЭлементКЗ.Значение = Значение Тогда
                РезультатФункции = ЭлементКЗ.Ключ;
                Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Значение - ПеречислениеСсылка.СтавкиНДС, Строка
// Возвращаемое значение:
//  - ПеречислениеСсылка.СтавкиНДС, Строка, Неопределено
Функция ПолучитьСтавкуНДССчетмашПоЗначению(Знач Значение) Экспорт
    РезультатФункции = Неопределено;

    СоответствиеЗначений = ПолучитьСоответствиеСтавокНДССчетмаш();
    Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
        НайденноеЗначение = СоответствиеЗначений.Получить(Значение);
        РезультатФункции = НайденноеЗначение;
    ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
        Для Каждого ЭлементКЗ Из СоответствиеЗначений Цикл
            Если ЭлементКЗ.Значение = Значение Тогда
                РезультатФункции = ЭлементКЗ.Ключ;
                Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ФиксированнаяСтруктура
//      * Приход - Строка
//      * ВозвратПрихода - Строка
//      * Расход - Строка
//      * ВозвратРасхода - Строка
Функция НовыйТипыОперацииРегистрацииЧека() Экспорт
    РезультатФункции = Новый Структура;
    РезультатФункции.Вставить("Приход", "sell");
    РезультатФункции.Вставить("ВозвратПрихода", "sell_refund");
    РезультатФункции.Вставить("Расход", "buy");
    РезультатФункции.Вставить("ВозвратРасхода", "buy_refund");
    РезультатФункции.Вставить("КоррекцияПрихода", "sell_correction");
    РезультатФункции.Вставить("КоррекцияРасхода", "buy_correction");

    Возврат Новый ФиксированнаяСтруктура(РезультатФункции);
КонецФункции

Функция НовыйСтруктураРегистрацииЧескаСчетмаш(Знач ТолькоОбязательныеПоля = Истина) Экспорт
    ДанныеДляОтправкиСчетмаш = Новый Структура("timestamp, external_id, service, receipt");

    ДанныеДляОтправкиСчетмаш.service = Новый Структура;
    Если ТолькоОбязательныеПоля = Ложь Тогда
        НеобязательныеПоляАтрибутов = Новый Структура;
        НеобязательныеПоляАтрибутов.Вставить("callback_url", "");

        Для Каждого ЭлементКЗ Из НеобязательныеПоляАтрибутов Цикл
            ДанныеДляОтправкиСчетмаш.service.Добавить(ЭлементКЗ.Ключ, ЭлементКЗ.Значение);
        КонецЦикла;
    КонецЕсли;

    ДанныеДляОтправкиСчетмаш.receipt = НовыйСтруктураЧекаРегистрацииЧескаСчетмаш(ТолькоОбязательныеПоля);

    Возврат ДанныеДляОтправкиСчетмаш;
КонецФункции

Функция НовыйСтруктураРасшифровкиСтрокиОплатыРегистрацииЧескаСчетмаш(Знач Удалить_ТолькоОбязательныеПоля = Истина) Экспорт
    РезультатФункции = Новый Структура; // payments

    РезультатФункции.Вставить("name", ""); // Название товара
    РезультатФункции.Вставить("type",
        ПолучитьПризнакПредметаРасчетаСчетмашПоЗначению(
            ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга"))); // Услуга
    РезультатФункции.Вставить("mode",
        ПолучитьПризнакСпособаРасчетаСчетмашПоЗначению(
            ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")));
    РезультатФункции.Вставить("price", 0); // Цена с учётом скидок
    РезультатФункции.Вставить("quantity", 0); // Количество
    РезультатФункции.Вставить("sum", 0); // Сумма
    РезультатФункции.Вставить("tax", "none"); // Ставка НДС
    РезультатФункции.Вставить("tax_sum", 0); // Сумма НДС

    Возврат РезультатФункции;
КонецФункции

Функция НовыйСтруктураСтрокиОплатыРегистрацииЧескаСчетмаш(Знач Удалить_ТолькоОбязательныеПоля = Истина) Экспорт
    РезультатФункции = Новый Структура; // payments

    РезультатФункции.Вставить("type", 1); // Вид оплаты (электронный)
    РезультатФункции.Вставить("sum", 1); // Сумма к оплате в рублях

    Возврат РезультатФункции;
КонецФункции

Функция НовыйСтруктураЧекаРегистрацииЧескаСчетмаш(Знач ТолькоОбязательныеПоля = Истина) Экспорт
    РезультатФункции = Новый Структура("attributes, items, total, payments");

    РезультатФункции.attributes = Новый Структура("email, phone", "", "");
    Если ТолькоОбязательныеПоля = Ложь Тогда
        НеобязательныеПоляАтрибутов = Новый Структура;
        НеобязательныеПоляАтрибутов.Вставить("name", "");
        НеобязательныеПоляАтрибутов.Добавить("inn", "");

        Для Каждого ЭлементКЗ Из НеобязательныеПоляАтрибутов Цикл
            РезультатФункции.attributes.Добавить(ЭлементКЗ.Ключ, ЭлементКЗ.Значение);
        КонецЦикла;
    КонецЕсли;

    РезультатФункции.items = Новый Массив;
    РезультатФункции.total = 0; // Сумма по чеку
    РезультатФункции.payments = Новый Массив;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
