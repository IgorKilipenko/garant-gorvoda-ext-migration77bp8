// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) ++
#Область ПрограммныйИнтерфейс

// Параметры:
//  ДанныеАутентификации - Структура
//      * Логин - Строка
//      * Пароль - Строка
//  Параметры - Структура
//      * ОбновлятьПринудительно - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ДатаВремяПолученияТокена - Дата, Неопределено
//      * Токен - Строка
Функция ПолучитьТокен(Знач ДанныеАутентификации, Знач Параметры) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("ДатаВремяПолученияТокена");
    РезультатФункции.Вставить("Токен", "");

    // Получение данных токена из хранилища
    НужноОбновитьТокен = Истина;
    СтруктураДанныхБезопасногоХраненияДанныхТокена = НовыйСтруктураДанныхБезопасногоХраненияДанныхТокена();
    РезультатЧтенияДанныхТокена = ПрочитатьДанныеИзБезопасногоХранилища(
            СтруктураДанныхБезопасногоХраненияДанныхТокена, ДанныеАутентификации.Логин);
    НужноОбновитьТокен = ТипЗнч(РезультатЧтенияДанныхТокена) <> Тип("Структура")
        ИЛИ ПустаяСтрока(РезультатЧтенияДанныхТокена.Токен)
        ИЛИ РезультатЧтенияДанныхТокена.ДатаОкончания = Неопределено
        ИЛИ (РезультатЧтенияДанныхТокена.ДатаОкончания <> Неопределено
            И РезультатЧтенияДанныхТокена.ДатаОкончания <= ТекущаяДатаСеанса());

    Если НужноОбновитьТокен = Ложь Тогда
        РезультатФункции.Токен = РезультатЧтенияДанныхТокена.Токен;
        РезультатФункции.ДатаВремяПолученияТокена = РезультатЧтенияДанныхТокена.ДатаСоздания;

        Если НЕ Параметры.Свойство("ОбновлятьПринудительно") ИЛИ НЕ Параметры.ОбновлятьПринудительно Тогда
            Возврат РезультатФункции; // Токен получен из хранилища

        Иначе
            // Принудительное обновление токена
            НужноОбновитьТокен = Истина;
        КонецЕсли;
    КонецЕсли;

    // Обновление токена
    Если НужноОбновитьТокен = Истина Тогда
        РезультатОбновленияТокена = ОбновитьТокен(ДанныеАутентификации,
            Новый Структура("Токен, ДатаВремяПолученияТокена", РезультатФункции.Токен, РезультатФункции.ДатаВремяПолученияТокена));

        Если РезультатОбновленияТокена <> Неопределено Тогда
            Если РезультатОбновленияТокена.Успех = Ложь Тогда
                // Ошибка обновления токена
                РезультатФункции.Успех = Ложь;
                РезультатФункции.ТекстСообщения = РезультатОбновленияТокена.ТекстСообщения;
            Иначе
                // Успех. Токен обновлен
                РезультатФункции.Успех = Истина;
                РезультатФункции.Токен = РезультатОбновленияТокена.Токен;
                РезультатФункции.ДатаВремяПолученияТокена = РезультатОбновленияТокена.ДатаВремяПолученияТокена;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДанныеАутентификации - Структура
//      * Логин - Строка
//      * Пароль - Строка
//  ДанныеТокенаИзХранилища - Структура, Неопределено
//      * Токен - Строка, Неопределено
//      * ДатаВремяПолученияТокена - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ДатаВремяПолученияТокена - Дата, Неопределено
//      * Токен - Строка
Функция ОбновитьТокен(Знач ДанныеАутентификации, Знач ДанныеТокенаИзХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("ДатаВремяПолученияТокена");
    РезультатФункции.Вставить("Токен", "");

    ШаблонСообщенияОшибкиЗапросаТокена =
        "Ошибка получения токена.
        |Информация: %1";

    ТелоЗапросаJSON = ЗаписатьЗначениеJSON(Новый Структура("login, password", ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль));

    HTTPСоединение = НовыйHTTPСоединениеСчетмаш();
    ЗапросPOST = НовыйHTTPЗапросТокенаСчетмаш(ТелоЗапросаJSON);

    HTTPОтвет = Неопределено;
    Попытка
        HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ЗапросPOST);
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапросаТокена,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции; // Ошибка получения токена
    КонецПопытки;

    Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния <> 200 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапросаТокена,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    Иначе
        СтрокаТелаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
        СтруктураТелаОтвета = ПрочитатьЗначениеJSON(?(СтрокаТелаОтвета = Неопределено, "{}", СтрокаТелаОтвета));
        ЭтоВалиднаяСтруктураОтвета = ТипЗнч(СтруктураТелаОтвета) = Тип("Структура")
            И СтруктураТелаОтвета.Свойство("message") И СтруктураТелаОтвета.Свойство("code") И СтруктураТелаОтвета.Свойство("token");
        Если ЭтоВалиднаяСтруктураОтвета = Ложь Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    ШаблонСообщенияОшибкиЗапросаТокена, "Ошибка структуры ответа сервера");

        ИначеЕсли СтруктураТелаОтвета.code = 1 ИЛИ ТипЗнч(СтруктураТелаОтвета.token) <> Тип("Строка") Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Ошибка структуры ответа токена.
                    |Сообщение сервера: (код: %1) %2", Строка(СтруктураТелаОтвета.code), Строка(СтруктураТелаОтвета.message));

        Иначе
            РезультатФункции.Токен = СтруктураТелаОтвета.token;
            РезультатФункции.ДатаВремяПолученияТокена = ТекущаяДатаСеанса();
            Если ТипЗнч(ДанныеТокенаИзХранилища) = Тип("Структура")
                    И ДанныеТокенаИзХранилища.Токен = СтруктураТелаОтвета.token
                    И ТипЗнч(ДанныеТокенаИзХранилища.ДатаВремяПолученияТокена) = Тип("Дата")
                    И ЗначениеЗаполнено(ДанныеТокенаИзХранилища.ДатаВремяПолученияТокена) Тогда

                    РезультатФункции.ДатаВремяПолученияТокена = ДанныеТокенаИзХранилища.ДатаВремяПолученияТокена;
            КонецЕсли;

            // Запись данных токена в хранилище
            СтруктураДанныхБезопасногоХраненияДанныхТокена = НовыйСтруктураДанныхБезопасногоХраненияДанныхТокена();
            СтруктураДанныхБезопасногоХраненияДанныхТокена.Данные.Токен = РезультатФункции.Токен;
            СтруктураДанныхБезопасногоХраненияДанныхТокена.Данные.ДатаСоздания = РезультатФункции.ДатаВремяПолученияТокена;
            СтруктураДанныхБезопасногоХраненияДанныхТокена.Данные.ДатаОкончания =
                РезультатФункции.ДатаВремяПолученияТокена + ВремяЖизниТокенаСек();
            ЗаписатьДанныеВБезопасноеХранилище(
                СтруктураДанныхБезопасногоХраненияДанныхТокена, ДанныеАутентификации.Логин);
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция НовыйHTTPСоединениеСчетмаш() Экспорт
    Возврат Новый HTTPСоединение("online.schetmash.com", , , , , 5, Новый ЗащищенноеСоединениеOpenSSL);
КонецФункции

Функция НовыйHTTPЗапросТокенаСчетмаш(Знач СтрокаJSON) Экспорт
    ЗапросPOST = Новый HTTPЗапрос("/lk/api/v1/token");
    ЗапросPOST.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗапросPOST.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

    Возврат ЗапросPOST;
КонецФункции

Функция НовыйHTTPЗапросСтатусаЧекаСчетмаш(Знач СтруктураИдентификатора, Знач ИдентификаторМагазина, Знач Токен) Экспорт
    ПутьЗапроса = "/lk/api/v1/" + ИдентификаторМагазина + "/" + "report";

    Если СтруктураИдентификатора.Свойство("id") Тогда
        ПутьЗапроса = СтрШаблон("%1/%2?", ПутьЗапроса, СтруктураИдентификатора.id);
    Иначе
        ПутьЗапроса = СтрШаблон("%1?external_id=%2&", ПутьЗапроса, СтруктураИдентификатора.external_id);
    КонецЕсли;

    ПутьЗапроса = ПутьЗапроса + "token=" + Токен;

    ЗапросGET = Новый HTTPЗапрос(ПутьЗапроса);
    ЗапросGET.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");

    Возврат ЗапросGET;
КонецФункции

// Параметры:
//  ЛогинПользователяСчетмаш - Строка
// Возвращаемое значение:
//  - Структура
Функция ПроверитьСоединениеСчетмаш(Знач ЛогинПользователяСчетмаш, Знач ОбновлятьПринудительно = Ложь) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Ложь);

    РезультатПолучения = ПолучитьТокен(Новый Структура("Логин, Пароль",
                ЛогинПользователяСчетмаш,
                Константы.ГП_КлючАвторизацииСчетмаш.ПолучитьКлючДоступа(ЭтоДемоЛогинСчетмаш(ЛогинПользователяСчетмаш))),
            Новый Структура("ОбновлятьПринудительно", ОбновлятьПринудительно));

    РезультатФункции.Успех = РезультатПолучения.Успех;
    РезультатФункции.ТекстСообщения = РезультатПолучения.ТекстСообщения;
    Возврат РезультатФункции;
КонецФункции

Функция НовыйHTTPЗапросРегистрацииЧекаСчетмаш(Знач СтрокаJSON, Знач ТипОперации, Знач ИдентификаторМагазина, Знач Токен)
    ЗапросPOST = Новый HTTPЗапрос("/lk/api/v1/" + ИдентификаторМагазина + "/" + ТипОперации + "?" + "token=" + Токен);
    ЗапросPOST.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗапросPOST.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Авто);
    Возврат ЗапросPOST;
КонецФункции

Функция ВыполнитьРегистрациюЧека(Знач ДанныеЧека, Знач ТипОперации, Знач ИдентификаторМагазина, Знач ЛогинПользователяСчетмаш) Экспорт
    РезультатФункции = Новый Структура("Успех, ДанныеОтвета, ТекстСообщения", Истина);

    Токен = Неопределено;
    РезультатПроверки = ВыполнитьПроверкуВозможностиВыполненияЗапросаСчетмаш(ЛогинПользователяСчетмаш);
    Если РезультатПроверки.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = РезультатПроверки.ТекстСообщения;

        Возврат РезультатПроверки;
    Иначе
        Токен = РезультатПроверки.Токен;
    КонецЕсли;

    HTTPСоединение = НовыйHTTPСоединениеСчетмаш();
    ШаблонСообщенияОшибкиЗапроса =
        "Ошибка получения токена.
        |Информация: %1";
    HTTPОтвет = Неопределено;
    ЗапросPOST = Неопределено;
    Попытка
        ЗапросPOST = НовыйHTTPЗапросРегистрацииЧекаСчетмаш(
                ЗаписатьЗначениеJSON(ДанныеЧека), ТипОперации, ИдентификаторМагазина, Токен);
        HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ЗапросPOST);
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапроса,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции; // Ошибка получения токена
    КонецПопытки;

    Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния <> 200 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапроса,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции;
    КонецЕсли;

    СтрокаТелаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
    СтруктураТелаОтвета = ПрочитатьJSONИзСтрокиСчетмаш(?(СтрокаТелаОтвета = Неопределено, "{}", СтрокаТелаОтвета));

    Если СтруктураТелаОтвета.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Строка JSON: %2", СтруктураТелаОтвета.ТекстСообщения, Строка(СтрокаТелаОтвета));
        Возврат РезультатФункции; // Ошибка чтения ответа сервера

    Иначе
        СтруктураТелаОтвета = СтруктураТелаОтвета.Значение;
    КонецЕсли;

    ЭтоВалиднаяСтруктураОтветаСтатуса = ТипЗнч(СтруктураТелаОтвета) = Тип("Структура")
        И (СтруктураТелаОтвета.Свойство("id") И СтруктураТелаОтвета.Свойство("status"));

    ЭтоВалиднаяСтруктураОтветаОшибкиСтатуса = ТипЗнч(СтруктураТелаОтвета) = Тип("Структура")
        И (СтруктураТелаОтвета.Свойство("code") И СтруктураТелаОтвета.Свойство("message"));

    Если ЭтоВалиднаяСтруктураОтветаСтатуса Тогда
        Если СтруктураТелаОтвета.status = "accept" Тогда // Чек в обработке
            РезультатФункции.ТекстСообщения = "Чек в обработке";

        ИначеЕсли СтруктураТелаОтвета.status = "processing" Тогда
            РезультатФункции.ТекстСообщения = "Чек принят в обработку";

        ИначеЕсли СтруктураТелаОтвета.status = "fail" Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = "Ошибка печати чека";
        КонецЕсли;

        РезультатФункции.ДанныеОтвета = Новый Структура("Идентификатор", СтруктураТелаОтвета.id);
        РезультатФункции.ДанныеОтвета.Вставить("Статус", СтруктураТелаОтвета.status);

    ИначеЕсли ЭтоВалиднаяСтруктураОтветаОшибкиСтатуса Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = Строка(СтруктураТелаОтвета.message);
        РезультатФункции.ДанныеОтвета = Новый Структура("КодОшибки", СтруктураТелаОтвета.code);
        РезультатФункции.ДанныеОтвета.Вставить("Сообщение", СтруктураТелаОтвета.message);

    Иначе
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "Ошибка структуры ответа сервера счетмаш";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСтатусЧекаСчетмаш(Знач СтруктураИдентификатора, Знач ИдентификаторМагазина, Знач ЛогинПользователяСчетмаш) Экспорт
    РезультатФункции = Новый Структура("Успех, ДанныеОтвета, ТекстСообщения", Истина);

    Токен = Неопределено;
    РезультатПроверки = ВыполнитьПроверкуВозможностиВыполненияЗапросаСчетмаш(ЛогинПользователяСчетмаш);
    Если РезультатПроверки.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = РезультатПроверки.ТекстСообщения;

        Возврат РезультатПроверки;
    Иначе
        Токен = РезультатПроверки.Токен;
    КонецЕсли;

    HTTPСоединение = НовыйHTTPСоединениеСчетмаш();
    ШаблонСообщенияОшибкиЗапроса =
        "Ошибка получения статуса чека.
        |Информация: %1";
    HTTPОтвет = Неопределено;
    ЗапросGET = Неопределено;
    Попытка
        ЗапросGET = НовыйHTTPЗапросСтатусаЧекаСчетмаш(СтруктураИдентификатора, ИдентификаторМагазина, Токен);
        HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", ЗапросGET);
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапроса,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции; // Ошибка получения токена
    КонецПопытки;

    Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния <> 200 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапроса,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции;
    КонецЕсли;

    СтрокаТелаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
    СтруктураТелаОтвета = ПрочитатьJSONИзСтрокиСчетмаш(?(СтрокаТелаОтвета = Неопределено, "{}", СтрокаТелаОтвета));

    Если СтруктураТелаОтвета.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Строка JSON: %2", СтруктураТелаОтвета.ТекстСообщения, Строка(СтрокаТелаОтвета));
        Возврат РезультатФункции; // Ошибка чтения ответа сервера

    Иначе
        СтруктураТелаОтвета = СтруктураТелаОтвета.Значение;
    КонецЕсли;

    ЭтоВалиднаяСтруктураОтветаСтатуса = ТипЗнч(СтруктураТелаОтвета) = Тип("Структура")
        И (СтруктураТелаОтвета.Свойство("id") И СтруктураТелаОтвета.Свойство("status")
            //И СтруктураТелаОтвета.Свойство("payload") И СтруктураТелаОтвета.Свойство("timestamp")
        );

    ЭтоВалиднаяСтруктураОтветаОшибкиСтатуса = ТипЗнч(СтруктураТелаОтвета) = Тип("Структура")
        И (СтруктураТелаОтвета.Свойство("code") И СтруктураТелаОтвета.Свойство("message"));

    Если ЭтоВалиднаяСтруктураОтветаСтатуса Тогда
        Если СтруктураТелаОтвета.status = "success" Тогда // Чек успешно напечатан
            РезультатФункции.ТекстСообщения = "Чек успешно напечатан";
        ИначеЕсли СтруктураТелаОтвета.status = "accept" Тогда // Чек в обработке
            РезультатФункции.ТекстСообщения = "Чек в обработке";
        ИначеЕсли СтруктураТелаОтвета.status = "fail" Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = "Ошибка печати чека";
        КонецЕсли;
        РезультатФункции.ДанныеОтвета = Новый Структура("Идентификатор", СтруктураТелаОтвета.id);
        РезультатФункции.ДанныеОтвета.Вставить("Статус", СтруктураТелаОтвета.status);
        РезультатФункции.ДанныеОтвета.Вставить("МоментВремени",
            ?(СтруктураТелаОтвета.Свойство("timestamp"), СтруктураТелаОтвета.timestamp, Неопределено));
        РезультатФункции.ДанныеОтвета.Вставить("Данные",
            ?(СтруктураТелаОтвета.Свойство("payload"), СтруктураТелаОтвета.payload, Неопределено));

    ИначеЕсли ЭтоВалиднаяСтруктураОтветаОшибкиСтатуса Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = Строка(СтруктураТелаОтвета.message);
        РезультатФункции.ДанныеОтвета = Новый Структура("КодОшибки", СтруктураТелаОтвета.code);
        РезультатФункции.ДанныеОтвета.Вставить("Сообщение", СтруктураТелаОтвета.message);

    Иначе
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "Ошибка структуры ответа сервера счетмаш";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция ПрочитатьJSONИзСтрокиСчетмаш(Знач СтрокаJSON) Экспорт
    РезультатФункции = Новый Структура("Успех, Значение, ТекстСообщения", Истина);

    Попытка
        РезультатФункции.Значение = ПрочитатьЗначениеJSON(СтрокаJSON);
        Если ТипЗнч(РезультатФункции.Значение) = Тип("Структура") И РезультатФункции.Значение.Свойство("timestamp") Тогда
            РезультатФункции.Значение.timestamp = СтрокаВДату(РезультатФункции.Значение.timestamp);
        КонецЕсли;
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.Значение = Неопределено;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка разбора строки JSON.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция НовыйСтруктураДанныхБезопасногоХраненияДанныхТокена() Экспорт
    РезультатФункции = Новый Структура("Владелец", Неопределено);
    РезультатФункции.Вставить("БазовыйВладелец", "ГП_APIСервисСчетмашОнлайнВ2");
    РезультатФункции.Вставить("КлючДанных", "ТОКЕН");
    РезультатФункции.Вставить("Данные", Новый Структура("Токен, ДатаСоздания, ДатаОкончания"));

    Возврат РезультатФункции;
КонецФункции

Функция ЗаписатьДанныеВБезопасноеХранилище(Знач СтруктураДанныхБезопасногоХраненияДанных, Знач Логин) Экспорт
    СтруктураДанныхБезопасногоХраненияДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанныхБезопасногоХраненияДанных);
    СтруктураДанныхБезопасногоХраненияДанных.Владелец = ПолучитьКлючВладельцаХранилищаДанных(
            СтруктураДанныхБезопасногоХраненияДанных.БазовыйВладелец, Логин);

    ДатаСоздания = СтруктураДанныхБезопасногоХраненияДанных.Данные.ДатаСоздания;
    ДатаСоздания = ?(ДатаСоздания = Неопределено, "", Формат(ДатаСоздания, "ДФ='yyyy.MM.dd hh:mm:ss'"));
    СтруктураДанныхБезопасногоХраненияДанных.Данные.ДатаСоздания = ДатаСоздания;

    ДатаОкончания = СтруктураДанныхБезопасногоХраненияДанных.Данные.ДатаОкончания;
    ДатаОкончания = ?(ДатаОкончания = Неопределено, "", Формат(ДатаОкончания, "ДФ='yyyy.MM.dd hh:mm:ss'"));
    СтруктураДанныхБезопасногоХраненияДанных.Данные.ДатаОкончания = ДатаОкончания;

    УстановитьПривилегированныйРежим(Истина);

    СтруктураДанныхБезопасногоХраненияДанных.Данные = ЗаписатьЗначениеJSON(СтруктураДанныхБезопасногоХраненияДанных.Данные);
    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
        СтруктураДанныхБезопасногоХраненияДанных.Владелец,
        СтруктураДанныхБезопасногоХраненияДанных.Данные,
        СтруктураДанныхБезопасногоХраненияДанных.КлючДанных);

    УстановитьПривилегированныйРежим(Ложь);

    Возврат Истина;
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция ПрочитатьДанныеИзБезопасногоХранилища(Знач СтруктураДанныхБезопасногоХраненияДанных, Знач Логин) Экспорт
    РезультатФункции = Неопределено;

    СтруктураДанныхБезопасногоХраненияДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанныхБезопасногоХраненияДанных);
    СтруктураДанныхБезопасногоХраненияДанных.Владелец = ПолучитьКлючВладельцаХранилищаДанных(
            СтруктураДанныхБезопасногоХраненияДанных.БазовыйВладелец, Логин);

    УстановитьПривилегированныйРежим(Истина);

    РезультатФункции = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
            СтруктураДанныхБезопасногоХраненияДанных.Владелец,
            СтруктураДанныхБезопасногоХраненияДанных.КлючДанных, Истина);

    УстановитьПривилегированныйРежим(Ложь);

    Если РезультатФункции <> Неопределено Тогда
        РезультатФункции = ПрочитатьЗначениеJSON(РезультатФункции);

        ДатаСоздания = РезультатФункции.ДатаСоздания;
        ДатаСоздания = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСоздания, ЧастиДаты.ДатаВремя);
        РезультатФункции.ДатаСоздания = ДатаСоздания;

        ДатаОкончания = РезультатФункции.ДатаОкончания;
        ДатаОкончания = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаОкончания, ЧастиДаты.ДатаВремя);
        РезультатФункции.ДатаОкончания = ДатаОкончания;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция НовыйПользовательСчетмаш() Экспорт
    Возврат Новый Структура("Наименование, Логин");
КонецФункции

Функция ПолучитьДемоПользователяСчетмаш() Экспорт
    ПользовательСчетмаш = НовыйПользовательСчетмаш();
    ПользовательСчетмаш.Наименование = "Демо";
    ПользовательСчетмаш.Логин = "test_api";
    Возврат ПользовательСчетмаш;
КонецФункции

Функция ПолучитьОсновногоПользователяСчетмаш() Экспорт
    ПользовательСчетмаш = НовыйПользовательСчетмаш();
    ПользовательСчетмаш.Наименование = "Основной";
    ПользовательСчетмаш.Логин = "wkx_53";
    Возврат ПользовательСчетмаш;
КонецФункции

Функция ПолучитьПользователейСчетмаш() Экспорт
    РезультатФункции = Новый Соответствие;

    // Демо доступ
    ПользовательСчетмаш = ПолучитьДемоПользователяСчетмаш();
    РезультатФункции.Вставить(ПользовательСчетмаш.Наименование, ПользовательСчетмаш);

    // Основной доступ
    ПользовательСчетмаш = ПолучитьОсновногоПользователяСчетмаш();
    РезультатФункции.Вставить(ПользовательСчетмаш.Наименование, ПользовательСчетмаш);

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Логин - Строка
// Возвращаемое значение:
// - Булево
Функция ЭтоДемоЛогинСчетмаш(Знач Логин) Экспорт
    ДемоПользовательСчетмаш = ПолучитьДемоПользователяСчетмаш();
    Возврат (Логин = ДемоПользовательСчетмаш.Логин);
КонецФункции

Функция ВремяЖизниТокенаСек() Экспорт
    Возврат ГП_СчетмашAPIКлиентСервер.ВремяЖизниТокенаСек();
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - ПеречислениеСсылка.ПризнакиПредметаРасчета
//      * Значение - Число
Функция ПолучитьСоответствиеПризнаковПредметаРасчетаСчетмаш() Экспорт
    Возврат ГП_СчетмашAPIКлиентСервер.ПолучитьСоответствиеПризнаковПредметаРасчетаСчетмаш();
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - ПеречислениеСсылка.ПризнакиПредметаРасчета
//      * Значение - Число
Функция ПолучитьСоответствиеПризнаковСпособаРасчетаСчетмаш() Экспорт
    Возврат ГП_СчетмашAPIКлиентСервер.ПолучитьСоответствиеПризнаковСпособаРасчетаСчетмаш();
КонецФункции

// Параметры:
//  Значение - ПеречислениеСсылка.ПризнакиПредметаРасчета, Число
// Возвращаемое значение:
//  - ПеречислениеСсылка.ПризнакиПредметаРасчета, Число, Неопределено
Функция ПолучитьПризнакПредметаРасчетаСчетмашПоЗначению(Знач Значение) Экспорт
    Возврат ГП_СчетмашAPIКлиентСервер.ПолучитьПризнакПредметаРасчетаСчетмашПоЗначению(Значение);
КонецФункции

// Параметры:
//  Значение - ПеречислениеСсылка.ПризнакиСпособаРасчета, Число
// Возвращаемое значение:
//  - ПеречислениеСсылка.ПризнакиСпособаРасчета, Число, Неопределено
Функция ПолучитьПризнакСпособаРасчетаСчетмашПоЗначению(Знач Значение) Экспорт
    Возврат ГП_СчетмашAPIКлиентСервер.ПолучитьПризнакСпособаРасчетаСчетмашПоЗначению(Значение);
КонецФункции

// Возвращаемое значение:
//  - ФиксированнаяСтруктура
//      * Приход - Строка
//      * ВозвратПрихода - Строка
//      * Расход - Строка
//      * ВозвратРасхода - Строка
Функция НовыйТипыОперацииРегистрацииЧека() Экспорт
    Возврат ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека();
КонецФункции

// Параметры:
//  СтрокаНомера - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * НомерТелефона - Строка
//      * ТекстСообщения - Строка, Неопределено
Функция ПолучитьСтруктуруПредставленияНомераТелефона(Знач СтрокаНомера) Экспорт
	РезультатФункции = Новый Структура("Успех, НомерТелефона, ТекстСообщения", Истина, "");

    ПредставлениеНомера = СтрЗаменитьПоРегулярномуВыражению(Строка(СтрокаНомера), "[^0-9]+", "");
    ПредставлениеНомера = СтрШаблон("%1%2", ?(ПустаяСтрока(ПредставлениеНомера), "", "+"), ПредставлениеНомера);
    
    Если СтрДлина(ПредставлениеНомера) > 64 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон("Длина номера < %1 > превышает допустиму (64 символа).", ПредставлениеНомера);
        
        Возврат РезультатФункции; // Недопустимая длина
    КонецЕсли;

    РезультатФункции.НомерТелефона = ПредставлениеНомера;
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтрокаПочты - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * НомерТелефона - Строка
//      * ЭлектроннаяПочта - Строка, Неопределено
Функция ПолучитьСтруктуруПредставленияЭлектроннойПочты(Знач СтрокаПочты) Экспорт
	РезультатФункции = Новый Структура("Успех, ЭлектроннаяПочта, ТекстСообщения", Истина, "");

    ПредставлениеПочты = СтрЗаменитьПоРегулярномуВыражению(Строка(СтрокаПочты), "[\s]+", "");
    
    Если ПустаяСтрока(ПредставлениеПочты) = Ложь Тогда
        ЭтоВалиднаяПочта = СтрПодобнаПоРегулярномуВыражению(ПредставлениеПочты, "^[^@]+@[^@]+\.[^.@]+$");
        Если ЭтоВалиднаяПочта = Ложь Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон("Недопустимый адрес эл. почты: < %1 >",
                ПредставлениеПочты);
            
            Возврат РезультатФункции; // Недопустимый адрес
        КонецЕсли;
    КонецЕсли;
    
    Если СтрДлина(ПредставлениеПочты) > 64 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон("Длина электронной почты < %1 > превышает допустиму (64 символа).",
            ПредставлениеПочты);
        
        Возврат РезультатФункции; // Недопустимая длина
    КонецЕсли;

    РезультатФункции.ЭлектроннаяПочта = ПредставлениеПочты;
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) --

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКлючВладельцаХранилищаДанных(Знач Владелец, Знач Логин)
    Возврат СтрШаблон("%1_u%2", Владелец, Логин);
КонецФункции

// Устарела. Требует рефакторинг
Функция СтрокаВДату(Знач СтрокаДаты)
    РезультатФункции = Неопределено;

    Попытка
        РезультатФункции = СтроковыеФункцииКлиентСервер.СтрокаВДату(Строка(СтрокаДаты), ЧастиДаты.ДатаВремя);
    Исключение
        РезультатФункции = Неопределено;
        ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                "Ошибка расшифровки строки даты.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

Функция ВыполнитьПроверкуВозможностиВыполненияЗапросаСчетмаш(Знач ЛогинПользователяСчетмаш)
    РезультатФункции = Новый Структура("Успех, Токен, ТекстСообщения", Истина);

    РезультатПроверкиСоединения = ПроверитьСоединениеСчетмаш(ЛогинПользователяСчетмаш);
    Если РезультатПроверкиСоединения.Успех = Ложь Тогда
        ОбщегоНазначения.СообщитьПользователю(РезультатПроверкиСоединения.ТекстСообщения);
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = РезультатПроверкиСоединения.ТекстСообщения;
        Возврат РезультатФункции;
    КонецЕсли;

    // Токен должен быть получен из хранилища т.к. был обновлен при выполнении ПроверитьСоединениеСчетмаш
    РезультатПолученияТокена = ПолучитьТокен(Новый Структура("Логин", ЛогинПользователяСчетмаш), Новый Структура);
    Если РезультатПолученияТокена.Успех = Ложь Тогда
        ОбщегоНазначения.СообщитьПользователю(РезультатПолученияТокена.ТекстСообщения);
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = РезультатПолученияТокена.ТекстСообщения;
        Возврат РезультатФункции;
    КонецЕсли;

    РезультатФункции.Токен = РезультатПолученияТокена.Токен;
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
