// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) ++
#Область ПрограммныйИнтерфейс

// Параметры:
//  КаталогДляВременныхФайлов - Строка
//  ДанныеАутентификации - Структура
//      * Логин - Строка
//      * Пароль - Строка
//  Тестовый - Булево
Функция ПолучитьТокен(Знач КаталогДляВременныхФайлов, Знач ДанныеАутентификации, Знач Тестовый) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("ДатаВремяПолученияТокена");
    РезультатФункции.Вставить("Токен", "");

    ВремяЖизниТокенаСек = 60 * 60 * 23;
    ИмяФайлаДатыТокена = "ДатаВремяПолученияТокена.txt";
    ИмяФайлаТокена = ПолучитьИмяФайлаТокенаПоУмолчанию(Тестовый);

    // Проверка актуальности токена, активность токена - 23 часа.
    ФайлДатаВремяТокена = Новый Файл(КаталогДляВременныхФайлов + "/" + ИмяФайлаДатыТокена);
    Если ФайлДатаВремяТокена.Существует() Тогда

        ТекстФайла = Новый ТекстовыйДокумент;
        Попытка
            ТекстФайла.Прочитать(КаталогДляВременныхФайлов + "/" + ИмяФайлаДатыТокена);
            РезультатФункции.ДатаВремяПолученияТокена = Дата(ТекстФайла.ПолучитьСтроку(1));
        Исключение
            РезультатФункции.ДатаВремяПолученияТокена = Дата(1, 1, 1, 1, 1, 1);
        КонецПопытки;
    КонецЕсли;

    НужноПолучитьТокен = (РезультатФункции.ДатаВремяПолученияТокена = Неопределено)
        ИЛИ ((ТекущаяДатаСеанса() - РезультатФункции.ДатаВремяПолученияТокена) > ВремяЖизниТокенаСек);

    РезультатЧтенияТокена = Неопределено;
    Если НужноПолучитьТокен = Истина Тогда
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина));

        СтруктураДанныхJSON = Новый Структура;

        СтруктураДанныхJSON.Вставить("login", СокрЛП(ДанныеАутентификации.Логин));
        СтруктураДанныхJSON.Вставить("password", СокрЛП(ДанныеАутентификации.Пароль));

        ЗаписатьJSON(ЗаписьJSON, СтруктураДанныхJSON);

        СтрокаJS = ЗаписьJSON.Закрыть();
        HTTPСоединение = НовыйHTTPСоединениеСчетмаш();
        ЗапросPOST = НовыйHTTPЗапросТокенаСчетмаш(СтрокаJS);

        ПутьФайлаОтвета = КаталогДляВременныхФайлов + "\" + ИмяФайлаТокена;
        Попытка
            HTTPСоединение.ОтправитьДляОбработки(ЗапросPOST, ПутьФайлаОтвета);
        Исключение
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Ошибка запроса токена.
                    |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            Возврат РезультатФункции; // Ошибка получения токена
        КонецПопытки;

        РезультатЧтенияТокена = ПрочитатьТокенИзФайла(КаталогДляВременныхФайлов + "\" + ИмяФайлаТокена);
        Если РезультатЧтенияТокена.Успех Тогда
            Попытка
                Текст = Новый ТекстовыйДокумент;
                Текст.ДобавитьСтроку(РезультатФункции.ДатаВремяПолученияТокена);
                Текст.Записать(КаталогДляВременныхФайлов + ИмяФайлаДатыТокена);
                РезультатФункции.ТекстСообщения = "Токен обновлен";
            Исключение
                РезультатФункции.ТекстСообщения = СтрШаблон(
                        "Ошибка записи файла времени токена.
                        |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
                Возврат РезультатФункции; // Ошибка записи файла времени (не влияет на текущее получение токена)
            КонецПопытки;
        КонецЕсли;
    КонецЕсли;

    Если РезультатФункции.Успех = Ложь Тогда
        Возврат РезультатФункции; // Ошибка получения токена
    КонецЕсли;

    // Чтение токена
    Если РезультатЧтенияТокена = Неопределено Тогда
        РезультатЧтенияТокена = ПрочитатьТокенИзФайла(КаталогДляВременныхФайлов + "\" + ИмяФайлаТокена);;
    КонецЕсли;
    Если РезультатЧтенияТокена.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.Токен = "";
        РезультатФункции.ТекстСообщения = РезультатЧтенияТокена.ТекстСообщения;
    Иначе
        РезультатФункции.Токен = РезультатЧтенияТокена.Токен;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Тестовый - Булево
// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяФайлаТокенаПоУмолчанию(Знач Тестовый) Экспорт
    РезультатФункции = "sm_api_test_answer_token";
    Если Тестовый = Ложь Тогда
        РезультатФункции = СтрЗаменить(РезультатФункции, "test_", "");
    КонецЕсли;
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Тестовый - Булево
// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяФайлаДатыТокенаПоУмолчанию(Знач Тестовый) Экспорт
    РезультатФункции = "sm_api_test_ДатаВремяПолученияТокена";
    Если Тестовый = Ложь Тогда
        РезультатФункции = СтрЗаменить(РезультатФункции, "test_", "");
    КонецЕсли;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяКаталогаВременныхФайловПоУмолчанию()
    Возврат "\";
КонецФункции

// Параметры:
//  ПутьКФайлу - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Токен - Строка
//      * ТекстСообщения - Строка, Неопределено
Функция ПрочитатьТокенИзФайла(Знач ПутьКФайлу) Экспорт
    РезультатФункции = Новый Структура("Успех, Токен, ТекстСообщения", Истина, "");

    ТокенПрочитан = Ложь;
    ЧтениеJSON = Новый ЧтениеJSON;

    // Чтение файла
    Попытка
        ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
        Пока ЧтениеJSON.Прочитать() Цикл
            Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
                И ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
                Если (ЧтениеJSON.ТекущееЗначение = "token") Тогда
                    РезультатФункции.Токен = ЧтениеJSON.ТекущееЗначение;
                    ТокенПрочитан = Истина;
                    Прервать; // Токен найден
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.Токен = "";
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка чтения файла токена.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Если РезультатФункции.Успех И ТокенПрочитан = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "В файле отсутствуют данные токена";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция НовыйHTTPСоединениеСчетмаш() Экспорт
    Возврат Новый HTTPСоединение("online.schetmash.com", , , , , 5, Новый ЗащищенноеСоединениеOpenSSL);
КонецФункции

Функция НовыйHTTPЗапросТокенаСчетмаш(Знач СтрокаJS) Экспорт
    ЗапросPOST = Новый HTTPЗапрос("/lk/api/v1/token");
    ЗапросPOST.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗапросPOST.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.Системная, ИспользованиеByteOrderMark.НеИспользовать);

    Возврат ЗапросPOST;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) --
