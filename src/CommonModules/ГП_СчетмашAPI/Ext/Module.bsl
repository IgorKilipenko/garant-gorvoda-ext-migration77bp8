// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) ++
#Область ПрограммныйИнтерфейс

// Параметры:
//  ДанныеАутентификации - Структура
//      * Логин - Строка
//      * Пароль - Строка
//  Параметры - Структура
//      * КаталогДляВременныхФайлов - Строка
//      * Тестовый - Булево
//      * ОбновлятьПринудительно - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ДатаВремяПолученияТокена - Дата, Неопределено
//      * Токен - Строка
Функция ПолучитьТокен(Знач ДанныеАутентификации, Знач Параметры) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("ДатаВремяПолученияТокена");
    РезультатФункции.Вставить("Токен", "");

    ВремяЖизниТокенаСек = 60 * 60 * 23;
    ИмяФайлаДатыТокена = ПолучитьИмяФайлаДатыТокенаПоУмолчанию(Параметры.Тестовый);
    ИмяФайлаТокена = ПолучитьИмяФайлаТокенаПоУмолчанию(Параметры.Тестовый);

    // Проверка актуальности токена, активность токена - 23 часа.
    ФайлДатаВремяТокена = Новый Файл(Параметры.КаталогДляВременныхФайлов + "/" + ИмяФайлаДатыТокена);
    Если ФайлДатаВремяТокена.Существует() Тогда

        ТекстФайла = Новый ТекстовыйДокумент;
        Попытка
            ТекстФайла.Прочитать(Параметры.КаталогДляВременныхФайлов + "/" + ИмяФайлаДатыТокена);
            РезультатФункции.ДатаВремяПолученияТокена = Дата(ТекстФайла.ПолучитьСтроку(1));
        Исключение
            РезультатФункции.ДатаВремяПолученияТокена = Неопределено;
        КонецПопытки;
    КонецЕсли;

    НужноОбновитьТокен = (РезультатФункции.ДатаВремяПолученияТокена = Неопределено)
        ИЛИ ((ТекущаяДатаСеанса() - РезультатФункции.ДатаВремяПолученияТокена) > ВремяЖизниТокенаСек)
        ИЛИ (Параметры.Свойство("ОбновлятьПринудительно") И Параметры.ОбновлятьПринудительно);

    РезультатОбновленияТокена = Неопределено;
    Если НужноОбновитьТокен = Истина Тогда

        РезультатОбновленияТокена = ОбновитьТокен(ДанныеАутентификации,
                Новый Структура("КаталогДляВременныхФайлов, ИмяФайлаТокена, ИмяФайлаДатыТокена",
                Параметры.КаталогДляВременныхФайлов, ИмяФайлаТокена, ИмяФайлаДатыТокена));

        Если РезультатОбновленияТокена <> Неопределено Тогда
            Если РезультатОбновленияТокена.Успех = Ложь Тогда
                // Ошибка обновления токена
                РезультатФункции.Успех = Ложь;
                РезультатФункции.ТекстСообщения = РезультатОбновленияТокена.ТекстСообщения;
            Иначе
                // Успех. Токен обновлен
                РезультатФункции.Успех = Истина;
                РезультатФункции.Токен = РезультатОбновленияТокена.Токен;
                РезультатФункции.ДатаВремяПолученияТокена = РезультатОбновленияТокена.ДатаВремяПолученияТокена;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДанныеАутентификации - Структура
//      * Логин - Строка
//      * Пароль - Строка
//  Параметры - Структура
//      * КаталогДляВременныхФайлов - Строка
//      * ИмяФайлаТокена - Строка
//      * ИмяФайлаДатыТокена - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ДатаВремяПолученияТокена - Дата, Неопределено
//      * Токен - Строка
Функция ОбновитьТокен(Знач ДанныеАутентификации, Знач Параметры) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("ДатаВремяПолученияТокена");
    РезультатФункции.Вставить("Токен", "");

    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина));

    СтруктураДанныхJSON = Новый Структура;

    СтруктураДанныхJSON.Вставить("login", СокрЛП(ДанныеАутентификации.Логин));
    СтруктураДанныхJSON.Вставить("password", СокрЛП(ДанныеАутентификации.Пароль));

    ЗаписатьJSON(ЗаписьJSON, СтруктураДанныхJSON);

    СтрокаJS = ЗаписьJSON.Закрыть();
    HTTPСоединение = НовыйHTTPСоединениеСчетмаш();
    ЗапросPOST = НовыйHTTPЗапросТокенаСчетмаш(СтрокаJS);

    ПутьФайлаОтвета = Параметры.КаталогДляВременныхФайлов + "\" + Параметры.ИмяФайлаТокена;
    HTTPОтвет = Неопределено;
    Попытка
        HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ЗапросPOST, ПутьФайлаОтвета);
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка запроса токена.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции; // Ошибка получения токена
    КонецПопытки;

    Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния <> 200 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка запроса токена.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции; // Ошибка получения ответа
    КонецЕсли;

    Если РезультатФункции.Успех = Ложь Тогда
        Возврат РезультатФункции; // Ошибка получения токена
    КонецЕсли;

    // Запись файла даты токена
    РезультатЧтенияТокена = ПрочитатьТокенИзФайла(Параметры.КаталогДляВременныхФайлов + "\" + Параметры.ИмяФайлаТокена);
    Если РезультатЧтенияТокена.Успех Тогда
        Попытка
            Текст = Новый ТекстовыйДокумент;
            Текст.ДобавитьСтроку(РезультатФункции.ДатаВремяПолученияТокена);
            Текст.Записать(Параметры.КаталогДляВременныхФайлов + Параметры.ИмяФайлаДатыТокена);
        Исключение
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Ошибка записи файла времени токена.
                    |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;
    КонецЕсли;

    // Чтение токена
    Если РезультатЧтенияТокена = Неопределено Тогда
        РезультатЧтенияТокена = ПрочитатьТокенИзФайла(Параметры.КаталогДляВременныхФайлов + "\" + Параметры.ИмяФайлаТокена);
    КонецЕсли;
    Если РезультатЧтенияТокена.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.Токен = "";
        РезультатФункции.ТекстСообщения = РезультатЧтенияТокена.ТекстСообщения;
    Иначе
        РезультатФункции.Токен = РезультатЧтенияТокена.Токен;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Тестовый - Булево
// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяФайлаТокенаПоУмолчанию(Знач Тестовый) Экспорт
    РезультатФункции = "sm_api_test_answer_token";
    Если Тестовый = Ложь Тогда
        РезультатФункции = СтрЗаменить(РезультатФункции, "test_", "");
    КонецЕсли;
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Тестовый - Булево
// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяФайлаДатыТокенаПоУмолчанию(Знач Тестовый) Экспорт
    РезультатФункции = "sm_api_test_ДатаВремяПолученияТокена";
    Если Тестовый = Ложь Тогда
        РезультатФункции = СтрЗаменить(РезультатФункции, "test_", "");
    КонецЕсли;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяКаталогаВременныхФайловПоУмолчанию()
    Возврат "\";
КонецФункции

// Параметры:
//  ПутьКФайлу - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Токен - Строка
//      * ТекстСообщения - Строка, Неопределено
Функция ПрочитатьТокенИзФайла(Знач ПутьКФайлу) Экспорт
    РезультатФункции = Новый Структура("Успех, Токен, ТекстСообщения", Истина, "");

    ТокенПрочитан = Ложь;
    ЧтениеJSON = Новый ЧтениеJSON;

    // Чтение файла
    Попытка
        ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
        Пока ЧтениеJSON.Прочитать() Цикл
            Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
                И ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
                Если (ЧтениеJSON.ТекущееЗначение = "token") Тогда
                    РезультатФункции.Токен = ЧтениеJSON.ТекущееЗначение;
                    ТокенПрочитан = Истина;
                    Прервать; // Токен найден
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.Токен = "";
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка чтения файла токена.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Если РезультатФункции.Успех И ТокенПрочитан = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "В файле отсутствуют данные токена";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция НовыйHTTPСоединениеСчетмаш() Экспорт
    Возврат Новый HTTPСоединение("online.schetmash.com", , , , , 5, Новый ЗащищенноеСоединениеOpenSSL);
КонецФункции

Функция НовыйHTTPЗапросТокенаСчетмаш(Знач СтрокаJS) Экспорт
    ЗапросPOST = Новый HTTPЗапрос("/lk/api/v1/token");
    ЗапросPOST.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗапросPOST.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.Системная, ИспользованиеByteOrderMark.НеИспользовать);

    Возврат ЗапросPOST;
КонецФункции

// Параметры:
//  ДемоРежим - Булево
// Возвращаемое значение:
//  - Структура
Функция НовыйСтруктураДанныхБезопасногоХраненияДанныхТокена(Знач ДемоРежим) Экспорт
    РезультатФункции = Новый Структура("Владелец", "ГП_APIСервисСчетмашОнлайнВ2");
    РезультатФункции.Вставить("КлючДанных", "ТОКЕН");
    РезультатФункции.Вставить("Данные", Новый Структура("Токен, ДатаСоздания, ДатаОкончания"));

    Если ДемоРежим = Истина Тогда
        РезультатФункции.КлючДанных = РезультатФункции.КлючДанных + "_ДЕМО";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция ЗаписатьДанныеВБезопасноеХранилище(Знач СтруктураДанныхБезопасногоХраненияДанных)
    УстановитьПривилегированныйРежим(Истина);

    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
        СтруктураДанныхБезопасногоХраненияДанных.Владелец,
        СтруктураДанныхБезопасногоХраненияДанных.КлючДанных,
        СтруктураДанныхБезопасногоХраненияДанных.Данные);

    УстановитьПривилегированныйРежим(Ложь);

    Возврат Истина;
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция ПрочитатьДанныеИзБезопасногоХранилища(Знач СтруктураДанныхБезопасногоХраненияДанных)
    РезультатФункции = Неопределено;

    УстановитьПривилегированныйРежим(Истина);

    РезультатФункции = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
            СтруктураДанныхБезопасногоХраненияДанных.Владелец,
            СтруктураДанныхБезопасногоХраненияДанных.КлючДанных,
            СтруктураДанныхБезопасногоХраненияДанных.ДанныеТокена);

    УстановитьПривилегированныйРежим(Ложь);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) --
