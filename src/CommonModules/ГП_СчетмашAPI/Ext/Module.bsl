// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) ++
#Область ПрограммныйИнтерфейс

// Параметры:
//  ДанныеАутентификации - Структура
//      * Логин - Строка
//      * Пароль - Строка
//  Параметры - Структура
//      * ОбновлятьПринудительно - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ДатаВремяПолученияТокена - Дата, Неопределено
//      * Токен - Строка
Функция ПолучитьТокен(Знач ДанныеАутентификации, Знач Параметры) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("ДатаВремяПолученияТокена");
    РезультатФункции.Вставить("Токен", "");

    НужноОбновитьТокен = Истина;
    Если НЕ Параметры.Свойство("ОбновлятьПринудительно") ИЛИ НЕ Параметры.ОбновлятьПринудительно Тогда
        СтруктураДанныхБезопасногоХраненияДанныхТокена = НовыйСтруктураДанныхБезопасногоХраненияДанныхТокена();
        РезультатЧтенияДанныхТокена = ПрочитатьДанныеИзБезопасногоХранилища(СтруктураДанныхБезопасногоХраненияДанныхТокена);
        НужноОбновитьТокен = ТипЗнч(РезультатЧтенияДанныхТокена) <> Тип("Структура")
            ИЛИ ПустаяСтрока(РезультатЧтенияДанныхТокена.Токен)
            ИЛИ (РезультатЧтенияДанныхТокена.ДатаОкончания <> Неопределено
                И РезультатЧтенияДанныхТокена.ДатаОкончания > ТекущаяДатаСеанса());
    КонецЕсли;

    Если НужноОбновитьТокен = Истина Тогда
        РезультатОбновленияТокена = ОбновитьТокен(ДанныеАутентификации);

        Если РезультатОбновленияТокена <> Неопределено Тогда
            Если РезультатОбновленияТокена.Успех = Ложь Тогда
                // Ошибка обновления токена
                РезультатФункции.Успех = Ложь;
                РезультатФункции.ТекстСообщения = РезультатОбновленияТокена.ТекстСообщения;
            Иначе
                // Успех. Токен обновлен
                РезультатФункции.Успех = Истина;
                РезультатФункции.Токен = РезультатОбновленияТокена.Токен;
                РезультатФункции.ДатаВремяПолученияТокена = РезультатОбновленияТокена.ДатаВремяПолученияТокена;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДанныеАутентификации - Структура
//      * Логин - Строка
//      * Пароль - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ДатаВремяПолученияТокена - Дата, Неопределено
//      * Токен - Строка
Функция ОбновитьТокен(Знач ДанныеАутентификации) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("ДатаВремяПолученияТокена");
    РезультатФункции.Вставить("Токен", "");

    ШаблонСообщенияОшибкиЗапросаТокена =
        "Ошибка получения токена.
        |Информация: %1";

    ТелоЗапросаJSON = ЗаписатьЗначениеJSON(Новый Структура("login, password", ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль));

    HTTPСоединение = НовыйHTTPСоединениеСчетмаш();
    ЗапросPOST = НовыйHTTPЗапросТокенаСчетмаш(ТелоЗапросаJSON);

    HTTPОтвет = Неопределено;
    Попытка
        HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ЗапросPOST);
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапросаТокена,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат РезультатФункции; // Ошибка получения токена
    КонецПопытки;

    Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния <> 200 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                ШаблонСообщенияОшибкиЗапросаТокена,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    Иначе
        СтрокаТелаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
        СтруктураТелаОтвета = ПрочитатьЗначениеJSON(?(СтрокаТелаОтвета = Неопределено, "{}", СтрокаТелаОтвета));
        ЭтоВалиднаяСтруктураОтвета = ТипЗнч(СтруктураТелаОтвета) <> Тип("Структура")
            И СтруктураТелаОтвета.Свойство("message") И СтруктураТелаОтвета.Свойство("code") И СтруктураТелаОтвета.Свойство("token");
        Если ЭтоВалиднаяСтруктураОтвета = Ложь Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    ШаблонСообщенияОшибкиЗапросаТокена, "Ошибка структуры ответа сервера");

        ИначеЕсли СтруктураТелаОтвета.code = "1" ИЛИ ТипЗнч(СтруктураТелаОтвета.token) <> Тип("Строка") Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Ошибка структуры ответа токена.
                    |Сообщение сервера: (код: %1) %2", Строка(СтруктураТелаОтвета.code), Строка(СтруктураТелаОтвета.message));

        Иначе
            РезультатФункции.Токен = СтруктураТелаОтвета.token;
            РезультатФункции.ДатаВремяПолученияТокена = ТекущаяДатаСеанса();

            // Запись данных токена в хранилище
            СтруктураДанныхБезопасногоХраненияДанныхТокена = НовыйСтруктураДанныхБезопасногоХраненияДанныхТокена();
            СтруктураДанныхБезопасногоХраненияДанныхТокена.Токен = РезультатФункции.Токен;
            СтруктураДанныхБезопасногоХраненияДанныхТокена.ДатаСоздания = РезультатФункции.ДатаВремяПолученияТокена;
            СтруктураДанныхБезопасногоХраненияДанныхТокена.ДатаОкончания =
                РезультатФункции.ДатаВремяПолученияТокена + ПолучитьВремяЖизниТокенаСек();
            ЗаписатьДанныеВБезопасноеХранилище(СтруктураДанныхБезопасногоХраненияДанныхТокена);
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Тестовый - Булево
// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяФайлаТокенаПоУмолчанию(Знач Тестовый) Экспорт
    РезультатФункции = "sm_api_test_answer_token";
    Если Тестовый = Ложь Тогда
        РезультатФункции = СтрЗаменить(РезультатФункции, "test_", "");
    КонецЕсли;
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Тестовый - Булево
// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяФайлаДатыТокенаПоУмолчанию(Знач Тестовый) Экспорт
    РезультатФункции = "sm_api_test_ДатаВремяПолученияТокена";
    Если Тестовый = Ложь Тогда
        РезультатФункции = СтрЗаменить(РезультатФункции, "test_", "");
    КонецЕсли;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Строка
Функция ПолучитьИмяКаталогаВременныхФайловПоУмолчанию() Экспорт
    Возврат "\";
КонецФункции

// Устарела. Не используется
// Параметры:
//  ПутьКФайлу - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Токен - Строка
//      * ТекстСообщения - Строка, Неопределено
Функция Удалить_ПрочитатьТокенИзФайла(Знач ПутьКФайлу) Экспорт
    РезультатФункции = Новый Структура("Успех, Токен, ТекстСообщения", Истина, "");

    ТокенПрочитан = Ложь;
    ЧтениеJSON = Новый ЧтениеJSON;

    // Чтение файла
    Попытка
        ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
        Пока ЧтениеJSON.Прочитать() Цикл
            Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
                И ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
                Если (ЧтениеJSON.ТекущееЗначение = "token") Тогда
                    РезультатФункции.Токен = ЧтениеJSON.ТекущееЗначение;
                    ТокенПрочитан = Истина;
                    Прервать; // Токен найден
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    Исключение
        РезультатФункции.Успех = Ложь;
        РезультатФункции.Токен = "";
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка чтения файла токена.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Если РезультатФункции.Успех И ТокенПрочитан = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "В файле отсутствуют данные токена";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция НовыйHTTPСоединениеСчетмаш() Экспорт
    Возврат Новый HTTPСоединение("online.schetmash.com", , , , , 5, Новый ЗащищенноеСоединениеOpenSSL);
КонецФункции

Функция НовыйHTTPЗапросТокенаСчетмаш(Знач СтрокаJS) Экспорт
    ЗапросPOST = Новый HTTPЗапрос("/lk/api/v1/token");
    ЗапросPOST.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗапросPOST.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.Системная, ИспользованиеByteOrderMark.НеИспользовать);

    Возврат ЗапросPOST;
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция НовыйСтруктураДанныхБезопасногоХраненияДанныхТокена() Экспорт
    РезультатФункции = Новый Структура("Владелец", "ГП_APIСервисСчетмашОнлайнВ2");
    РезультатФункции.Вставить("КлючДанных", "ТОКЕН");
    РезультатФункции.Вставить("Данные", Новый Структура("Токен, ДатаСоздания, ДатаОкончания"));

    Возврат РезультатФункции;
КонецФункции

Функция ЗаписатьДанныеВБезопасноеХранилище(Знач СтруктураДанныхБезопасногоХраненияДанных) Экспорт
    СтруктураДанныхБезопасногоХраненияДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанныхБезопасногоХраненияДанных);
    СтруктураДанныхБезопасногоХраненияДанных.Владелец = ПолучитьКлючВладельцаХранилищаДанных(
            СтруктураДанныхБезопасногоХраненияДанных.Владелец, СтруктураДанныхБезопасногоХраненияДанных.Логин);

    УстановитьПривилегированныйРежим(Истина);

    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
        СтруктураДанныхБезопасногоХраненияДанных.Владелец,
        СтруктураДанныхБезопасногоХраненияДанных.КлючДанных,
        СтруктураДанныхБезопасногоХраненияДанных.Данные);

    УстановитьПривилегированныйРежим(Ложь);

    Возврат Истина;
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция ПрочитатьДанныеИзБезопасногоХранилища(Знач СтруктураДанныхБезопасногоХраненияДанных) Экспорт
    РезультатФункции = Неопределено;

    СтруктураДанныхБезопасногоХраненияДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанныхБезопасногоХраненияДанных);
    СтруктураДанныхБезопасногоХраненияДанных.Владелец = ПолучитьКлючВладельцаХранилищаДанных(
            СтруктураДанныхБезопасногоХраненияДанных.Владелец, СтруктураДанныхБезопасногоХраненияДанных.Логин);

    УстановитьПривилегированныйРежим(Истина);

    РезультатФункции = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
            СтруктураДанныхБезопасногоХраненияДанных.Владелец,
            СтруктураДанныхБезопасногоХраненияДанных.КлючДанных,
            СтруктураДанныхБезопасногоХраненияДанных.ДанныеТокена);

    УстановитьПривилегированныйРежим(Ложь);

    Возврат РезультатФункции;
КонецФункции

Функция НовыйПользовательСчетмаш()
    Возврат Новый Структура("Наименование, Логин");
КонецФункции

Функция ПолучитьДемоПользователяСчетмаш() Экспорт
    ПользовательСчетмаш = НовыйПользовательСчетмаш();
    ПользовательСчетмаш.Наименование = "Демо";
    ПользовательСчетмаш.Логин = "test_api";
    Возврат ПользовательСчетмаш;
КонецФункции

Функция ПолучитьОсновногоПользователяСчетмаш() Экспорт
    ПользовательСчетмаш = НовыйПользовательСчетмаш();
    ПользовательСчетмаш.Наименование = "Основной";
    ПользовательСчетмаш.Логин = "wkx_53";
    Возврат ПользовательСчетмаш;
КонецФункции

Функция ПолучитьПользователейСчетмаш() Экспорт
    РезультатФункции = Новый Соответствие;

    // Демо доступ
    ПользовательСчетмаш = ПолучитьДемоПользователяСчетмаш();
    РезультатФункции.Вставить(ПользовательСчетмаш.Наименование, ПользовательСчетмаш);

    // Основной доступ
    ПользовательСчетмаш = ПолучитьОсновногоПользователяСчетмаш();
    РезультатФункции.Вставить(ПользовательСчетмаш.Наименование, ПользовательСчетмаш);

    Возврат РезультатФункции;
КонецФункции

Функция ЭтоДемоЛогинСчетмаш(Знач Логин)
    ДемоПользовательСчетмаш = ПолучитьДемоПользователяСчетмаш();
    Возврат Логин = ДемоПользовательСчетмаш.Логин;
КонецФункции

Функция ПолучитьВремяЖизниТокенаСек()
    Возврат 60 * 60 * 23;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 06.03.2025 [F00235776] Web-касса (счетмаш) --

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКлючВладельцаХранилищаДанных(Знач Владелец, Знач Логин)
    Возврат СтрШаблон("%1_u%2", Владелец, Логин);
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
