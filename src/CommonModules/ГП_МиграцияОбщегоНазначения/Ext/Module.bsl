// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область ПрограммныйИнтерфейс

#Область РасшифровкаДанных

// Получает номер договора из наименования договора
// Параметры:
//  НаименованиеДоговора - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Номер - Строка
//      * Суффикс - Строка - Суффикс номера
Функция ПолучитьНомерДоговораПоНаименованию(Знач НаименованиеДоговора) Экспорт
    РезультатФункции = Новый Структура("Успех, Номер, Суффикс", Ложь);

    ШаблонПоиска =
        "(?i)^\s*Договор\s*[#№N]\s*([0-9]+)\s*((?:[\\/_-]+\s*[0-9а-яА-ЯЁёa-zA-Z]+)?)";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеДоговора, ШаблонПоиска);

    // Проверка найденных групп
    НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
    Если РезультатПоиска.НачальнаяПозиция = 0 ИЛИ НайденныеГруппы.Количество() < 1 Тогда
        Возврат РезультатФункции; // Номер не найден
    КонецЕсли;

    // Формирование результата
    РезультатФункции.Успех = Истина;
    РезультатФункции.Номер = НайденныеГруппы[0].Значение;
    РезультатФункции.Суффикс = ?(НайденныеГруппы.Количество() > 1 И ПустаяСтрока(СокрЛП(НайденныеГруппы[1].Значение)) = Ложь,
            СтрЗаменитьПоРегулярномуВыражению(НайденныеГруппы[1].Значение, "^[\\/_-]+\s*", ""), "");

    Возврат РезультатФункции;
КонецФункции

// Выполняет анализ наименования объекта абонента на наличие признака ХолодногоВодоснабженияОИ
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
// Возвращаемое значение:
//  - Булево
Функция ЭтоНаименованиеУслугиХолодногоВодоснабженияОИ(Знач НаименованиеОбъектаАбонента) Экспорт
    ШаблонПоиска =
        "(?i)(?:.*)(?:п?лата)\s+(?:(?:за)|(?:по))\s+(?:х[оа]лодн.*)\s+(?:водосн.+бж[а-яА-Я]+)[\s,]+.*(?:(?:ОИ)|(?:потребленное\s+при\s+содержан.*))\s*.*";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеОбъектаАбонента, ШаблонПоиска);

    Возврат РезультатПоиска.НачальнаяПозиция <> 0;
КонецФункции

// Выполняет анализ наименования объекта абонента на наличие признака НегативногоВоздействия
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
// Возвращаемое значение:
//  - Булево
Функция ЭтоНаименованиеУслугиНегативногоВоздействия(Знач НаименованиеОбъектаАбонента) Экспорт
    ШаблонПоиска =
        "(?i)^(?:.+)\s*[(\s]+(?:негативное\s+воздейст?вие(?:\s+на\s*ЦСВ)?)[\s)]*";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеОбъектаАбонента, ШаблонПоиска);

    Возврат РезультатПоиска.НачальнаяПозиция <> 0;
КонецФункции

// Выполняет анализ адреса здания по наименованию объекта абонента (здания)
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Улица - Строка, Неопределено
//      * Дом - Строка, Неопределено
Функция ПолучитьАдресПоНаименованиюОбъектаАбонента(Знач НаименованиеОбъектаАбонента) Экспорт
    РезультатФункции = Новый Структура("Успех, Улица, Дом", Ложь);

    БазисШаблона = "(?:(?:ул[\.\s,]+)|(?:пр[\-\s]*т\s+))?((?:[0-9]+\s*лет\s+|[0-9]+-[а]?я\s+)?[а-яА-ЯёЁ]+(?:[\.\-0-9])*[а-яА-ЯёЁ]+)[\s,\.]+"
        + "(?:ул\.*\s+)?(?:д(?:ом)?[\s\.,]+)?([0-9]+(?:(?:[\s\\/]*[а-яА-ЯёЁa-zA-Z])|(?:[\s\\/]+[0-9]+))?)";

    ШаблонПоиска =
        // "(?i)\s*\(\s*(?:(?:ул[\.\s,]+)|(?:пр[\-\s]*т\s+))?((?:[0-9]+\s*лет\s+|[0-9]+-[а]?я\s+)?[а-яА-ЯёЁ]+(?:[\.\-0-9])*[а-яА-ЯёЁ]+)[\s,\.]+(?:ул\.*\s+)?(?:д(?:ом)?[\s\.,]+)?([0-9]+(?:(?:[\s\\/]*[а-яА-ЯёЁa-zA-Z])|(?:[\s\\/]+[0-9]+))?)(?:\s*\)\s*$)";
        "(?i)\s*\(\s*" + БазисШаблона + "(?:\s*\)\s*$)";
    ШаблонПоиска =
        //"(?i)\s*(?:(?:ул[\.\s,]+)|(?:пр[\-\s]*т\s+))?((?:[0-9]+\s*лет\s+|[0-9]+-[а]?я\s+)?[а-яА-ЯёЁ]+(?:[\.\-0-9])*[а-яА-ЯёЁ]+)[\s,\.]+(?:ул\.*\s+)?(?:д(?:ом)?[\s\.,]+)?([0-9]+(?:(?:[\s\\/]*[а-яА-ЯёЁa-zA-Z])|(?:[\s\\/]+[0-9]+))?)(?:[\s(,\.]|$)";
        "(?i)\s*" + БазисШаблона + "(?:[\s(,\.]|$)";

    ШаблоныПоиска = Новый Массив;
    ШаблоныПоиска.Добавить("(?i)\s*\(\s*" + "(?!услуга\s+[0-9]+|\дог[\s\.]+[0-9]+)" + БазисШаблона + "(?:\s*\)\s*$)"); // Скобки
    ШаблоныПоиска.Добавить("(?i)\s*" + БазисШаблона + "(?:[\s+,-][0-9]+\s*эт[аж\.]{1,2}\s*)" + "(?:[\s(,\.]|$)");    // Этаж
    ШаблоныПоиска.Добавить("(?i)\s*" + БазисШаблона + "(?:[\s(,\.]|$)");    // Базовый

    Для Каждого ТекущийШаблонПоиска Из ШаблоныПоиска Цикл
        СтруктураАдреса = ПолучитьАдресПоНаименованиюОбъектаАбонентаПоШаблону(НаименованиеОбъектаАбонента, ТекущийШаблонПоиска);
        Если СтруктураАдреса.Успех = Истина
            И ПустаяСтрока(СтруктураАдреса.Дом) = Ложь
            И ПустаяСтрока(СтруктураАдреса.Улица) = Ложь Тогда

            ЗаполнитьЗначенияСвойств(РезультатФункции, СтруктураАдреса);
            Возврат РезультатФункции; // Адрес распознан
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции; // Адрес не распознан
КонецФункции

#КонецОбласти // РасшифровкаДанных

#Область ВспомогательныеФункцииЗаполнения

// Служебная функция. Помещает результат во временное хранилище или выполняет возврат результата
// Параметры:
//  Результат - Произвольный
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПоместитьВХранилищеИВернуть(Знач Результат, Знач АдресХранилища = Неопределено) Экспорт
    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
        Возврат Неопределено;
    Иначе
        Возврат Результат;
    КонецЕсли;
КонецФункции

// Параметры:
//  Описание - Строка
//  СообщитьПользователю - Булево
//  СообщитьКратко - Булево
// Возвращаемое значение:
//  - Структура
//      * ПодробноеПредставлениеОшибки - Строка
//      * КраткоеПредставлениеОшибки - Строка
Функция ЗаписатьОшибкуВЖурнал(Знач Описание, Знач СообщитьПользователю = Ложь, Знач СообщитьКратко = Истина) Экспорт
    РезультатФункции = Новый Структура("ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки");

    РезультатФункции.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    РезультатФункции.КраткоеПредставлениеОшибки = "";
    Если СообщитьКратко Тогда
        РезультатФункции.КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    КонецЕсли;

    ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
        Описание,
        УровеньЖурналаРегистрации.Ошибка, , ,
        РезультатФункции.ПодробноеПредставлениеОшибки);

    Если СообщитьПользователю Тогда
        ОбщегоНазначения.СообщениеПользователю(?(СообщитьКратко,
                РезультатФункции.КраткоеПредставлениеОшибки, РезультатФункции.ПодробноеПредставлениеОшибки));
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ВспомогательныеФункцииЗаполнения

#КонецОбласти // ПрограммныйИнтерфейс
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// ++ Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныеПроцедурыИФункции

// Выполняет анализ адреса здания по наименованию объекта абонента (здания)
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
//  ШаблонПоиска - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Улица - Строка, Неопределено
//      * Дом - Строка, Неопределено
Функция ПолучитьАдресПоНаименованиюОбъектаАбонентаПоШаблону(Знач НаименованиеОбъектаАбонента, Знач ШаблонПоиска)
    РезультатФункции = Новый Структура("Успех, Улица, Дом", Ложь);

    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеОбъектаАбонента, ШаблонПоиска);

    // Проверка найденных групп
    НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
    Если РезультатПоиска.НачальнаяПозиция = 0 ИЛИ НайденныеГруппы.Количество() < 2 Тогда
        Возврат РезультатФункции; // Адрес не распознан
    КонецЕсли;

    // Формирование результата
    РезультатФункции.Успех = Истина;
    РезультатФункции.Улица = СокрЛП(НайденныеГруппы[0].Значение);
    РезультатФункции.Дом = СокрЛП(НайденныеГруппы[1].Значение);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// -- Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --
