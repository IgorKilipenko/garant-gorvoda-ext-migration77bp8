// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область ПрограммныйИнтерфейс

// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область ЗагрузкаДанныхXML
// Выполняет чтение данных из файла XML выгруженного из БП 7.7
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//  ИмяКорневогоУзла - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Данные - СписокXDTO, ОбъектXDTO, Произвольный
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено - Если результат помещен в хранилище
Функция ПрочитатьДанныеИзФайлаXML(Знач ДвоичныеДанныеФайла, Знач ИмяКорневогоУзла) Экспорт
    РезультатФункции = Новый Структура("Успех, Данные, ТекстСообщения", Ложь);

    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
    ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

    ЧтениеXML = Новый ЧтениеXML();
    ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);

    ОбъектДанныхXML = Неопределено;
    Попытка
        // Выполняем разбор файла xml
        ОбъектДанныхXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    Исключение
        // Ошибка разбора файла xml
        РезультатФункции.ТекстСообщения = НСтр("ru = 'Ошибка анализа файла xml.'");
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Описание ошибки: %2",
                РезультатФункции.ТекстСообщения,
                ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

        Возврат РезультатФункции; // Ошибка разбора файла
    КонецПопытки;

    // Проверка валидности данных корневого узла
    ЭтоДопустимыйОбъект = (ТипЗнч(ОбъектДанныхXML) = Тип("ОбъектXDTO")
            И ОбъектДанныхXML.Свойства().Получить(ИмяКорневогоУзла) <> Неопределено);
    Если ЭтоДопустимыйОбъект = Ложь Тогда
        РезультатФункции.ТекстСообщения = НСтр("ru = 'Данные не обнаружены.'");
        Возврат РезультатФункции; // Нет данных или данные недопустимой структуры
    КонецЕсли;

    РезультатФункции.Успех = Истина;
    РезультатФункции.Данные = ОбъектДанныхXML[ИмяКорневогоУзла];
    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // ЗагрузкаДанныхXML
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

#Область РасшифровкаДанных

// Получает номер договора из наименования договора
// Параметры:
//  НаименованиеДоговора - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Номер - Строка
//      * Суффикс - Строка - Суффикс номера
Функция ПолучитьНомерДоговораПоНаименованию(Знач НаименованиеДоговора) Экспорт
    РезультатФункции = Новый Структура("Успех, Номер, Суффикс", Ложь);

    ШаблонПоиска =
        "(?i)^\s*Договор\s*[#№N]\s*([0-9]+)\s*((?:[\\/_-]+\s*[0-9а-яА-ЯЁёa-zA-Z]+)?)";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеДоговора, ШаблонПоиска);

    // Проверка найденных групп
    НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
    Если РезультатПоиска.НачальнаяПозиция = 0 ИЛИ НайденныеГруппы.Количество() < 1 Тогда
        Возврат РезультатФункции; // Номер не найден
    КонецЕсли;

    // Формирование результата
    РезультатФункции.Успех = Истина;
    РезультатФункции.Номер = НайденныеГруппы[0].Значение;
    РезультатФункции.Суффикс = ?(НайденныеГруппы.Количество() > 1 И ПустаяСтрока(СокрЛП(НайденныеГруппы[1].Значение)) = Ложь,
            СтрЗаменитьПоРегулярномуВыражению(НайденныеГруппы[1].Значение, "^[\\/_-]+\s*", ""), "");

    Возврат РезультатФункции;
КонецФункции

// Выполняет анализ наименования объекта абонента на наличие признака ХолодногоВодоснабженияОИ
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
// Возвращаемое значение:
//  - Булево
Функция ЭтоНаименованиеУслугиХолодногоВодоснабженияОИ(Знач НаименованиеОбъектаАбонента) Экспорт
    ШаблонПоиска =
        "(?i)(?:.*)(?:п?лата)\s+(?:(?:за)|(?:по))\s+(?:х[оа]лодн.*)\s+(?:водосн.+бж[а-яА-Я]+)[\s,]+.*(?:(?:ОИ)|(?:потребленное\s+при\s+содержан.*))\s*.*";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеОбъектаАбонента, ШаблонПоиска);

    Возврат РезультатПоиска.НачальнаяПозиция <> 0;
КонецФункции

// Выполняет анализ наименования объекта абонента на наличие признака НегативногоВоздействия
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
// Возвращаемое значение:
//  - Булево
Функция ЭтоНаименованиеУслугиНегативногоВоздействия(Знач НаименованиеОбъектаАбонента) Экспорт
    Если СтрНайти(НаименованиеОбъектаАбонента, "(негативное воздействие)", НаправлениеПоиска.СКонца) > 0 Тогда
        Возврат Истина;
    КонецЕсли;

    ШаблонПоиска =
        "(?i)^(?:.+)\s*[(\s]+(?:негативное\s+воздейст?вие(?:\s+на\s*ЦСВ)?)[\s)]*";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеОбъектаАбонента, ШаблонПоиска);

    Возврат РезультатПоиска.НачальнаяПозиция <> 0;
КонецФункции

// Выполняет анализ наименования объекта абонента на наличие признака ПотериВоды
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
// Возвращаемое значение:
//  - Булево
Функция ЭтоНаименованиеПотериВоды(Знач НаименованиеОбъектаАбонента) Экспорт
    Если СтрНайти(НаименованиеОбъектаАбонента, "(потери воды", НаправлениеПоиска.СКонца) > 0 Тогда
        Возврат Истина;
    КонецЕсли;

    ШаблонПоиска =
        "(?i)\(+\s*потери\s+воды";
    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеОбъектаАбонента, ШаблонПоиска);

    Возврат РезультатПоиска.НачальнаяПозиция <> 0;
КонецФункции

// Выполняет анализ адреса здания по наименованию объекта абонента (здания)
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Улица - Строка, Неопределено
//      * Дом - Строка, Неопределено
Функция ПолучитьАдресПоНаименованиюОбъектаАбонента(Знач НаименованиеОбъектаАбонента) Экспорт
    РезультатФункции = Новый Структура("Успех, Улица, Дом", Ложь);

    // Формирование базового шаблона
    БазисШаблона = "(?:(?:ул[\.\s,]+)|(?:пр[\-\s]*к?т\s+))?" // Префикс
        + "((?!ул[\.,])(?:[0-9]+\s*лет\s+|[0-9]+-[а]?я\s+)?[а-яА-ЯёЁ]+(?:[\.\-0-9\s])*[а-яА-ЯёЁ]+)" // Улица
        + "(?:[\s]+пр[\-\s]*к?т\s+)?" // Проспект
        + "[\s,\.]+(?:ул\.*\s+)?(?:д(?:ом)?[\s\.,]+)?" // Разделитель
        + "([0-9]+(?:(?:[\s\\/]*[а-яА-ЯёЁa-zA-Z-])|(?:[\s\\/""]+[0-9]+[\.""]?))?)"; // Дом

    // Варианты шаблонов поиска
    ШаблоныПоиска = Новый Массив;
    ШаблоныПоиска.Добавить("(?i)\s*\(\s*" + "(?!услуга\s+[0-9]+|дог[\s\.]+[0-9]+|помещ[\s\.]+[0-9]+)"
        + БазисШаблона + "(?:\s*\)\s*(?:\([^\)\()]\))?\s*$)"); // Скобки
    ШаблоныПоиска.Добавить("(?i)\s*" + БазисШаблона + "(?![\s+,-][0-9]+\s*эт[аж\.]{1,2}\s*)" + "(?:[\s(,\.]|[\s/\.""]?\s*$)"); // Этаж
    ШаблоныПоиска.Добавить("(?i)\s*" + БазисШаблона + "(?:[\s(,\.]|[\s/\.""]?\s*$)"); // Базовый

    // Расшифровка адресов для всех вариантов шаблонов поиска
    Для Каждого ТекущийШаблонПоиска Из ШаблоныПоиска Цикл
        СтруктураАдреса = ПолучитьАдресПоНаименованиюОбъектаАбонентаПоШаблону(НаименованиеОбъектаАбонента, ТекущийШаблонПоиска);
        Если СтруктураАдреса.Успех = Истина
            И ПустаяСтрока(СтруктураАдреса.Дом) = Ложь
            И ПустаяСтрока(СтруктураАдреса.Улица) = Ложь Тогда

            // Очистка найденных значений
            СтруктураАдреса.Улица = СтрЗаменитьПоРегулярномуВыражению(СтруктураАдреса.Улица, "\s+ул[\.\s]*$", "");
            СтруктураАдреса.Дом = СтрЗаменитьПоРегулярномуВыражению(СтруктураАдреса.Дом, "[\s""\.]+", "");

            ЗаполнитьЗначенияСвойств(РезультатФункции, СтруктураАдреса);
            Возврат РезультатФункции; // Адрес распознан
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции; // Адрес не распознан
КонецФункции

// Гарант+ Килипенко 11.11.2024 [F00230766] Перенос признака ТолькоДляКанализации ++
//
// Параметры:
//  Значение - Строка
// Возвращаемое значение:
//  - Строка
Функция ОчиститьВедущиеНули(Знач Значение) Экспорт
    Возврат СтрЗаменитьПоРегулярномуВыражению(Значение, "^0+", "");
КонецФункции // Гарант+ Килипенко 11.11.2024 [F00230766] Перенос признака ТолькоДляКанализации --

#КонецОбласти // РасшифровкаДанных

// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг ++
#Область Услуги

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуХолодноеВодоснабжение() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуХолодноеВодоснабжение();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуГорячееВодоснабжение() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуГорячееВодоснабжение();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуКанализации() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуКанализации();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуПодогреваХолоднойВоды() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуПодогреваХолоднойВоды();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуНегативногоВоздействияНаЦСВ() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуНегативногоВоздействияНаЦСВ();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуВодоотведениеХолоднойВоды() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуВодоотведениеХолоднойВоды();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуПлатаЗаХолодноеВодоснабжениеОИ() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуПлатаЗаХолодноеВодоснабжениеОИ();
КонецФункции

// Гарант+ Килипенко 07.10.2024 [F00230765] перенос счетчиков Потерь воды (по среднему) ++
//
// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуПотериВоды() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуПотериВоды();
КонецФункции // // Гарант+ Килипенко 07.10.2024 [F00230765] перенос счетчиков Потерь воды (по среднему) --

// Возвращаемое значение:
//  - Структура из КлючИЗначение
//      * Ключ - Строка
//      * Значение - Структура
//          ** Ссылка - СправочникСсылка.КВП_Услуги
//          ** Код - Строка
//          ** Наименование - Строка
Функция ПолучитьОбязательныеУслуги() Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьОбязательныеУслуги();
КонецФункции

#КонецОбласти // Услуги
// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг --

#Область ВидыТарифов

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.lc_ВидыТарифов
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьВидТарифаПрочиеПотребители() Экспорт
    Возврат ГП_РаботаСТарифами.ПолучитьВидТарифаПрочиеПотребители();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.lc_ВидыТарифов
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьВидТарифаДляБюджетныхОрганизаций() Экспорт
    Возврат ГП_РаботаСТарифами.ПолучитьВидТарифаДляБюджетныхОрганизаций();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.lc_ВидыТарифов
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьВидТарифаДляНаселения() Экспорт
    Возврат ГП_РаботаСТарифами.ПолучитьВидТарифаДляНаселения();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.lc_ВидыТарифов
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьВидТарифаНегативноеБезНДС() Экспорт
    Возврат ГП_РаботаСТарифами.ПолучитьВидТарифаНегативноеБезНДС();
КонецФункции

// Теплоснабжающие орг-ции
// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.lc_ВидыТарифов
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьВидТарифаТеплоснабжающиеОрганизации() Экспорт
    Возврат ГП_РаботаСТарифами.ПолучитьВидТарифаТеплоснабжающиеОрганизации();
КонецФункции

// Транспортировка по сетям
// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.lc_ВидыТарифов
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьВидТарифаТранспортировкаПоСетям() Экспорт
    Возврат ГП_РаботаСТарифами.ПолучитьВидТарифаТранспортировкаПоСетям();
КонецФункции

// Возвращаемое значение:
//  - Структура из КлючИЗначение
//      * Ключ - Строка
//      * Значение - Структура
//          ** Ссылка - СправочникСсылка.lc_ВидыТарифов
//          ** Код - Строка
//          ** Наименование - Строка
Функция ПолучитьОбязательныеВидыТарифов() Экспорт
    Возврат ГП_РаботаСТарифами.ПолучитьОбязательныеВидыТарифов();
КонецФункции

#КонецОбласти // ВидыТарифов

#Область ВспомогательныеФункцииЗаполнения

// Служебная функция. Помещает результат во временное хранилище или выполняет возврат результата
// Параметры:
//  Результат - Произвольный
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПоместитьВХранилищеИВернуть(Знач Результат, Знач АдресХранилища = Неопределено) Экспорт
    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
        Возврат Неопределено;
    Иначе
        Возврат Результат;
    КонецЕсли;
КонецФункции

// Устарела. Не использовать
//
// Параметры:
//  Описание - Строка
//  СообщитьПользователю - Булево
//  СообщитьКратко - Булево
// Возвращаемое значение:
//  - Структура
//      * ПодробноеПредставлениеОшибки - Строка
//      * КраткоеПредставлениеОшибки - Строка
Функция УдалитьЗаписатьОшибкуВЖурнал(Знач Описание, Знач СообщитьПользователю = Ложь, Знач СообщитьКратко = Истина) Экспорт
    РезультатФункции = Новый Структура("ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки");

    РезультатФункции.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    РезультатФункции.КраткоеПредставлениеОшибки = "";
    Если СообщитьКратко Тогда
        РезультатФункции.КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    КонецЕсли;

    ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
        Описание,
        УровеньЖурналаРегистрации.Ошибка, , ,
        РезультатФункции.ПодробноеПредставлениеОшибки);

    Если СообщитьПользователю Тогда
        ОбщегоНазначения.СообщениеПользователю(?(СообщитьКратко,
                РезультатФункции.КраткоеПредставлениеОшибки, РезультатФункции.ПодробноеПредставлениеОшибки));
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Описание - Строка
//  ИнформацияОбОшибке - Произвольный
//  СообщитьПользователю - Булево
//  СообщитьКратко - Булево
// Возвращаемое значение:
//  - Структура
//      * ПодробноеПредставлениеОшибки - Строка
//      * КраткоеПредставлениеОшибки - Строка
Функция ЗаписатьОшибкуВЖурнал(
        Знач Описание, Знач ИнформацияОбОшибке, Знач СообщитьПользователю = Ложь, Знач СообщитьКратко = Истина) Экспорт

    РезультатФункции = Новый Структура("ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки");

    РезультатФункции.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
    РезультатФункции.КраткоеПредставлениеОшибки = "";
    Если СообщитьКратко Тогда
        РезультатФункции.КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
    КонецЕсли;

    ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
        Описание,
        УровеньЖурналаРегистрации.Ошибка, , ,
        РезультатФункции.ПодробноеПредставлениеОшибки);

    Если СообщитьПользователю Тогда
        ОбщегоНазначения.СообщениеПользователю(?(СообщитьКратко,
                РезультатФункции.КраткоеПредставлениеОшибки, РезультатФункции.ПодробноеПредставлениеОшибки));
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ВспомогательныеФункцииЗаполнения

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --

// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг ++
#Область СлужебныйПрограммныйИнтерфейс

// Устарела. Использовать `ГП_РаботаСУслугами.ПолучитьУслугуПоКоду`
//
// Параметры:
//  Код - Строка
//  ИгнорироватьПомеченныеНаУдаление - Булево
// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.КВП_Услуги
//      * Код - Строка
//      * Наименование - Строка
Функция ПолучитьУслугуПоКоду(Знач Код, Знач ИгнорироватьПомеченныеНаУдаление = Истина) Экспорт
    Возврат ГП_РаботаСУслугами.ПолучитьУслугуПоКоду(Код, ИгнорироватьПомеченныеНаУдаление);
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг --

// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 ++
#Область СлужебныеПроцедурыИФункции

// Выполняет анализ адреса здания по наименованию объекта абонента (здания)
// Параметры:
//  НаименованиеОбъектаАбонента - Строка
//  ШаблонПоиска - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Улица - Строка, Неопределено
//      * Дом - Строка, Неопределено
Функция ПолучитьАдресПоНаименованиюОбъектаАбонентаПоШаблону(Знач НаименованиеОбъектаАбонента, Знач ШаблонПоиска)
    РезультатФункции = Новый Структура("Успех, Улица, Дом", Ложь);

    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(НаименованиеОбъектаАбонента, ШаблонПоиска);

    // Проверка найденных групп
    НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
    Если РезультатПоиска.НачальнаяПозиция = 0 ИЛИ НайденныеГруппы.Количество() < 2 Тогда
        Возврат РезультатФункции; // Адрес не распознан
    КонецЕсли;

    // Формирование результата
    РезультатФункции.Успех = Истина;
    РезультатФункции.Улица = СокрЛП(НайденныеГруппы[0].Значение);
    РезультатФункции.Дом = СокрЛП(НайденныеГруппы[1].Значение);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 02.08.2024 [F00226689] перенос зданий из БП77 --
