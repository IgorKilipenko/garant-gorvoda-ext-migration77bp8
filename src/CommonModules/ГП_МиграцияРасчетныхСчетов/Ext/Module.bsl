// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных расчетных счетов (из БП 7.7) из файла и записывает данные в регистр `ГП_РасчетныеСчетаБП77`
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//      * СохранятьСвязи - Булево - Если Ложь, установленные связи с БанковскимСчетом
//                                      будут разорваны (поле `БанковскийСчет` будет установлено в значение пустая ссылка)
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанных - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено
Функция ЗагрузитьДанныеРасчетныхСчетовВРегистр(ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанных, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "РасчетныйСчет");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных.";
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных в регистр
    РасчетныйСчетБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеРасчетныхСчетовВРегистр(РасчетныйСчетБП77, ПараметрыЗагрузки.СохранятьСвязи);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанных = РезультатЗаписи.КоличествоЗаписанных;

    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных расчетных счетов в регистр `ГП_РасчетныеСчетаБП77` (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеРасчетныхСчетов - Массив из Структура - Данные БП77
//  СохранятьСвязи - Булево - Если Истина, связи с банковскими счетами счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанных - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеРасчетныхСчетовВРегистр(Знач ИсходныеДанныеРасчетныхСчетов, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, КоличествоЗаписанных, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеРасчетныхСчетов = Неопределено ИЛИ ИсходныеДанныеРасчетныхСчетов.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийРасчетногоСчета = "ВсегдаУказыватьКПП";

    // Транзакция записи в регистр ГП_ДоговорыБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого РасчетныйСчетБП77 Из ИсходныеДанныеРасчетныхСчетов Цикл
            НаборЗаписейРасчетныхСчетов = СоздатьНаборЗаписейРасчетныхСчетовБП77(РасчетныйСчетБП77);

            // Данные для сохранения связанного банковского счета записи
            СвязанныйБанковскийСчет = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейРасчетныхСчетов.Прочитать();
                Если НаборЗаписейРасчетныхСчетов.Количество() > 0 Тогда
                    СвязанныйБанковскийСчет = НаборЗаписейРасчетныхСчетов[0].БанковскийСчет;
                    СвязанныйБанковскийСчет = ?(ЗначениеЗаполнено(СвязанныйБанковскийСчет), СвязанныйБанковскийСчет, Неопределено);
                    НаборЗаписейРасчетныхСчетов.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейРасчетныхСчетов.Добавить();

            // Заполнение данных
            ЗаполнитьЗначенияСвойств(НоваяЗапись, РасчетныйСчетБП77, ,
                СтрШаблон("%1", КлючиУсловийРасчетногоСчета));

            // Заполнение полей с преобразованием типов
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
                    КлючиУсловийРасчетногоСчета, ",", Ложь, Истина) Цикл

                НоваяЗапись[Ключ] = ?(РасчетныйСчетБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;

            НаборЗаписейРасчетныхСчетов.Записать(Истина);
            РезультатФункции.КоличествоЗаписанных = РезультатФункции.КоличествоЗаписанных + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при загрузке данных расчетных счетов в регистр ""ГП_РасчетныеСчетаБП77"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.СообщениеОбОшибке = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоЗаписанных = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  РасчетныйСчетБП77 - Структура
//      * КонтрагентКод - Строка - Код контрагента в БП77
//      * Код - Строка - Код расчетного счета в БП77
// Возвращаемое значение:
//  - РегистрСведений.ГП_РасчетныеСчетаБП77.НаборЗаписей
Функция СоздатьНаборЗаписейРасчетныхСчетовБП77(Знач РасчетныйСчетБП77) Экспорт
    НаборЗаписей = РегистрыСведений.ГП_РасчетныеСчетаБП77.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КонтрагентКод.Установить(РасчетныйСчетБП77.КонтрагентКод);
    НаборЗаписей.Отбор.Код.Установить(РасчетныйСчетБП77.Код);

    Возврат НаборЗаписей;
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
