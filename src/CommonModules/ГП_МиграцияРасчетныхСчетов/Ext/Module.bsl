// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных расчетных счетов (из БП 7.7) из файла и записывает данные в регистр `ГП_РасчетныеСчетаБП77`
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//      * СохранятьСвязи - Булево - Если Ложь, установленные связи с БанковскимСчетом
//                                      будут разорваны (поле `БанковскийСчет` будет установлено в значение пустая ссылка)
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанных - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено
Функция ЗагрузитьДанныеРасчетныхСчетовВРегистр(ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанных, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "РасчетныйСчет");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных.";
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных в регистр
    РасчетныйСчетБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеРасчетныхСчетовВРегистр(РасчетныйСчетБП77, ПараметрыЗагрузки.СохранятьСвязи);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанных = РезультатЗаписи.КоличествоЗаписанных;

    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Создает новые (недостающие в ИБ) банки для создания банковских счетов абонентов из БП77.
//  !!! Для корректной работы требуется обязательное наличие установленных связей контрагентов в регистре `ГП_КонтрагентыБП77`
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеБанки - Массив из СправочникСсылка.Банки
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьБанкиДляПеренесенныхРасчетныхСчетовАбонентов() Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеБанки, ТекстСообщения", Истина, Новый Массив);

    ТаблицаДляСозданияБанков = ПолучитьТаблицуДанныхСозданияБанковДляПеренесенныхАбонентов();

    НачатьТранзакцию();
    Попытка
        Для Каждого БанкБП77 Из ТаблицаДляСозданияБанков Цикл
            БанкОбъект = Справочники.Банки.СоздатьЭлемент();
            БанкОбъект.Код = БанкБП77.Код;
            БанкОбъект.Наименование = БанкБП77.Наименование;
            БанкОбъект.КоррСчет = БанкБП77.КоррСчет;
            БанкОбъект.Город = БанкБП77.Местонахождение;

            БанкОбъект.ГП_ИдентификаторБП77 = БанкБП77.Код;
            БанкОбъект.ГП_СозданАвтоматически = Истина;

            БанкОбъект.Записать();
            РезультатФункции.СозданныеБанки.Добавить(БанкОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании банков.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеБанки.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Создает банковские счета для перенесенных (созданных ГарантПлюс) абонентов (по данным расчетных счетов).
//  !!! Для корректной работы требуется обязательное наличие установленных связей контрагентов в регистре `ГП_КонтрагентыБП77`
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеБанковскиеСчета - Массив из СправочникСсылка.БанковскиеСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьБанковскиеСчетаДляПеренесенныхАбонентов() Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеБанковскиеСчета, ТекстСообщения", Истина, Новый Массив);

    // !!! Требуется предварительно выполнить проверку уникальности кодов банков !!!

    ТаблицаДляСозданияБанковскихСчетов = ПолучитьТаблицуДанныхДляСозданияБанковскихСчетовАбонентов();

    ВалютаРубли = Справочники.Валюты.НайтиПоКоду("643");

    НачатьТранзакцию();
    Попытка
        Для Каждого РасчетныйСчетБП77 Из ТаблицаДляСозданияБанковскихСчетов Цикл
            БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
            БанковскийСчетОбъект.Наименование = СтрШаблон("%1, р/с №%2", РасчетныйСчетБП77.Наименование, РасчетныйСчетБП77.Номер);
            БанковскийСчетОбъект.Банк = РасчетныйСчетБП77.Банк;
            БанковскийСчетОбъект.ВсегдаУказыватьКПП = РасчетныйСчетБП77.ВсегдаУказыватьКПП;
            БанковскийСчетОбъект.ВалютаДенежныхСредств = ВалютаРубли;
            БанковскийСчетОбъект.НомерСчета = РасчетныйСчетБП77.Номер;
            БанковскийСчетОбъект.ВидСчета = "Расчетный";
            БанковскийСчетОбъект.Владелец = РасчетныйСчетБП77.Контрагент;

            БанковскийСчетОбъект.ГП_ИдентификаторБП77 = СформироватьСоставнойКодБанковскогоСчета(
                    РасчетныйСчетБП77.КонтрагентКод, РасчетныйСчетБП77.Код);
            БанковскийСчетОбъект.ГП_СозданАвтоматически = Истина;

            БанковскийСчетОбъект.Записать();
            РезультатФункции.СозданныеБанковскиеСчета.Добавить(БанковскийСчетОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании банковских счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеБанковскиеСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных расчетных счетов в регистр `ГП_РасчетныеСчетаБП77` (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеРасчетныхСчетов - Массив из Структура - Данные БП77
//  СохранятьСвязи - Булево - Если Истина, связи с банковскими счетами счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанных - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеРасчетныхСчетовВРегистр(Знач ИсходныеДанныеРасчетныхСчетов, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, КоличествоЗаписанных, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеРасчетныхСчетов = Неопределено ИЛИ ИсходныеДанныеРасчетныхСчетов.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийРасчетногоСчета = "ВсегдаУказыватьКПП";

    // Транзакция записи в регистр ГП_ДоговорыБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого РасчетныйСчетБП77 Из ИсходныеДанныеРасчетныхСчетов Цикл
            НаборЗаписейРасчетныхСчетов = СоздатьНаборЗаписейРасчетныхСчетовБП77(РасчетныйСчетБП77);

            // Данные для сохранения связанного банковского счета записи
            СвязанныйБанковскийСчет = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейРасчетныхСчетов.Прочитать();
                Если НаборЗаписейРасчетныхСчетов.Количество() > 0 Тогда
                    СвязанныйБанковскийСчет = НаборЗаписейРасчетныхСчетов[0].БанковскийСчет;
                    СвязанныйБанковскийСчет = ?(ЗначениеЗаполнено(СвязанныйБанковскийСчет), СвязанныйБанковскийСчет, Неопределено);
                    НаборЗаписейРасчетныхСчетов.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейРасчетныхСчетов.Добавить();

            // Заполнение данных
            ЗаполнитьЗначенияСвойств(НоваяЗапись, РасчетныйСчетБП77, ,
                СтрШаблон("%1", КлючиУсловийРасчетногоСчета));

            // Заполнение полей с преобразованием типов
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
                    КлючиУсловийРасчетногоСчета, ",", Ложь, Истина) Цикл

                НоваяЗапись[Ключ] = ?(РасчетныйСчетБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;

            НаборЗаписейРасчетныхСчетов.Записать(Истина);
            РезультатФункции.КоличествоЗаписанных = РезультатФункции.КоличествоЗаписанных + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при загрузке данных расчетных счетов в регистр ""ГП_РасчетныеСчетаБП77"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.СообщениеОбОшибке = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоЗаписанных = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  РасчетныйСчетБП77 - Структура
//      * КонтрагентКод - Строка - Код контрагента в БП77
//      * Код - Строка - Код расчетного счета в БП77
// Возвращаемое значение:
//  - РегистрСведений.ГП_РасчетныеСчетаБП77.НаборЗаписей
Функция СоздатьНаборЗаписейРасчетныхСчетовБП77(Знач РасчетныйСчетБП77) Экспорт
    НаборЗаписей = РегистрыСведений.ГП_РасчетныеСчетаБП77.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КонтрагентКод.Установить(РасчетныйСчетБП77.КонтрагентКод);
    НаборЗаписей.Отбор.Код.Установить(РасчетныйСчетБП77.Код);

    Возврат НаборЗаписей;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * КонтрагентКод - Строка
//      * Код - Строка
//      * БанковскийСчет - СправочникСсылка.БанковскиеСчета
//      * Номер - Строка
//      * БанкОрганизацииКод - Строка
//      * БанкОрганизацииНаименование - Строка
//      * БанкОрганизацииКоррСчет - Строка
//      * БанкОрганизацииМестонахождение - Строка
//      * БанкОрганизацииАдрес - Строка
//      * БанкОрганизацииТелефоны - Строка
//      * ВсегдаУказыватьКПП - Булево
//      * Контрагент - СправочникСсылка.Контрагенты
Функция ПолучитьТаблицуДанныхДляСозданияБанковскихСчетовАбонентов() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = СтрШаблон(
            "%1
            |%2", ПолучитьТекстЗапросаИсходныхДанныхДляСозданияРасчетныхСчетовАбонентов(),
            "////////////////////////////////////////////////////////////////////////////////
            |// Расчетные счета абонентов для создания
            |ВЫБРАТЬ
            |	ГП_РасчетныеСчетаБП77.КонтрагентКод КАК КонтрагентКод,
            |	ГП_РасчетныеСчетаБП77.Код КАК Код,
            |	ГП_РасчетныеСчетаБП77.БанковскийСчет КАК БанковскийСчет,
            |	ГП_РасчетныеСчетаБП77.Наименование КАК Наименование,
            |	ГП_РасчетныеСчетаБП77.Номер КАК Номер,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииКод КАК БанкОрганизацииКод,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииНаименование КАК БанкОрганизацииНаименование,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииКоррСчет КАК БанкОрганизацииКоррСчет,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииМестонахождение КАК БанкОрганизацииМестонахождение,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииАдрес КАК БанкОрганизацииАдрес,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииТелефоны КАК БанкОрганизацииТелефоны,
            |	ГП_РасчетныеСчетаБП77.ВсегдаУказыватьКПП КАК ВсегдаУказыватьКПП,
            |	ВТ_АбонентыДляСозданияРасчетныхСчетов.Контрагент КАК Контрагент
            |ПОМЕСТИТЬ ВТ_РасчетныеСчетаДляСоздания
            |ИЗ
            |	РегистрСведений.ГП_РасчетныеСчетаБП77 КАК ГП_РасчетныеСчетаБП77
            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АбонентыДляСозданияРасчетныхСчетов КАК ВТ_АбонентыДляСозданияРасчетныхСчетов
            |		ПО ГП_РасчетныеСчетаБП77.КонтрагентКод = ВТ_АбонентыДляСозданияРасчетныхСчетов.Код
            |			И (ГП_РасчетныеСчетаБП77.БанковскийСчет = &ПустаяСсылкаБанковскийСчет)
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |// Результат Расчетные счета для создания
            |ВЫБРАТЬ
            |	ВТ_РасчетныеСчетаДляСоздания.КонтрагентКод КАК КонтрагентКод,
            |	ВТ_РасчетныеСчетаДляСоздания.Код КАК Код,
            |	ВТ_РасчетныеСчетаДляСоздания.БанковскийСчет КАК БанковскийСчет,
            |	ВТ_РасчетныеСчетаДляСоздания.Наименование КАК Наименование,
            |	ВТ_РасчетныеСчетаДляСоздания.Номер КАК Номер,
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКод КАК БанкОрганизацииКод,
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииНаименование КАК БанкОрганизацииНаименование,
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКоррСчет КАК БанкОрганизацииКоррСчет,
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииМестонахождение КАК БанкОрганизацииМестонахождение,
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииАдрес КАК БанкОрганизацииАдрес,
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииТелефоны КАК БанкОрганизацииТелефоны,
            |	ВТ_РасчетныеСчетаДляСоздания.ВсегдаУказыватьКПП КАК ВсегдаУказыватьКПП,
            |	ВТ_РасчетныеСчетаДляСоздания.Контрагент КАК Контрагент,
            |	ЕСТЬNULL(ВТ_Банки.Ссылка, &ПустаяСсылкаБанк) КАК Банк
            |ИЗ
            |	ВТ_РасчетныеСчетаДляСоздания КАК ВТ_РасчетныеСчетаДляСоздания
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Банки КАК ВТ_Банки
            |		ПО ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКод = ВТ_Банки.Код");

    Запрос.УстановитьПараметр("ПустаяСсылкаБанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяСсылкаБанк", Справочники.Банки.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Код - Строка
//      * Наименование - Строка
//      * КоррСчет - Строка
//      * Местонахождение - Строка
Функция ПолучитьТаблицуДанныхСозданияБанковДляПеренесенныхАбонентов() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = СтрШаблон(
            "%1
            |%2", ПолучитьТекстЗапросаИсходныхДанныхДляСозданияРасчетныхСчетовАбонентов(),
            "////////////////////////////////////////////////////////////////////////////////
            |// Расчетные счета абонентов для создания
            |ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииКод КАК БанкОрганизацииКод,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииНаименование КАК БанкОрганизацииНаименование,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииКоррСчет КАК БанкОрганизацииКоррСчет,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииМестонахождение КАК БанкОрганизацииМестонахождение,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииАдрес КАК БанкОрганизацииАдрес,
            |	ГП_РасчетныеСчетаБП77.БанкОрганизацииТелефоны КАК БанкОрганизацииТелефоны
            |ПОМЕСТИТЬ ВТ_РасчетныеСчетаДляСоздания
            |ИЗ
            |	РегистрСведений.ГП_РасчетныеСчетаБП77 КАК ГП_РасчетныеСчетаБП77
            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АбонентыДляСозданияРасчетныхСчетов КАК ВТ_АбонентыДляСозданияРасчетныхСчетов
            |		ПО ГП_РасчетныеСчетаБП77.КонтрагентКод = ВТ_АбонентыДляСозданияРасчетныхСчетов.Код
            |			И (ГП_РасчетныеСчетаБП77.БанковскийСчет = &ПустаяСсылкаБанковскийСчет)
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |// Банки для создания
            |ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКод КАК Код,
            |	МАКСИМУМ(ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииНаименование) КАК Наименование,
            |	МАКСИМУМ(ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКоррСчет) КАК КоррСчет,
            |	МАКСИМУМ(ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииМестонахождение) КАК Местонахождение
            |ИЗ
            |	ВТ_РасчетныеСчетаДляСоздания КАК ВТ_РасчетныеСчетаДляСоздания
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Банки КАК ВТ_Банки
            |		ПО ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКод = ВТ_Банки.Код
            |ГДЕ
            |	ВТ_Банки.Ссылка ЕСТЬ NULL
            |	И ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКод <> """"
            |
            |СГРУППИРОВАТЬ ПО
            |	ВТ_РасчетныеСчетаДляСоздания.БанкОрганизацииКод
            |");

    Запрос.УстановитьПараметр("ПустаяСсылкаБанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КонтрагентКод - Строка
//  РасчетныйСчетКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьСоставнойКодБанковскогоСчета(Знач КонтрагентКод, Знач РасчетныйСчетКод) Экспорт
    Возврат СтрШаблон("%1_%2", КонтрагентКод, РасчетныйСчетКод);
КонецФункции

#Область ТолькоДляРазработки

Функция ИсправитьИдентификаторыПеренесенныхБанковскихСчетов()
    Возврат Неопределено;
КонецФункции

#КонецОбласти // ТолькоДляРазработки

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область СлужебныеПроцедурыИФункции

#Область ПомощникиФормированияЗапросов

Функция ПолучитьТекстЗапросаИсходныхДанныхДляСозданияРасчетныхСчетовАбонентов()
    Возврат
    "////////////////////////////////////////////////////////////////////////////////
    |// Все контрагенты ИБ
    |ВЫБРАТЬ
    |	Контрагенты.Ссылка КАК Ссылка,
    |	Контрагенты.Код КАК Код,
    |	Контрагенты.Наименование КАК Наименование,
    |	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
    |	Контрагенты.ИНН КАК ИНН,
    |	Контрагенты.КПП КАК КПП,
    |	Контрагенты.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
    |	Контрагенты.ГП_СозданАвтоматически КАК ГП_СозданАвтоматически
    |ПОМЕСТИТЬ ВТ_Котрагенты
    |ИЗ
    |	Справочник.Контрагенты КАК Контрагенты
    |ГДЕ
    |	Контрагенты.ЭтоГруппа = ЛОЖЬ
    |	И Контрагенты.ПометкаУдаления = ЛОЖЬ
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |// Контрагенты без банковских счетов
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	ВТ_Котрагенты.Ссылка КАК Ссылка
    |ПОМЕСТИТЬ ВТ_КонтрагентыБезБанковскихСчетов
    |ИЗ
    |	ВТ_Котрагенты КАК ВТ_Котрагенты
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
    |		ПО ВТ_Котрагенты.Ссылка = БанковскиеСчета.Владелец
    |			И (БанковскиеСчета.ПометкаУдаления = ЛОЖЬ)
    |ГДЕ
    |	БанковскиеСчета.Ссылка ЕСТЬ NULL
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |// Все абоненты БП 7.7
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ГП_КонтрагентыБП77.Код КАК Код,
    |	ГП_КонтрагентыБП77.Контрагент КАК Контрагент
    |ПОМЕСТИТЬ ВТ_Абоненты
    |ИЗ
    |	РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
    |ГДЕ
    |	ГП_КонтрагентыБП77.Группа = ""Абоненты""
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |// Абоненты для создания расчетных счетов
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ВТ_Абоненты.Код КАК Код,
    |	ВТ_Абоненты.Контрагент КАК Контрагент
    |ПОМЕСТИТЬ ВТ_АбонентыДляСозданияРасчетныхСчетов
    |ИЗ
    |	ВТ_Абоненты КАК ВТ_Абоненты
    |ГДЕ
    |	ВТ_Абоненты.Контрагент В
    |			(ВЫБРАТЬ
    |				ВТ_КонтрагентыБезБанковскихСчетов.Ссылка
    |			ИЗ
    |				ВТ_КонтрагентыБезБанковскихСчетов)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |// Все банки ИБ
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	МАКСИМУМ(Банки.Ссылка) КАК Ссылка,
    |	Банки.Код КАК Код
    |ПОМЕСТИТЬ ВТ_Банки
    |ИЗ
    |	Справочник.Банки КАК Банки
    |ГДЕ
    |	Банки.ЭтоГруппа = ЛОЖЬ
    |	И Банки.ПометкаУдаления = ЛОЖЬ
    |
    |СГРУППИРОВАТЬ ПО
    |   Банки.Код
    |;";
КонецФункции

#КонецОбласти // ПомощникиФормированияЗапросов

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --
