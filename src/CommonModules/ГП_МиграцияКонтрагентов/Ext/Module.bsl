// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных контрагентов (из БП 7.7) из файла и записывает данные в регистр ГП_УслугиБП77
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//      * СохранятьСвязи - Булево - Если Ложь, установленные связи с Лицевыми счетами
//                                      будут разорваны (поле Лицевой счет будет установлено в значение пустая ссылка)
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхКонтрагентов - Число
//      * ТекстСообщения - Строка
//  - Неопределено
Функция ЗагрузитьДанныеКонтрагентовВРегистр(ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхКонтрагентов, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "Контрагент");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных.";
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных услуг в регистр
    КонтрагентБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеКонтрагентовВРегистр(КонтрагентБП77, ПараметрыЗагрузки.СохранятьСвязи);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхКонтрагентов = РезультатЗаписи.КоличествоЗаписанныхКонтрагентов;

    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных контрагентов в регистр ГП_КонтрагентыП77 (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеКонтрагентов - Массив из Структура - Данные БП77
//  СохранятьСвязи - Булево - Если Истина, связи с контрагентами счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхКонтрагентов - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеКонтрагентовВРегистр(Знач ИсходныеДанныеКонтрагентов, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура(
        "Успех, КоличествоЗаписанныхКонтрагентов, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеКонтрагентов = Неопределено ИЛИ ИсходныеДанныеКонтрагентов.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийКонтрагента = "Согласие";
    КлючиЧиселКонтрагента = "ТипЗаказчика,ТипУслуги,Очередность,Акцепт,СторонниеСубсидии,Аванс";
    КлючиДатКонтрагента = "ДокументДатаВыдачи";

    // Транзакция записи в регистр ГП_КонтрагентыБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого КонтрагентБП77 Из ИсходныеДанныеКонтрагентов Цикл
            НаборЗаписейКонтрагентов = СоздатьНаборЗаписейКонтрагентовБП77(КонтрагентБП77);

            // Данные для сохранения связанного контрагента записи
            СвязанныйКонтрагент = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейКонтрагентов.Прочитать();
                Если НаборЗаписейКонтрагентов.Количество() > 0 Тогда
                    СвязанныйКонтрагент = НаборЗаписейКонтрагентов[0].Контрагент;
                    СвязанныйКонтрагент = ?(ЗначениеЗаполнено(СвязанныйКонтрагент), СвязанныйКонтрагент, Неопределено);
                    НаборЗаписейКонтрагентов.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейКонтрагентов.Добавить();

            // Заполнение данных контрагента
            ЗаполнитьЗначенияСвойств(НоваяЗапись, КонтрагентБП77, ,
                СтрШаблон("%1,%2,%3", КлючиУсловийКонтрагента, КлючиЧиселКонтрагента, КлючиДатКонтрагента));

            // Заполнение полей с преобразованием типов
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиДатКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВДату(КонтрагентБП77[Ключ], ЧастиДаты.Дата);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(КонтрагентБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КонтрагентБП77[Ключ]);
            КонецЦикла;

            // Сохранение (оставляем без изменений) связанного контрагента записи
            Если СвязанныйКонтрагент <> Неопределено Тогда
                НоваяЗапись.Контрагент = СвязанныйКонтрагент;
                РезультатФункции.КоличествоСохраненныхСвязей = РезультатФункции.КоличествоСохраненныхСвязей + 1;
            КонецЕсли;

            НаборЗаписейКонтрагентов.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхКонтрагентов = РезультатФункции.КоличествоЗаписанныхКонтрагентов + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных зданий в регистр ""ГП_КонтрагентыБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхКонтрагентов = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КонтрагентБП77 - Структура
//      * Код - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_ЗданияБП77.НаборЗаписей
Функция СоздатьНаборЗаписейКонтрагентовБП77(Знач КонтрагентБП77) Экспорт
    НаборЗаписей = РегистрыСведений.ГП_КонтрагентыБП77.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Код.Установить(КонтрагентБП77.Код);

    Возврат НаборЗаписей;
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --
