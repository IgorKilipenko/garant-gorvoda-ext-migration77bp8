// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных контрагентов (из БП 7.7) из файла и записывает данные в регистр `ГП_КонтрагентыБП77`
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//      * СохранятьСвязи - Булево - Если Ложь, установленные связи с Контрагентами
//                                      будут разорваны (поле `Контрагент` будет установлено в значение пустая ссылка)
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхКонтрагентов - Число
//      * ТекстСообщения - Строка
//  - Неопределено
Функция ЗагрузитьДанныеКонтрагентовВРегистр(ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхКонтрагентов, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияОбщегоНазначения.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "Контрагент");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных.";
        Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных контрагентов в регистр
    КонтрагентБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеКонтрагентовВРегистр(КонтрагентБП77, ПараметрыЗагрузки.СохранятьСвязи);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхКонтрагентов = РезультатЗаписи.КоличествоЗаписанныхКонтрагентов;

    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
//
// Создает новые объекты `Контрагентов` (типа абонент) по данным из регистра `ГП_КонтрагентыБП77`.
//  Создаются только контрагенты для которых не найдены лицевые счета (т.е. выполняется перенос контрагентов
//  из БП77 но только тех контрагентов которые не были перенесены ранее собственными силами клиента)
// Параметры:
//  ПараметрыСоздания - Структура
//      * ОбновлятьСвязиПередСозданием - Булево - Если Истина, тогда перед началом транзакции создания будут обновлены связи
//          контрагентов БП77 в регистре `ГП_КонтрагентыБП77` (по умолчанию Истина).
//          !!! Внимание не рекомендуется устанавливать значение в Ложь, т.к. в текущей реализации при отборе записей для создания
//              документов используются установленные связи контрагентов в регистре `ГП_КонтрагентыБП77`.
//              Если на момент создания абонентов связи будут неактуальны функция отработает некорректно.
//      * ОбновлятьСвязиПослеСоздания - Булево - Если Истина, после операции создания абонентов буде выполнено обновление
//          связей в регистре `ГП_КонтрагентыБП77`.
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеКонтрагенты - Массив из СправочникСсылка.Контрагенты
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьАбонентовДляПеренесенныхЛицевыхСчетов(Знач ПараметрыСоздания = Неопределено) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, СозданныеКонтрагенты, ТекстСообщения", Истина, Новый Массив);

    // Установка параметров в значения по умолчанию
    Если ПараметрыСоздания = Неопределено Тогда
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("ОбновлятьСвязиПередСозданием", Истина);
        ПараметрыСоздания.Вставить("ОбновлятьСвязиПослеСоздания", Истина);
    КонецЕсли;

    // Выполняем установку(обновление) связей зданий
    Если ПараметрыСоздания.ОбновлятьСвязиПередСозданием Тогда
        РезультатУстановкиСвязей = УстановитьСоответствияАбонентов(Истина);
        Если РезультатУстановкиСвязей.Успех = Ложь Тогда
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = РезультатУстановкиСвязей.ТекстСообщения;

            Возврат РезультатФункции; // Ошибка при создании (обновлении связей)
        КонецЕсли;
    КонецЕсли;

    // Получение контрагентов для создания
    ТаблицаКонтрагентовБП77 = ПолучитьТаблицуАбонентовБП77ДляСоздания();
    Если ТаблицаКонтрагентовБП77.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных для создания
    КонецЕсли;

    // Создание контрагентов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанныхКонтрагента Из ТаблицаКонтрагентовБП77 Цикл
            // Общие
            НовыйКонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
            НовыйКонтрагентОбъект.Наименование = СтрокаДанныхКонтрагента.Наименование;
            НовыйКонтрагентОбъект.НаименованиеПолное = СтрокаДанныхКонтрагента.ПолнНаименование;
            НовыйКонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;

            // Реквизиты контрагента
            НовыйКонтрагентОбъект.ИНН = СтрокаДанныхКонтрагента.ИНН;
            НовыйКонтрагентОбъект.КПП = СтрокаДанныхКонтрагента.КПП;
            НовыйКонтрагентОбъект.КодПоОКПО = СтрокаДанныхКонтрагента.ОКПО;

            // ВидКонтрагента
            Если СтрокаДанныхКонтрагента.ВидКонтрагента = "Прочая организация" Тогда
                НовыйКонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
            ИначеЕсли СтрокаДанныхКонтрагента.ВидКонтрагента = "Инд. предприниматель" Тогда
                НовыйКонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
                НовыйКонтрагентОбъект.ИндивидуальныйПредприниматель = Истина;
            ИначеЕсли СтрокаДанныхКонтрагента.ВидКонтрагента = "Физ. лицо" Тогда
                НовыйКонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
            КонецЕсли;

            // Контактная информация
            ЗаполнитьКонтактнуюИнформациюКонтрагента(НовыйКонтрагентОбъект, СтрокаДанныхКонтрагента);

            // Признаки данных БП77
            НовыйКонтрагентОбъект.ГП_ИдентификаторБП77 = СтрокаДанныхКонтрагента.Код;
            НовыйКонтрагентОбъект.ГП_СозданАвтоматически = Истина;

            НовыйКонтрагентОбъект.Записать();
            РезультатФункции.СозданныеКонтрагенты.Добавить(НовыйКонтрагентОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании контрагентов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеКонтрагенты.Очистить();
    КонецПопытки;

    Если РезультатФункции.Успех И ПараметрыСоздания.ОбновлятьСвязиПослеСоздания Тогда
        РезультатУстановкиСвязей = УстановитьСоответствияАбонентов(Истина);
        Если РезультатУстановкиСвязей.Успех = Ложь Тогда
            ОбщегоНазначения.СообщитьПользователю(РезультатУстановкиСвязей.ТекстСообщения);
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

// Устанавливает связи Абонентов (контрагентов) БП77 с объектами Контрагентов из ИБ
//  (записывает ссылку Контрагент поле регистра ГП_КонтрагентыБП77)
// Параметры:
//  РазрыватьСуществующиеСвязи - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеСвязи - Массив из СправочникСсылка.Контрагенты
//      * ТекстСообщения - Строка
Функция УстановитьСоответствияАбонентов(Знач РазрыватьСуществующиеСвязи) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеСвязи, ТекстСообщения", Истина, Новый Массив, "");

    ТаблицаСоответствияКонтрагентов = ПолучитьТаблицуДляСозданияСвязейКонтрагентовБП77();

    НачатьТранзакцию();
    Попытка
        Для Каждого АбонентБП77 Из ТаблицаСоответствияКонтрагентов Цикл
            Если АбонентБП77.Контрагент = АбонентБП77.КонтрагентСопоставление Тогда
                Продолжить; // Связь Контрагента не изменилась (связь уже установлена)
            КонецЕсли;

            // Разрыв связи с контрагентом
            Если ЗначениеЗаполнено(АбонентБП77.КонтрагентСопоставление) = Ложь Тогда
                Если РазрыватьСуществующиеСвязи Тогда
                    АбонентБП77.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
                Иначе
                    Продолжить;
                КонецЕсли;
            КонецЕсли;

            // Отбор записей регистра по составному коду
            НаборЗаписейКонтрагентов = СоздатьНаборЗаписейКонтрагентовБП77(АбонентБП77);
            НаборЗаписейКонтрагентов.Прочитать();

            // Проверка валидности набора записей (набор должен содержать не более одной записи)
            НоваяЗапись = Неопределено;
            Если НаборЗаписейКонтрагентов.Количество() = 0 Тогда
                НоваяЗапись = НаборЗаписейКонтрагентов.Добавить();
            ИначеЕсли НаборЗаписейКонтрагентов.Количество() = 1 Тогда
                НоваяЗапись = НаборЗаписейКонтрагентов[0];
            КонецЕсли;
            Если НоваяЗапись = Неопределено Тогда
                ВызватьИсключение("Ошибка создания связей для абонентов. Неоднозначные параметры отбора составного кода контрагента.");
            КонецЕсли;

            // Запись связи с контрагентом
            НоваяЗапись.Контрагент = АбонентБП77.КонтрагентСопоставление;
            НаборЗаписейКонтрагентов.Записать(Истина);
            РезультатФункции.ОбновленныеСвязи.Добавить(НоваяЗапись.Контрагент);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при записи соответствий абонентов в регистр ""ГП_КонтрагентыБП77"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.ОбновленныеСвязи.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись исходных данных контрагентов в регистр ГП_КонтрагентыП77 (по данным из БП77)
//  Существующие записи по отбору составного кода будут перезаписаны
// Параметры:
//  ИсходныеДанныеКонтрагентов - Массив из Структура - Данные БП77
//  СохранятьСвязи - Булево - Если Истина, связи с контрагентами счетами будут сохранены
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхКонтрагентов - Число
//      * КоличествоСохраненныхСвязей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеКонтрагентовВРегистр(Знач ИсходныеДанныеКонтрагентов, Знач СохранятьСвязи = Истина) Экспорт
    РезультатФункции = Новый Структура(
            "Успех, КоличествоЗаписанныхКонтрагентов, КоличествоСохраненныхСвязей, СообщениеОбОшибке", Истина, 0, 0);

    Если ИсходныеДанныеКонтрагентов = Неопределено ИЛИ ИсходныеДанныеКонтрагентов.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийКонтрагента = "Согласие";
    КлючиЧиселКонтрагента = "ТипЗаказчика,ТипУслуги,Очередность,Акцепт,СторонниеСубсидии,Аванс";
    КлючиДатКонтрагента = "ДокументДатаВыдачи";

    // Транзакция записи в регистр ГП_КонтрагентыБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого КонтрагентБП77 Из ИсходныеДанныеКонтрагентов Цикл
            НаборЗаписейКонтрагентов = СоздатьНаборЗаписейКонтрагентовБП77(КонтрагентБП77);

            // Данные для сохранения связанного контрагента записи
            СвязанныйКонтрагент = Неопределено;
            Если СохранятьСвязи Тогда
                НаборЗаписейКонтрагентов.Прочитать();
                Если НаборЗаписейКонтрагентов.Количество() > 0 Тогда
                    СвязанныйКонтрагент = НаборЗаписейКонтрагентов[0].Контрагент;
                    СвязанныйКонтрагент = ?(ЗначениеЗаполнено(СвязанныйКонтрагент), СвязанныйКонтрагент, Неопределено);
                    НаборЗаписейКонтрагентов.Очистить();
                КонецЕсли;
            КонецЕсли;
            НоваяЗапись = НаборЗаписейКонтрагентов.Добавить();

            // Заполнение данных контрагента
            ЗаполнитьЗначенияСвойств(НоваяЗапись, КонтрагентБП77, ,
                СтрШаблон("%1,%2,%3", КлючиУсловийКонтрагента, КлючиЧиселКонтрагента, КлючиДатКонтрагента));

            // Заполнение полей с преобразованием типов
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиДатКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВДату(КонтрагентБП77[Ключ], ЧастиДаты.Дата);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(КонтрагентБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселКонтрагента, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КонтрагентБП77[Ключ]);
            КонецЦикла;

            // Заполнение полей ИНН/КПП
            РезультатРазбораИНН = ПолучитьЧастиИННКонтрагентаБП77(КонтрагентБП77.ИНН);
            Если РезультатРазбораИНН.Успех Тогда
                НоваяЗапись.ИНН = РезультатРазбораИНН.ИНН;
                НоваяЗапись.КПП = ?(РезультатРазбораИНН.КПП <> Неопределено, РезультатРазбораИНН.КПП, "");
            КонецЕсли;

            // Сохранение (оставляем без изменений) связанного контрагента записи
            Если СвязанныйКонтрагент <> Неопределено Тогда
                НоваяЗапись.Контрагент = СвязанныйКонтрагент;
                РезультатФункции.КоличествоСохраненныхСвязей = РезультатФункции.КоличествоСохраненныхСвязей + 1;
            КонецЕсли;

            НаборЗаписейКонтрагентов.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхКонтрагентов = РезультатФункции.КоличествоЗаписанныхКонтрагентов + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных контрагентов в регистр ""ГП_КонтрагентыБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхКонтрагентов = 0;
        РезультатФункции.КоличествоСохраненныхСвязей = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КонтрагентБП77 - Структура
//      * Код - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_ЗданияБП77.НаборЗаписей
Функция СоздатьНаборЗаписейКонтрагентовБП77(Знач КонтрагентБП77) Экспорт
    НаборЗаписей = РегистрыСведений.ГП_КонтрагентыБП77.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Код.Установить(КонтрагентБП77.Код);

    Возврат НаборЗаписей;
КонецФункции

// Устарела. !!! Требуется доработка для фильтрации (исключения существующих контрагентов)
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
//
// Получает таблицу контрагентов для создания. Контрагенты отбираются только для лицевых счетов с признаком
//  ГП_СозданАвтоматически и заполненным полем ГП_ИдентификаторБП77. Если в регистре ГП_Контрагенты установлена связь с Контрагентом ИБ
//  (т.е.) контрагент уже существует в ИБ такая запись игнорируется (не входит в отбор)
//  Используется в процессе разработки для создание неперенесенных ранее контрагентов
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьТаблицуАбонентовБП77ДляСоздания() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_КонтрагентыБП77.Код КАК Код,
        |	ГП_КонтрагентыБП77.Контрагент КАК Контрагент,
        |	ГП_КонтрагентыБП77.Наименование КАК Наименование,
        |	ГП_КонтрагентыБП77.ПолнНаименование КАК ПолнНаименование,
        |	ГП_КонтрагентыБП77.ВидКонтрагента КАК ВидКонтрагента,
        |	ГП_КонтрагентыБП77.ЮридическийАдрес КАК ЮридическийАдрес,
        |	ГП_КонтрагентыБП77.ПочтовыйАдрес КАК ПочтовыйАдрес,
        |	ГП_КонтрагентыБП77.Телефоны КАК Телефоны,
        |	ГП_КонтрагентыБП77.ИНН КАК ИНН,
        |	ГП_КонтрагентыБП77.ОКПО КАК ОКПО,
        |	ГП_КонтрагентыБП77.КПП КАК КПП,
        |	ГП_КонтрагентыБП77.ДокументСерия КАК ДокументСерия,
        |	ГП_КонтрагентыБП77.ДокументНомер КАК ДокументНомер,
        |	ГП_КонтрагентыБП77.ДокументКемВыдан КАК ДокументКемВыдан,
        |	ГП_КонтрагентыБП77.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
        |	ГП_КонтрагентыБП77.ОсновнойДоговорКод КАК ОсновнойДоговорКод,
        |	ГП_КонтрагентыБП77.ОсновнойДоговорНаименование КАК ОсновнойДоговорНаименование,
        |	ГП_КонтрагентыБП77.ТипЗаказчика КАК ТипЗаказчика,
        |	ГП_КонтрагентыБП77.ТипУслуги КАК ТипУслуги,
        |	ГП_КонтрагентыБП77.КонтрагентЮридическийАдресКЛАДР КАК КонтрагентЮридическийАдресКЛАДР,
        |	ГП_КонтрагентыБП77.ПочтовыйАдресКЛАДР КАК ПочтовыйАдресКЛАДР,
        |	ГП_КонтрагентыБП77.БанковскийСчетКод КАК БанковскийСчетКод,
        |	ГП_КонтрагентыБП77.ГрузополучательКод КАК ГрузополучательКод,
        |	ГП_КонтрагентыБП77.Группа КАК Группа
        |ПОМЕСТИТЬ ВТ_Абоненты
        |ИЗ
        |	РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |ГДЕ
        |	ГП_КонтрагентыБП77.Контрагент = &ПустаяСсылкаКонтрагент
        |	И ГП_КонтрагентыБП77.Группа = ""Абоненты""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ПеремещенныеЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |	И КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Абоненты.Код КАК Код
        |ПОМЕСТИТЬ ВТ_КодыКонтрагентовДляСоздания
        |ИЗ
        |	ВТ_ПеремещенныеЛицевыеСчета КАК ВТ_ПеремещенныеЛицевыеСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Абоненты КАК ВТ_Абоненты
        |		ПО (ВТ_ПеремещенныеЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ВТ_Абоненты.Код + ""[_-][0-9]%"")
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_Абоненты.Код
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Абоненты.Код КАК Код,
        |	ВТ_Абоненты.Контрагент КАК Контрагент,
        |	ВТ_Абоненты.Наименование КАК Наименование,
        |	ВТ_Абоненты.ПолнНаименование КАК ПолнНаименование,
        |	ВТ_Абоненты.ВидКонтрагента КАК ВидКонтрагента,
        |	ВТ_Абоненты.ЮридическийАдрес КАК ЮридическийАдрес,
        |	ВТ_Абоненты.ПочтовыйАдрес КАК ПочтовыйАдрес,
        |	ВТ_Абоненты.Телефоны КАК Телефоны,
        |	ВТ_Абоненты.ИНН КАК ИНН,
        |	ВТ_Абоненты.ОКПО КАК ОКПО,
        |	ВТ_Абоненты.КПП КАК КПП,
        |	ВТ_Абоненты.ДокументСерия КАК ДокументСерия,
        |	ВТ_Абоненты.ДокументНомер КАК ДокументНомер,
        |	ВТ_Абоненты.ДокументКемВыдан КАК ДокументКемВыдан,
        |	ВТ_Абоненты.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
        |	ВТ_Абоненты.ОсновнойДоговорКод КАК ОсновнойДоговорКод,
        |	ВТ_Абоненты.ОсновнойДоговорНаименование КАК ОсновнойДоговорНаименование,
        |	ВТ_Абоненты.ТипЗаказчика КАК ТипЗаказчика,
        |	ВТ_Абоненты.ТипУслуги КАК ТипУслуги,
        |	ВТ_Абоненты.КонтрагентЮридическийАдресКЛАДР КАК КонтрагентЮридическийАдресКЛАДР,
        |	ВТ_Абоненты.ПочтовыйАдресКЛАДР КАК ПочтовыйАдресКЛАДР,
        |	ВТ_Абоненты.БанковскийСчетКод КАК БанковскийСчетКод,
        |	ВТ_Абоненты.ГрузополучательКод КАК ГрузополучательКод,
        |	ВТ_Абоненты.Группа КАК Группа
        |ИЗ
        |	ВТ_КодыКонтрагентовДляСоздания КАК ВТ_КодыКонтрагентовДляСоздания
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Абоненты КАК ВТ_Абоненты
        |		ПО ВТ_КодыКонтрагентовДляСоздания.Код = ВТ_Абоненты.Код
        |";

    Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
//
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Код - Строка - Код контрагента в БП77
//      * Контрагент - СправочникСсылка.Контрагенты - Контрагент текущего соответствия
//      * КонтрагентСопоставление - СправочникСсылка.Контрагенты - Новая связь для контрагента
//      * Наименование - Строка
//      * Наименование - ИНН
//      * Наименование - КПП
Функция ПолучитьТаблицуДляСозданияСвязейКонтрагентовБП77() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = СформироватьТекстЗапросаДляСозданияСвязейКонтрагентовБП77();

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

// Распознает значения ИНН[/КПП] из строки ИНН БП77 (может содержать КПП)
// Параметры:
//  СтрокаИннКппБП77 - Строка - Строка вида ИНН[/КПП], КПП опционально
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ИНН - Строка, Неопределено
//      * КПП - Строка, Неопределено
Функция ПолучитьЧастиИННКонтрагентаБП77(Знач СтрокаИннКппБП77) Экспорт
    РезультатФункции = Новый Структура("Успех, ИНН, КПП", Ложь);

    РезультатПоиска = СтрНайтиПоРегулярномуВыражению(СтрокаИннКппБП77, "([0-9]+)\s*[\\/]+\s*([0-9]+)");

    // Проверка найденных групп
    НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
    Если РезультатПоиска.НачальнаяПозиция = 0 ИЛИ НайденныеГруппы.Количество() < 1 Тогда
        Возврат РезультатФункции; // ИНН не распознан
    КонецЕсли;

    // Формирование результата
    РезультатФункции.Успех = Истина;
    РезультатФункции.ИНН = НайденныеГруппы[0].Значение;
    Если НайденныеГруппы.Количество() > 1 Тогда
        РезультатФункции.КПП = НайденныеГруппы[1].Значение;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Получает маску идентификатора БП77 контрагента для использования в ПОДОБНО
// Возвращаемое значение:
//  - Строка
Функция ПолучитьМаскуИдентификатораБП77ДляКонтрагента() Экспорт
    Возврат "%[0-9]%";
КонецФункции

// Параметры:
//  ТолькоБезПометкиУдаления - Булево
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Контрагент - СправочникСсылка.Контрагенты
//      * ГП_ИдентификаторБП77 - Строка
Функция ПолучитьТаблицуАбонентовСозданныхАвтоматическиГП(Знач ТолькоБезПометкиУдаления = Истина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Контрагенты.Ссылка КАК Контрагент,
        |   Контрагенты.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |   Контрагенты.ГП_СозданАвтоматически = ИСТИНА
        |   И Контрагенты.ГП_ИдентификаторБП77 ПОДОБНО &МаскаИдентификатораКонтрагента
        |   И Контрагенты.ПометкаУдаления = ЛОЖЬ
        |";

    Если ТолькоБезПометкиУдаления = Ложь Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагенты.ПометкаУдаления = ЛОЖЬ", "");
    КонецЕсли;
    Запрос.УстановитьПараметр("МаскаИдентификатораКонтрагента", ПолучитьМаскуИдентификатораБП77ДляКонтрагента());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

#Область ТолькоДляРазработки

// Устарела. Используется только в процессе разработки для оперативного исправления перенесенных данных
//
// Обновляет (перезаписывает) контактную информацию созданных автоматически по данным БП77 контрагентов
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоОбновленныхАбонентов - Число
//      * ТекстСообщения - Строка, Неопределено
Функция ИсправитьКонтактнуюИнформациюПеренесенныхАбонентов() Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоОбновленныхАбонентов, ТекстСообщения", Истина, 0);

    // Получение таблицы созданных абонентов (контрагентов)
    ТаблицаСозданныхАбонентов = ПолучитьТаблицуАбонентовСозданныхАвтоматическиГП(Истина);

    // Получение контактной информации для заполнения
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ПОМЕСТИТЬ ВТ_ТаблицаСозданныхАбонентов
        |ИЗ
        |   &ТаблицаСозданныхАбонентов КАК ТаблицаСозданныхАбонентов
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_ТаблицаСозданныхАбонентов.Контрагент КАК Контрагент,
        |   ГП_КонтрагентыБП77.ЮридическийАдрес КАК ЮридическийАдрес,
        |   ГП_КонтрагентыБП77.ПочтовыйАдрес КАК ПочтовыйАдрес,
        |   ГП_КонтрагентыБП77.Телефоны КАК Телефоны
        |ИЗ
        |   ВТ_ТаблицаСозданныхАбонентов КАК ВТ_ТаблицаСозданныхАбонентов
        |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |   ПО ВТ_ТаблицаСозданныхАбонентов.ГП_ИдентификаторБП77 = ГП_КонтрагентыБП77.Код
        |   И ВТ_ТаблицаСозданныхАбонентов.Контрагент = ГП_КонтрагентыБП77.Контрагент
        |";

    Запрос.УстановитьПараметр("ТаблицаСозданныхАбонентов", ТаблицаСозданныхАбонентов);
    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаСозданныхАбонентов = РезультатЗапроса.Выгрузить();

    // Обновление (замена) контактной информации
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаАбонента Из ТаблицаСозданныхАбонентов Цикл
            КонтрагентОбъект = СтрокаАбонента.Контрагент.ПолучитьОбъект();

            КонтрагентОбъект.КонтактнаяИнформация.Очистить();
            ЗаполнитьКонтактнуюИнформациюКонтрагента(КонтрагентОбъект, СтрокаАбонента);

            КонтрагентОбъект.Записать();
            РезультатФункции.КоличествоОбновленныхАбонентов = РезультатФункции.КоличествоОбновленныхАбонентов + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при записи изменений контактной информации контрагентов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоОбновленныхАбонентов = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ТолькоДляРазработки

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область СлужебныеПроцедурыИФункции

#Область ПомощникиФормированияЗапросов

// Возвращаемое значение:
//  - Строка
Функция СформироватьТекстЗапросаДляСозданияСвязейКонтрагентовБП77()
    ТекстЗапроса =
        "////////////////////////////////////////////////////////////////////////////////
        |// Существующие контрагенты в ИБ
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	Контрагенты.Ссылка КАК Контрагент,
        |	Контрагенты.Код КАК Код,
        |	Контрагенты.Наименование КАК Наименование,
        |	Контрагенты.ИНН КАК ИНН,
        |	Контрагенты.КПП КАК КПП,
        |	Контрагенты.ГП_СозданАвтоматически КАК ГП_СозданАвтоматически,
        |	Контрагенты.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_РанееСозданныеКонтрагенты
        |ИЗ
        |	Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |	Контрагенты.ЭтоГруппа = ЛОЖЬ
        |	И Контрагенты.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Контрагенты ИБ с заполненным полем ГП_ИдентификаторБП77 (созданы ГарантПлюс)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_РанееСозданныеКонтрагенты.Контрагент КАК Контрагент,
        |	ВТ_РанееСозданныеКонтрагенты.Код КАК Код,
        |	ВТ_РанееСозданныеКонтрагенты.Наименование КАК Наименование,
        |	ВТ_РанееСозданныеКонтрагенты.ИНН КАК ИНН,
        |	ВТ_РанееСозданныеКонтрагенты.КПП КАК КПП,
        |	ВТ_РанееСозданныеКонтрагенты.ГП_СозданАвтоматически КАК ГП_СозданАвтоматически,
        |	ВТ_РанееСозданныеКонтрагенты.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_КонтрагентыСИдентификаторомБП77
        |ИЗ
        |	ВТ_РанееСозданныеКонтрагенты КАК ВТ_РанееСозданныеКонтрагенты
        |ГДЕ
        |	ВТ_РанееСозданныеКонтрагенты.ГП_ИдентификаторБП77 <> """"
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Контрагенты ИБ без заполненного поля ГП_ИдентификаторБП77 (созданы не ГарантПлюс)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_РанееСозданныеКонтрагенты.Контрагент КАК Контрагент,
        |	ВТ_РанееСозданныеКонтрагенты.Код КАК Код,
        |	ВТ_РанееСозданныеКонтрагенты.Наименование КАК Наименование,
        |	ВТ_РанееСозданныеКонтрагенты.ИНН КАК ИНН,
        |	ВТ_РанееСозданныеКонтрагенты.КПП КАК КПП,
        |	ВТ_РанееСозданныеКонтрагенты.ГП_СозданАвтоматически КАК ГП_СозданАвтоматически,
        |	ВТ_РанееСозданныеКонтрагенты.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_КонтрагентыБезИдентификаторомБП77
        |ИЗ
        |	ВТ_РанееСозданныеКонтрагенты КАК ВТ_РанееСозданныеКонтрагенты
        |ГДЕ
        |	ВТ_РанееСозданныеКонтрагенты.ГП_ИдентификаторБП77 = """"
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Коды корригентов для зданий БП77 (из регистра ГП_ЗданияБП77)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_ЗданияБП77.КонтрагентКод КАК КонтрагентКод
        |ПОМЕСТИТЬ ВТ_КодыКонтрагентовЗданий
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |ГДЕ
        |	ГП_ЗданияБП77.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ
        |	И ГП_ЗданияБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЛОЖЬ
        |
        |СГРУППИРОВАТЬ ПО
        |	ГП_ЗданияБП77.КонтрагентКод
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Абоненты БП77 (Контрагенты из группы / папки = Абоненты)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_КонтрагентыБП77.Контрагент КАК Контрагент,
        |	ГП_КонтрагентыБП77.ВидКонтрагента КАК ВидКонтрагента,
        |	ГП_КонтрагентыБП77.Наименование КАК Наименование,
        |	ГП_КонтрагентыБП77.ИНН КАК ИНН,
        |	ГП_КонтрагентыБП77.КПП КАК КПП,
        |	ГП_КонтрагентыБП77.Код КАК Код
        |ПОМЕСТИТЬ ВТ_АбонентыБП77
        |ИЗ
        |	РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |ГДЕ
        |	ГП_КонтрагентыБП77.Группа = ""Абоненты""
        |	И ГП_КонтрагентыБП77.Код В
        |			(ВЫБРАТЬ
        |				ВТ_КодыКонтрагентовЗданий.КонтрагентКод
        |			ИЗ
        |				ВТ_КодыКонтрагентовЗданий)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Результат. Все найденные соответствия контрагентов ИБ с контрагентами БП77
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_КонтрагентыСИдентификаторомБП77.Код КАК Код,
        |	ВТ_АбонентыБП77.Код КАК КодБП77,
        |	ВТ_АбонентыБП77.Контрагент КАК Контрагент,
        |	ВТ_КонтрагентыСИдентификаторомБП77.Контрагент КАК КонтрагентСопоставление,
        |	ВТ_КонтрагентыСИдентификаторомБП77.Наименование КАК Наименование,
        |	ВТ_КонтрагентыСИдентификаторомБП77.ИНН КАК ИНН,
        |	ВТ_КонтрагентыСИдентификаторомБП77.КПП КАК КПП
        |ПОМЕСТИТЬ ВТ_Результат
        |ИЗ
        |	ВТ_КонтрагентыСИдентификаторомБП77 КАК ВТ_КонтрагентыСИдентификаторомБП77
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АбонентыБП77 КАК ВТ_АбонентыБП77
        |		ПО ВТ_КонтрагентыСИдентификаторомБП77.ГП_ИдентификаторБП77 = ВТ_АбонентыБП77.Код
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	ВТ_КонтрагентыБезИдентификаторомБП77.Код,
        |	ВТ_АбонентыБП77.Код,
        |	ВТ_АбонентыБП77.Контрагент,
        |	ВТ_КонтрагентыБезИдентификаторомБП77.Контрагент,
        |	ВТ_КонтрагентыБезИдентификаторомБП77.Наименование,
        |	ВТ_КонтрагентыБезИдентификаторомБП77.ИНН,
        |	ВТ_КонтрагентыБезИдентификаторомБП77.КПП
        |ИЗ
        |	ВТ_КонтрагентыБезИдентификаторомБП77 КАК ВТ_КонтрагентыБезИдентификаторомБП77
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АбонентыБП77 КАК ВТ_АбонентыБП77
        |		ПО ВТ_КонтрагентыБезИдентификаторомБП77.ИНН = ВТ_АбонентыБП77.ИНН
        |			И ВТ_КонтрагентыБезИдентификаторомБП77.КПП = ВТ_АбонентыБП77.КПП
        |			И ВТ_КонтрагентыБезИдентификаторомБП77.Наименование = ВТ_АбонентыБП77.Наименование
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Исключение дублирования соответствий контрагентов (2 контрагента в ИБ созданные клиентом дублируются)
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Результат.КодБП77 КАК Код,
        |	МАКСИМУМ(ВТ_Результат.Контрагент) КАК Контрагент,
        |	МАКСИМУМ(ВТ_Результат.КонтрагентСопоставление) КАК КонтрагентСопоставление,
        |	ВТ_Результат.Наименование КАК Наименование,
        |	ВТ_Результат.ИНН КАК ИНН,
        |	ВТ_Результат.КПП КАК КПП
        |ИЗ
        |	ВТ_Результат КАК ВТ_Результат
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_Результат.КодБП77,
        |	ВТ_Результат.Наименование,
        |	ВТ_Результат.ИНН,
        |	ВТ_Результат.КПП
        |";

    Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти // ПомощникиФормированияЗапросов

// Заполняет (перезаписывает) контактную информацию контрагента
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.Контрагенты
//  АбонентБП77 - Структура, СтрокаТаблицыЗначений
//      * ЮридическийАдрес - Строка
//      * ПочтовыйАдрес - Строка
//      * Телефоны - Строка
// Возвращаемое значение:
//  - Структура
//      * ЮридическийАдрес - Булево
//      * ПочтовыйАдрес - Булево
//      * Телефоны - Булево
Функция ЗаполнитьКонтактнуюИнформациюКонтрагента(Знач КонтрагентОбъект, Знач АбонентБП77)
    РезультатФункции = Новый Структура("ЮрАдрес, ПочтовыйАдрес, Телефон", Ложь, Ложь, Ложь);

    // ЮрАдресКонтрагента
    Если ЗначениеЗаполнено(АбонентБП77.ЮридическийАдрес) Тогда
        СтрокаКонтактнойИнформации = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
        СтрокаКонтактнойИнформации.Вид = СПравочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
        СтрокаКонтактнойИнформации.Тип = СтрокаКонтактнойИнформации.Вид.Тип;
        СтрокаКонтактнойИнформации.Представление = АбонентБП77.ЮридическийАдрес;
        СтрокаКонтактнойИнформации.ЗначенияПолей = АбонентБП77.ЮридическийАдрес;

        РезультатФункции.ЮрАдрес = Истина;
    КонецЕсли;

    // ПочтовыйАдресКонтрагента
    Если ЗначениеЗаполнено(АбонентБП77.ПочтовыйАдрес) Тогда
        СтрокаКонтактнойИнформации = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
        СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
        СтрокаКонтактнойИнформации.Тип = СтрокаКонтактнойИнформации.Вид.Тип;
        СтрокаКонтактнойИнформации.Представление = АбонентБП77.ПочтовыйАдрес;
        СтрокаКонтактнойИнформации.ЗначенияПолей = АбонентБП77.ПочтовыйАдрес;

        РезультатФункции.ПочтовыйАдрес = Истина;
    КонецЕсли;

    // ТелефонКонтрагента
    Если ЗначениеЗаполнено(АбонентБП77.Телефоны) Тогда
        СтрокаКонтактнойИнформации = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
        СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
        СтрокаКонтактнойИнформации.Тип = СтрокаКонтактнойИнформации.Вид.Тип;
        СтрокаКонтактнойИнформации.Представление = АбонентБП77.Телефоны;
        СтрокаКонтактнойИнформации.ЗначенияПолей = АбонентБП77.Телефоны;

        РезультатФункции.Телефон = Истина;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --
