// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет создание лицевых счетов для зданий (объектов абонентов) для которы л/с отсутствуют в ИБ
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеЛицевыеСчета - Массив из СправочникСсылка.КВП_ЛицевыеСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьЛицевыеСчетаДляПеренесенныхЗданийБП77() Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеЛицевыеСчета, ТекстСообщения", Истина, Новый Массив);

    ЗданияБезЛицевыхСчетов = ГП_МиграцияЗданий.ПолучитьПеренесенныеЗданияБезЛицевыхСчетов();

    // Создание лицевых счетов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ЗданияБезЛицевыхСчетов Цикл
            // Контроль полей строки данных
            Если СтрокаДанных.КонтрагентКод = "" ИЛИ СтрокаДанных.ОбъектАбонентаКод = "" Тогда
                ВызватьИсключение("Код контрагента и код объекта абонента должны быть заполнены.");
            КонецЕсли;
            Если СтрокаДанных.Здание = Справочники.КВП_Здания.ПустаяСсылка()
                ИЛИ СтрокаДанных.Помещение = Справочники.УПЖКХ_Помещения.ПустаяСсылка() Тогда
                ВызватьИсключение("Здание и Помещение должны бить заполнены.");
            КонецЕсли;

            // Создание нового элемента ЛицевойСчет
            НовыйЛицевойСчет = Справочники.КВП_ЛицевыеСчета.СоздатьЭлемент();
            НовыйЛицевойСчет.ГП_СозданАвтоматически = Истина;
            НовыйЛицевойСчет.Наименование = СформироватьНаименованиеЛицевогоСчета(
                    СтрокаДанных.КонтрагентНаименование, СтрокаДанных.Здание.Наименование);
            НовыйЛицевойСчет.Адрес = СтрокаДанных.Помещение;
            НовыйЛицевойСчет.ГП_ИдентификаторБП77 = СформироватьСоставнойКодЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);
            НовыйЛицевойСчет.Идентификатор = СформироватьИдентификаторЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);

            НовыйЛицевойСчет.Записать();
            РезультатФункции.СозданныеЛицевыеСчета.Добавить(НовыйЛицевойСчет.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        ОбщаяЧастьСообщения = "Ошибка при создании лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеЛицевыеСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Создает документы КВП_ОткрытиеЛицевогоСчета для неоткрытых лицевых счетов
// Параметры:
//  ДатаОткрытия - Дата
//  ТолькоСозданныеАвтоматически - Булево - Если Истина то будут отобраны лицевые счета с признаком СозданАвтоматически
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеДокументыОткрытияЛицевогоСчета - Массив из ДокументСсылка.КВП_ОткрытиеЛицевогоСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьДокументыОткрытияЛицевыхСчетов(Знач ДатаОткрытия, Знач ТолькоСозданныеАвтоматически) Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеДокументыОткрытияЛицевогоСчета, ТекстСообщения", Истина, Новый Массив);

    // Получаем данные для создания документов открытия л/с (для неоткрытых л/с)
    ТаблицаНеоткрытыхЛицевыхСчетов = ПолучитьНеоткрытыеЛицевыеСчета(Истина);

    // Создание документов открытия лицевых счетов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаЛицевогоСетаДляОткрытия Из ТаблицаНеоткрытыхЛицевыхСчетов Цикл
            НовыйДокументОткрытияЛС = Документы.КВП_ОткрытиеЛицевогоСчета.СоздатьДокумент();
            НовыйДокументОткрытияЛС.Дата = ДатаОткрытия;
            НовыйДокументОткрытияЛС.Комментарий = "#создано автоматически по данным из БП77 (ГарантПлюс)";
            НовыйДокументОткрытияЛС.Ответственный = Пользователи.ТекущийПользователь();
            НовыйДокументОткрытияЛС.ЛицевойСчет = СтрокаЛицевогоСетаДляОткрытия.ЛицевойСчет;
            НовыйДокументОткрытияЛС.КоличествоПроживающих = СтрокаЛицевогоСетаДляОткрытия.КоличествоПроживающих;
            НовыйДокументОткрытияЛС.ДоляЧислитель = 1;
            НовыйДокументОткрытияЛС.ДоляЗнаменатель = 1;

            НовыйДокументОткрытияЛС.Контрагент = СтрокаЛицевогоСетаДляОткрытия.Контрагент;
            Если ЗначениеЗаполнено(НовыйДокументОткрытияЛС.Контрагент) Тогда
                НовыйДокументОткрытияЛС.ОтветственныйСобственник = НовыйДокументОткрытияЛС.Контрагент;
                НовыйДокументОткрытияЛС.ВладелецКонтрагент = Истина;
            КонецЕсли;

            НовыйДокументОткрытияЛС.Записать(РежимЗаписиДокумента.Запись);
            РезультатФункции.СозданныеДокументыОткрытияЛицевогоСчета.Добавить(НовыйДокументОткрытияЛС.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании документов открытия лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеДокументыОткрытияЛицевогоСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписей - Число
//      * СозданныеДокументы - Массив из ДокументСсылка.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьДокументыУправленияСведениямиДляВзаиморасчетовПоЛицевымСчетам(Знач Параметры = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписей, СозданныеДокументы, ТекстСообщения", Истина, 0, Новый Массив);

    ТаблицаИсходныхДанных = ПолучитьТаблицуОсновныхДоговоровАбонентовПеренесенныхЛицевыхСчетов();

    ДатаДокументаПоУмолчанию = Дата(2024, 01, 01); // !!! Требуется перенести в параметры
    ОсновнаяОрганизацияСсылка = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();

    НовыйДокументОбъект = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.СоздатьДокумент();
    НовыйДокументОбъект.Дата = ДатаДокументаПоУмолчанию;
    НовыйДокументОбъект.Организация = ОсновнаяОрганизацияСсылка;
    НовыйДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
    НовыйДокументОбъект.Комментарий = "#создано автоматически по данным из БП77 (ГарантПлюс)";

    Для Каждого СтрокаДанных Из ТаблицаИсходныхДанных Цикл
        НоваяСтрокаВзаиморасчетов = НовыйДокументОбъект.СведенияДляВзаиморасчетов.Добавить();
        НоваяСтрокаВзаиморасчетов.ЛицевойСчет = СтрокаДанных.ЛицевойСчет;
        НоваяСтрокаВзаиморасчетов.Контрагент = СтрокаДанных.Контрагент;
        НоваяСтрокаВзаиморасчетов.ДоговорКонтрагента = СтрокаДанных.Договор;

        РезультатФункции.КоличествоЗаписей = РезультатФункции.КоличествоЗаписей + 1;
    КонецЦикла;

    Попытка
        НовыйДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
        РезультатФункции.СозданныеДокументы.Добавить(НовыйДокументОбъект.Ссылка);
    Исключение
        ОбщаяЧастьСообщения = "Ошибка при создании документа ""Управления сведениями для взаиморасчетов по лицевым счетам"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоЗаписей = 0;
        РезультатФункции.СозданныеДокументы.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Получает таблицу неоткрытых лицевых счетов
// Параметры:
//  ТолькоСозданныеАвтоматически - Булево - Если Истина то будут отобраны лицевые счета с признаком СозданАвтоматически
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * Здание - СправочникСсылка.КВП_Здания
//      * Помещение - СправочникСсылка.УПЖКХ_Помещения
//      * Контрагент - СправочникСсылка.Контрагенты
//      * КоличествоПроживающих - Число
Функция ПолучитьНеоткрытыеЛицевыеСчета(Знач ТолькоСозданныеАвтоматически = Истина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.Адрес КАК Помещение,
        |	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.Адрес <> &ПустаяСсылкаПомещение
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.Здание КАК Здание,
        |	ВТ_ЛицевыеСчета.Помещение КАК Помещение
        |ПОМЕСТИТЬ ВТ_НеоткрытыеЛС
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_ОткрытиеЛицевогоСчета КАК КВП_ОткрытиеЛицевогоСчета
        |		ПО ВТ_ЛицевыеСчета.Ссылка = КВП_ОткрытиеЛицевогоСчета.ЛицевойСчет
        |			И (КВП_ОткрытиеЛицевогоСчета.ПометкаУдаления = ЛОЖЬ)
        |ГДЕ
        |	КВП_ОткрытиеЛицевогоСчета.Ссылка ЕСТЬ NULL
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_НеоткрытыеЛС.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_НеоткрытыеЛС.Здание КАК Здание,
        |	ВТ_НеоткрытыеЛС.Помещение КАК Помещение,
        |	ЕСТЬNULL(ГП_КонтрагентыБП77.Контрагент, &ПустаяСсылкаКонтрагент) КАК Контрагент,
        |	ЕСТЬNULL(ГП_ЗданияБП77.КоличествоПроживающих, 0) КАК КоличествоПроживающих
        |ИЗ
        |	ВТ_НеоткрытыеЛС КАК ВТ_НеоткрытыеЛС
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |		ПО ВТ_НеоткрытыеЛС.Здание = ГП_ЗданияБП77.Здание
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |		ПО (ГП_ЗданияБП77.КонтрагентКод = ГП_КонтрагентыБП77.Код)
        |";

    Если ТолькоСозданныеАвтоматически = Ложь Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА", "");
    КонецЕсли;
    Запрос.УстановитьПараметр("ПустаяСсылкаПомещение", Справочники.УПЖКХ_Помещения.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Получает таблицу созданных автоматически лицевых счетов (созданных только ГарантПлюс)
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьТаблицуПеренесенныхЛицевыхСчетовИзБП77ГП() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |   КВП_ЛицевыеСчета.Адрес КАК Помещение,
        |   КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
        |   КВП_ЛицевыеСчета.Идентификатор КАК Идентификатор,
        |   КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ИЗ
        |   Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |   КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |   И КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО &МакетИдентификатораЛС
        |   И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |";

    Запрос.УстановитьПараметр("МакетИдентификатораЛС", "%[0-9][_-][0-9]%");

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * СоставнойКодЛицевогоСчета - Строка
//      * Контрагент - СправочникСсылка.Контрагенты
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
Функция ПолучитьТаблицуОсновныхДоговоровАбонентовПеренесенныхЛицевыхСчетов() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |	И КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_КонтрагентыБП77.Код КАК Код,
        |	ГП_КонтрагентыБП77.ОсновнойДоговорКод КАК ОсновнойДоговорКод,
        |	ГП_КонтрагентыБП77.ОсновнойДоговорНаименование КАК ОсновнойДоговорНаименование,
        |	ГП_КонтрагентыБП77.Контрагент КАК Контрагент
        |ПОМЕСТИТЬ ВТ_Абоненты
        |ИЗ
        |	РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |ГДЕ
        |	ГП_КонтрагентыБП77.Контрагент <> &ПустаяСсылкаКонтрагент
        |	И ГП_КонтрагентыБП77.Группа = ""Абоненты""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
        |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
        |	ДоговорыКонтрагентов.Код КАК Код,
        |	ДоговорыКонтрагентов.Наименование КАК Наименование,
        |	ДоговорыКонтрагентов.lc_ВидДоговора КАК lc_ВидДоговора,
        |	ДоговорыКонтрагентов.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |	ДоговорыКонтрагентов.ГП_СозданАвтоматически КАК ГП_СозданАвтоматически
        |ПОМЕСТИТЬ ВТ_Договоры
        |ИЗ
        |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |	ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
        |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
        |	И ДоговорыКонтрагентов.Владелец ССЫЛКА Справочник.Контрагенты
        |	И ДоговорыКонтрагентов.lc_ВидДоговора.Код = ""000000004""
        |	И ДоговорыКонтрагентов.Владелец В
        |			(ВЫБРАТЬ
        |				ВТ_Абоненты.Контрагент
        |			ИЗ
        |				ВТ_Абоненты)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК СоставнойКодЛицевогоСчета,
        |	ВТ_Абоненты.Код КАК Код,
        |	ВТ_Абоненты.Контрагент КАК Контрагент,
        |	ВТ_Договоры.Ссылка КАК Договор
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Абоненты КАК ВТ_Абоненты
        |		ПО (ВТ_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ВТ_Абоненты.Код + ""_[0-9]%"")
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
        |		ПО (ВТ_Договоры.Наименование = ВТ_Абоненты.ОсновнойДоговорНаименование)
        |			И (ВТ_Абоненты.Контрагент = ВТ_Договоры.Контрагент)
        |ГДЕ
        |	НЕ ВТ_Договоры.Ссылка ЕСТЬ NULL
        |";

    Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Формирует составной код лицевого счета
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьСоставнойКодЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", КонтрагентКод, ОбъектАбонентаКод);
КонецФункции

// Формирует идентификатор лицевого счета
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьИдентификаторЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", ОбъектАбонентаКод, КонтрагентКод);
КонецФункции

// Формирует наименование лицевого счета
// Параметры:
//  НаименованиеКонтрагента - Строка
//  НаименованиеЗдания - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьНаименованиеЛицевогоСчета(Знач НаименованиеКонтрагента, Знач НаименованиеЗдания) Экспорт
    Возврат СтрШаблон("%1 / %2", НаименованиеКонтрагента, НаименованиеЗдания);
КонецФункции

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область ТолькоДляРазработки

// Устарела. Функция используется только в процессе разработки, из релиза будет удалена
//
// Исправляет значения реквизита Идентификатор для всех созданных автоматически ГарантПлюс лицевых счетов
//  меняя местами код контрагента и код объекта абонента для соответствия схеме идентификатора ранее используемого клиентом
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоОбновленныхИдентификаторов - Число
//      * ТекстСообщения - Строка, Неопределено
Функция ИсправитьИдентификаторыПеренесенныхЛицевыхСчетов() Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоОбновленныхИдентификаторов, ТекстСообщения", Истина, 0);

    // Получаем лицевые счета для исправления
    ТаблицаПеренесенныхЛС = ПолучитьТаблицуПеренесенныхЛицевыхСчетовИзБП77ГП();

    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаЛС Из ТаблицаПеренесенныхЛС Цикл
            РезультатПоиска = СтрНайтиПоРегулярномуВыражению(СтрокаЛС.ГП_ИдентификаторБП77, "^([0-9]+)_([0-9]+)$");
            Если РезультатПоиска.НачальнаяПозиция = 0 Тогда
                Продолжить;
            КонецЕсли;

            НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
            Если НайденныеГруппы.Количество() < 2 Тогда
                Продолжить;
            КонецЕсли;

            НовоеЗначениеИдентификатора = СформироватьИдентификаторЛицевогоСчета(НайденныеГруппы[0].Значение, НайденныеГруппы[1].Значение);
            Если СтрокаЛС.Идентификатор = НовоеЗначениеИдентификатора Тогда
                Продолжить; // Нет изменений
            КонецЕсли;

            ЛицевойСчетОбъект = СтрокаЛС.ЛицевойСчет.ПолучитьОбъект();
            ЛицевойСчетОбъект.Идентификатор = НовоеЗначениеИдентификатора;
            ЛицевойСчетОбъект.Записать();
            РезультатФункции.КоличествоОбновленныхИдентификаторов = РезультатФункции.КоличествоОбновленныхИдентификаторов + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при исправлении идентификаторов лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоОбновленныхИдентификаторов = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Устарела. Функция используется только в процессе разработки для оперативного внесения изменений
//   в созданные автоматически документы открытия лицевых счетов, из релиза будет удалена
//
// Исправляет (записывает) поле Контрагент в созданных автоматически (ГарантПлюс) документах открытия лицевых счетов
// Параметры:
//  РежимЗаписи - РежимЗаписиДокумента, Неопределено - (по умолчанию Запись)
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоОбновленных - Число
//      * ТекстСообщения - Строка, Неопределено
Функция ИсправитьКонтрагентовВСозданныхАвтоматическиДокументахОткрытияЛС(Знач РежимЗаписи = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоОбновленных, ТекстСообщения", Истина, 0);

    Если РежимЗаписи = Неопределено Тогда
        РежимЗаписи = РежимЗаписиДокумента.Запись;
    КонецЕсли;

    // Получение созданных автоматически документов открытия л/с и значения контрагентов
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |	И КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_КонтрагентыБП77.Код КАК Код,
        |	ГП_КонтрагентыБП77.Контрагент КАК Контрагент
        |ПОМЕСТИТЬ ВТ_Абоненты
        |ИЗ
        |	РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |ГДЕ
        |	ГП_КонтрагентыБП77.Контрагент <> &ПустаяСсылкаКонтрагент
        |	И ГП_КонтрагентыБП77.Группа = ""Абоненты""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ОткрытиеЛицевогоСчета.Ссылка КАК ОткрытиеЛС,
        |	ВТ_Абоненты.Контрагент КАК КонтрагентНовоеЗначение,
        |	КВП_ОткрытиеЛицевогоСчета.Контрагент КАК Контрагент
        |ИЗ
        |	Документ.КВП_ОткрытиеЛицевогоСчета КАК КВП_ОткрытиеЛицевогоСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ПО (ВТ_ЛицевыеСчета.Ссылка = КВП_ОткрытиеЛицевогоСчета.ЛицевойСчет)
        |			И (КВП_ОткрытиеЛицевогоСчета.ПометкаУдаления = ЛОЖЬ)
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Абоненты КАК ВТ_Абоненты
        |		ПО (ВТ_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ВТ_Абоненты.Код + ""[_-][0-9]%"")
        |";

    Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДокументовОткрытияЛС = РезультатЗапроса.Выгрузить();
    Если ТаблицаДокументовОткрытияЛС.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Перезапись значений контрагентов в документах открытия л/с
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаОткрытияЛС Из ТаблицаДокументовОткрытияЛС Цикл
            Если СтрокаОткрытияЛС.Контрагент = СтрокаОткрытияЛС.КонтрагентНовоеЗначение Тогда
                Продолжить; // Нет изменений
            КонецЕсли;

            ОткрытиеЛицевогоСчетаОбъект = СтрокаОткрытияЛС.ОткрытиеЛС.ПолучитьОбъект();
            ОткрытиеЛицевогоСчетаОбъект.Контрагент = СтрокаОткрытияЛС.КонтрагентНовоеЗначение;
            Если ЗначениеЗаполнено(ОткрытиеЛицевогоСчетаОбъект.Контрагент) Тогда
                ОткрытиеЛицевогоСчетаОбъект.ОтветственныйСобственник = ОткрытиеЛицевогоСчетаОбъект.Контрагент;
                ОткрытиеЛицевогоСчетаОбъект.ВладелецКонтрагент = Истина;
            КонецЕсли;

            ОткрытиеЛицевогоСчетаОбъект.Записать(РежимЗаписи);
            РезультатФункции.КоличествоОбновленных = РезультатФункции.КоличествоОбновленных + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при исправлении контрагентов открытия лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоОбновленных = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ТолькоДляРазработки
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --
