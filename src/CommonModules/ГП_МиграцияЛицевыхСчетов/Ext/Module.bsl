// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет создание лицевых счетов для зданий (объектов абонентов) для которы л/с отсутствуют в ИБ
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеЛицевыеСчета - Массив из СправочникСсылка.КВП_ЛицевыеСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьЛицевыеСчетаДляПеренесенныхЗданийБП77() Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеЛицевыеСчета, ТекстСообщения", Истина, Новый Массив);

    ЗданияБезЛицевыхСчетов = ГП_МиграцияЗданий.ПолучитьПеренесенныеЗданияБезЛицевыхСчетов();

    // Создание лицевых счетов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ЗданияБезЛицевыхСчетов Цикл
            // Контроль полей строки данных
            Если СтрокаДанных.КонтрагентКод = "" ИЛИ СтрокаДанных.ОбъектАбонентаКод = "" Тогда
                ВызватьИсключение("Код контрагента и код объекта абонента должны быть заполнены.");
            КонецЕсли;
            Если СтрокаДанных.Здание = Справочники.КВП_Здания.ПустаяСсылка()
                ИЛИ СтрокаДанных.Помещение = Справочники.УПЖКХ_Помещения.ПустаяСсылка() Тогда
                ВызватьИсключение("Здание и Помещение должны бить заполнены.");
            КонецЕсли;

            // Создание нового элемента ЛицевойСчет
            НовыйЛицевойСчет = Справочники.КВП_ЛицевыеСчета.СоздатьЭлемент();
            НовыйЛицевойСчет.ГП_СозданАвтоматически = Истина;
            НовыйЛицевойСчет.Наименование = СформироватьНаименованиеЛицевогоСчета(
                    СтрокаДанных.КонтрагентНаименование, СтрокаДанных.Здание.Наименование);
            НовыйЛицевойСчет.Адрес = СтрокаДанных.Помещение;
            НовыйЛицевойСчет.ГП_ИдентификаторБП77 = СформироватьСоставнойКодЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);
            НовыйЛицевойСчет.Идентификатор = СформироватьСоставнойКодЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);

            НовыйЛицевойСчет.Записать();
            РезультатФункции.СозданныеЛицевыеСчета.Добавить(НовыйЛицевойСчет.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        ОбщаяЧастьСообщения = "Ошибка при создании лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеЛицевыеСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьСоставнойКодЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", КонтрагентКод, ОбъектАбонентаКод);
КонецФункции

// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьИдентификаторЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", ОбъектАбонентаКод, КонтрагентКод);
КонецФункции

Функция СформироватьНаименованиеЛицевогоСчета(Знач НаименованиеКонтрагента, Знач НаименованиеЗдания) Экспорт
    Возврат СтрШаблон("%1 / %2", НаименованиеКонтрагента, НаименованиеЗдания);
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
