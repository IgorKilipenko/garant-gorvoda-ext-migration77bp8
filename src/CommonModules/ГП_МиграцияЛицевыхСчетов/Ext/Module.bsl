// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет создание лицевых счетов для зданий (объектов абонентов) для которы л/с отсутствуют в ИБ
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеЛицевыеСчета - Массив из СправочникСсылка.КВП_ЛицевыеСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьЛицевыеСчетаДляПеренесенныхЗданийБП77() Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеЛицевыеСчета, ТекстСообщения", Истина, Новый Массив);

    ЗданияБезЛицевыхСчетов = ГП_МиграцияЗданий.ПолучитьПеренесенныеЗданияБезЛицевыхСчетов();

    // Создание лицевых счетов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ЗданияБезЛицевыхСчетов Цикл
            // Контроль полей строки данных
            Если СтрокаДанных.КонтрагентКод = "" ИЛИ СтрокаДанных.ОбъектАбонентаКод = "" Тогда
                ВызватьИсключение("Код контрагента и код объекта абонента должны быть заполнены.");
            КонецЕсли;
            Если СтрокаДанных.Здание = Справочники.КВП_Здания.ПустаяСсылка()
                ИЛИ СтрокаДанных.Помещение = Справочники.УПЖКХ_Помещения.ПустаяСсылка() Тогда
                ВызватьИсключение("Здание и Помещение должны бить заполнены.");
            КонецЕсли;

            // Создание нового элемента ЛицевойСчет
            НовыйЛицевойСчет = Справочники.КВП_ЛицевыеСчета.СоздатьЭлемент();
            НовыйЛицевойСчет.ГП_СозданАвтоматически = Истина;
            НовыйЛицевойСчет.Наименование = СформироватьНаименованиеЛицевогоСчета(
                    СтрокаДанных.КонтрагентНаименование, СтрокаДанных.Здание.Наименование);
            НовыйЛицевойСчет.Адрес = СтрокаДанных.Помещение;
            НовыйЛицевойСчет.ГП_ИдентификаторБП77 = СформироватьСоставнойКодЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);
            НовыйЛицевойСчет.Идентификатор = СформироватьСоставнойКодЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);

            НовыйЛицевойСчет.Записать();
            РезультатФункции.СозданныеЛицевыеСчета.Добавить(НовыйЛицевойСчет.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        ОбщаяЧастьСообщения = "Ошибка при создании лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеЛицевыеСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Создает документы КВП_ОткрытиеЛицевогоСчета для неоткрытых лицевых счетов
// Параметры:
//  ДатаОткрытия - Дата
//  ТолькоСозданныеАвтоматически - Булево - Если Истина то будут отобраны лицевые счета с признаком СозданАвтоматически
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеДокументыОткрытияЛицевогоСчета - Массив из ДокументСсылка.КВП_ОткрытиеЛицевогоСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьДокументыОткрытияЛицевыхСчетов(Знач ДатаОткрытия, Знач ТолькоСозданныеАвтоматически) Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеДокументыОткрытияЛицевогоСчета, ТекстСообщения", Истина, Новый Массив);

    // Получаем данные для создания документов открытия л/с (для неоткрытых л/с)
    ТаблицаНеоткрытыхЛицевыхСчетов = ПолучитьНеоткрытыеЛицевыеСчета(Истина);

    // Создание документов открытия лицевых счетов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаЛицевогоСетаДляОткрытия Из ТаблицаНеоткрытыхЛицевыхСчетов Цикл
            НовыйДокументОткрытияЛС = Документы.КВП_ОткрытиеЛицевогоСчета.СоздатьДокумент();
            НовыйДокументОткрытияЛС.Дата = ДатаОткрытия;
            НовыйДокументОткрытияЛС.Комментарий = "#создано автоматически по данным из БП77 (ГарантПлюс)";
            НовыйДокументОткрытияЛС.Ответственный = Пользователи.ТекущийПользователь();
            НовыйДокументОткрытияЛС.ЛицевойСчет = СтрокаЛицевогоСетаДляОткрытия.ЛицевойСчет;
            НовыйДокументОткрытияЛС.КоличествоПроживающих = СтрокаЛицевогоСетаДляОткрытия.КоличествоПроживающих;
            НовыйДокументОткрытияЛС.ДоляЧислитель = 1;
            НовыйДокументОткрытияЛС.ДоляЗнаменатель = 1;

            НовыйДокументОткрытияЛС.Записать(РежимЗаписиДокумента.Запись);
            РезультатФункции.СозданныеДокументыОткрытияЛицевогоСчета.Добавить(НовыйДокументОткрытияЛС.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании документов открытия лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеДокументыОткрытияЛицевогоСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Получает таблицу неоткрытых лицевых счетов
// Параметры:
//  ТолькоСозданныеАвтоматически - Булево - Если Истина то будут отобраны лицевые счета с признаком СозданАвтоматически
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * Здание - СправочникСсылка.КВП_Здания
//      * Помещение - СправочникСсылка.УПЖКХ_Помещения
//      * КоличествоПроживающих - Число
Функция ПолучитьНеоткрытыеЛицевыеСчета(Знач ТолькоСозданныеАвтоматически = Истина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.Адрес КАК Помещение,
        |	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.Адрес <> &ПустаяСсылкаПомещение
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.Здание КАК Здание,
        |	ВТ_ЛицевыеСчета.Помещение КАК Помещение
        |ПОМЕСТИТЬ ВТ_НеоткрытыеЛС
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_ОткрытиеЛицевогоСчета КАК КВП_ОткрытиеЛицевогоСчета
        |		ПО ВТ_ЛицевыеСчета.Ссылка = КВП_ОткрытиеЛицевогоСчета.ЛицевойСчет
        |			И (КВП_ОткрытиеЛицевогоСчета.ПометкаУдаления = ЛОЖЬ)
        |ГДЕ
        |	КВП_ОткрытиеЛицевогоСчета.Ссылка ЕСТЬ NULL
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_НеоткрытыеЛС.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_НеоткрытыеЛС.Здание КАК Здание,
        |	ВТ_НеоткрытыеЛС.Помещение КАК Помещение,
        |	ЕСТЬNULL(ГП_ЗданияБП77.КоличествоПроживающих, 0) КАК КоличествоПроживающих
        |ИЗ
        |	ВТ_НеоткрытыеЛС КАК ВТ_НеоткрытыеЛС
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |		ПО ВТ_НеоткрытыеЛС.Здание = ГП_ЗданияБП77.Здание
        |";

    Если ТолькоСозданныеАвтоматически = Ложь Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА", "");
    КонецЕсли;
    Запрос.УстановитьПараметр("ПустаяСсылкаПомещение", Справочники.УПЖКХ_Помещения.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Формирует составной код лицевого счета
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьСоставнойКодЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", КонтрагентКод, ОбъектАбонентаКод);
КонецФункции

// Формирует идентификатор лицевого счета
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьИдентификаторЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", ОбъектАбонентаКод, КонтрагентКод);
КонецФункции

// Формирует наименование лицевого счета
// Параметры:
//  НаименованиеКонтрагента - Строка
//  НаименованиеЗдания - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьНаименованиеЛицевогоСчета(Знач НаименованиеКонтрагента, Знач НаименованиеЗдания) Экспорт
    Возврат СтрШаблон("%1 / %2", НаименованиеКонтрагента, НаименованиеЗдания);
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --
