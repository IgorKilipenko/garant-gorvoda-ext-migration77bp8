// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область ПрограммныйИнтерфейс

// Выполняет создание лицевых счетов для зданий (объектов абонентов) для которы л/с отсутствуют в ИБ
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеЛицевыеСчета - Массив из СправочникСсылка.КВП_ЛицевыеСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьЛицевыеСчетаДляПеренесенныхЗданийБП77() Экспорт
    РезультатФункции = Новый Структура("Успех, СозданныеЛицевыеСчета, ТекстСообщения", Истина, Новый Массив);

    ЗданияБезЛицевыхСчетов = ГП_МиграцияЗданий.ПолучитьПеренесенныеЗданияБезЛицевыхСчетов();

    // Создание лицевых счетов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ЗданияБезЛицевыхСчетов Цикл
            // Контроль полей строки данных
            Если СтрокаДанных.КонтрагентКод = "" ИЛИ СтрокаДанных.ОбъектАбонентаКод = "" Тогда
                ВызватьИсключение("Код контрагента и код объекта абонента должны быть заполнены.");
            КонецЕсли;
            Если СтрокаДанных.Здание = Справочники.КВП_Здания.ПустаяСсылка()
                ИЛИ СтрокаДанных.Помещение = Справочники.УПЖКХ_Помещения.ПустаяСсылка() Тогда
                ВызватьИсключение("Здание и Помещение должны бить заполнены.");
            КонецЕсли;

            // Создание нового элемента ЛицевойСчет
            НовыйЛицевойСчет = Справочники.КВП_ЛицевыеСчета.СоздатьЭлемент();
            НовыйЛицевойСчет.ГП_СозданАвтоматически = Истина;
            НовыйЛицевойСчет.Наименование = СформироватьНаименованиеЛицевогоСчета(
                    СтрокаДанных.КонтрагентНаименование, СтрокаДанных.Здание.Наименование);
            НовыйЛицевойСчет.Адрес = СтрокаДанных.Помещение;
            НовыйЛицевойСчет.ГП_ИдентификаторБП77 = СформироватьСоставнойКодЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);
            НовыйЛицевойСчет.Идентификатор = СформироватьИдентификаторЛицевогоСчета(
                    СтрокаДанных.КонтрагентКод, СтрокаДанных.ОбъектАбонентаКод);

            НовыйЛицевойСчет.Записать();
            РезультатФункции.СозданныеЛицевыеСчета.Добавить(НовыйЛицевойСчет.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();
        ОбщаяЧастьСообщения = "Ошибка при создании лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеЛицевыеСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Создает документы КВП_ОткрытиеЛицевогоСчета для неоткрытых лицевых счетов
// Параметры:
//  ДатаОткрытия - Дата
//  УдалитьТолькоСозданныеАвтоматически - Булево - Устарела. Если Истина то будут отобраны лицевые счета с признаком СозданАвтоматически
//  ДанныеЗаполнения - ТаблицаЗначений
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СозданныеДокументыОткрытияЛицевогоСчета - Массив из ДокументСсылка.КВП_ОткрытиеЛицевогоСчета
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьДокументыОткрытияЛицевыхСчетов(
        Знач ДатаОткрытия, Знач УдалитьТолькоСозданныеАвтоматически, ДанныеЗаполнения = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, СозданныеДокументыОткрытияЛицевогоСчета, ТекстСообщения", Истина, Новый Массив);

    // Получаем данные для создания документов открытия л/с (для неоткрытых л/с)
    ТаблицаНеоткрытыхЛицевыхСчетов = ?(ДанныеЗаполнения = Неопределено,
            ПолучитьНеоткрытыеЛицевыеСчета(Истина), ДанныеЗаполнения);

    // Создание документов открытия лицевых счетов
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаЛицевогоСетаДляОткрытия Из ТаблицаНеоткрытыхЛицевыхСчетов Цикл
            НовыйДокументОткрытияЛС = Документы.КВП_ОткрытиеЛицевогоСчета.СоздатьДокумент();
            НовыйДокументОткрытияЛС.Дата = ДатаОткрытия;
            НовыйДокументОткрытияЛС.Комментарий = "#создано автоматически по данным из БП77 (ГарантПлюс)";
            НовыйДокументОткрытияЛС.Ответственный = Пользователи.ТекущийПользователь();
            НовыйДокументОткрытияЛС.ЛицевойСчет = СтрокаЛицевогоСетаДляОткрытия.ЛицевойСчет;
            НовыйДокументОткрытияЛС.КоличествоПроживающих = СтрокаЛицевогоСетаДляОткрытия.КоличествоПроживающих;
            НовыйДокументОткрытияЛС.ДоляЧислитель = 1;
            НовыйДокументОткрытияЛС.ДоляЗнаменатель = 1;

            НовыйДокументОткрытияЛС.Контрагент = СтрокаЛицевогоСетаДляОткрытия.Контрагент;
            Если ЗначениеЗаполнено(НовыйДокументОткрытияЛС.Контрагент) Тогда
                НовыйДокументОткрытияЛС.ОтветственныйСобственник = НовыйДокументОткрытияЛС.Контрагент;
                НовыйДокументОткрытияЛС.ВладелецКонтрагент = Истина;
            КонецЕсли;

            НовыйДокументОткрытияЛС.Записать(РежимЗаписиДокумента.Запись);
            РезультатФункции.СозданныеДокументыОткрытияЛицевогоСчета.Добавить(НовыйДокументОткрытияЛС.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании документов открытия лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.СозданныеДокументыОткрытияЛицевогоСчета.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Создает документ (один !!!) УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам
// Параметры:
//  ДатаДокумента - Дата, Неопределено - По умолчанию 01.01.2024г !!! Исправить
//  ДанныеЗаполнения - ТаблицаЗначений, Неопределено
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * Контрагент - СправочникСсылка.Контрагенты
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписей - Число
//      * СозданныеДокументы - Массив из ДокументСсылка.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам
//      * ТекстСообщения - Строка, Неопределено
Функция СоздатьДокументыУправленияСведениямиДляВзаиморасчетовПоЛицевымСчетам(
        Знач ДатаДокумента = Неопределено, Знач ДанныеЗаполнения = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, КоличествоЗаписей, СозданныеДокументы, ТекстСообщения", Истина, 0, Новый Массив);

    // Получение исходных данных
    ТаблицаИсходныхДанных = ?(ДанныеЗаполнения = Неопределено,
            ПолучитьТаблицуОсновныхДоговоровАбонентовПеренесенныхЛицевыхСчетов(),
            ДанныеЗаполнения);

    // !!! Требует рефакторинг - исправить ситуацию с датой
    ДатаДокументаПоУмолчанию = ?(ДатаДокумента = Неопределено, Дата(2024, 01, 01), ДатаДокумента);
    ОсновнаяОрганизацияСсылка = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();

    НовыйДокументОбъект = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.СоздатьДокумент();
    НовыйДокументОбъект.Дата = ДатаДокументаПоУмолчанию;
    НовыйДокументОбъект.Организация = ОсновнаяОрганизацияСсылка;
    НовыйДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
    НовыйДокументОбъект.Комментарий = "#создано автоматически по данным из БП77 (ГарантПлюс)";

    Для Каждого СтрокаДанных Из ТаблицаИсходныхДанных Цикл
        НоваяСтрокаВзаиморасчетов = НовыйДокументОбъект.СведенияДляВзаиморасчетов.Добавить();
        НоваяСтрокаВзаиморасчетов.ЛицевойСчет = СтрокаДанных.ЛицевойСчет;
        НоваяСтрокаВзаиморасчетов.Контрагент = СтрокаДанных.Контрагент;
        НоваяСтрокаВзаиморасчетов.ДоговорКонтрагента = СтрокаДанных.Договор;

        РезультатФункции.КоличествоЗаписей = РезультатФункции.КоличествоЗаписей + 1;
    КонецЦикла;

    Попытка
        НовыйДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
        РезультатФункции.СозданныеДокументы.Добавить(НовыйДокументОбъект.Ссылка);
    Исключение
        ОбщаяЧастьСообщения = "Ошибка при создании документа ""Управления сведениями для взаиморасчетов по лицевым счетам"".";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоЗаписей = 0;
        РезультатФункции.СозданныеДокументы.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Гарант+ Килипенко 29.11.2024 [F00231556] Обмен со СТАРТ ++
//
// Параметры:
//  ПараметрыЗаполнения - Структура
//      * ТолькоНезаполненные - Булево - По умолчанию Ложь
//      * ЗаменятьЗаполненные - Булево - По умолчанию Истина
//  ДанныеЗаполнения - Неопределено, ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * ИсходныйКодМКД - Строка
//      * КодМКД - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * ИзмененныеЛицевыеСчета - Массив из СправочникСсылка.КВП_ЛицевыеСчета
Функция ЗаполнитьКодМКДПоВсемЛицевымСчетам(Знач ПараметрыЗаполнения, Знач ДанныеЗаполнения = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, ИзмененныеЛицевыеСчета, ТекстСообщения", Истина, Новый Массив);

    ТолькоНезаполненные = ?(ПараметрыЗаполнения.Свойство("ТолькоНезаполненные"), ПараметрыЗаполнения.ТолькоНезаполненные, Ложь);
    ЗаменятьЗаполненные = ?(ПараметрыЗаполнения.Свойство("ЗаменятьЗаполненные"), ПараметрыЗаполнения.ЗаменятьЗаполненные, Истина);

    ДанныеЗаполнения = ?(ДанныеЗаполнения = Неопределено,
            ПолучитьДанныеЗаполненияКодаМКДПоВсемЛицевымСчетам(ТолькоНезаполненные),
            ДанныеЗаполнения);

    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
            Если СтрокаДанных.ИсходныйКодМКД = СтрокаДанных.КодМКД Тогда
                Продолжить; // Нет изменений
            КонецЕсли;

            Если ЗаменятьЗаполненные = Ложь И ПустаяСтрока(СтрокаДанных.ИсходныйКодМКД) = Ложь Тогда
                Продолжить; // Не перезаписывать
            КонецЕсли;

            ЛицевойСчетОбъект = СтрокаДанных.ЛицевойСчет.ПолучитьОбъект();
            ЛицевойСчетОбъект.lc_КодМКД = СтрокаДанных.КодМКД;

            ЛицевойСчетОбъект.Записать();
            РезультатФункции.ИзмененныеЛицевыеСчета.Добавить(ЛицевойСчетОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию();

    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ИзмененныеЛицевыеСчета.Очистить();
        РезультатФункции.ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 29.11.2024 [F00231556] Обмен со СТАРТ --

// Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с ++
//
// Выполняет закрытие л/с отсутствующих (устаревших) на момент миграции в БП 7.7
// Параметры:
//  ДатаДокумента - Дата
//  ДатаАктуальности - Дата, Неопределено - Дата актуальности отбора состояний л/с
//  РежимЗаписи - РежимЗаписиДокумента, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СозданныеДокументы - Массив из ДокументСсылка.КВП_ЛицевыеСчета
Функция СоздатьДокументыЗакрытьяДляНеиспользуемыхЛицевыхСчетов(
        Знач ДатаДокумента, Знач ДатаАктуальности = Неопределено, Знач РежимЗаписи = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, СозданныеДокументы, ТекстСообщения", Истина, Новый Массив);

    РежимЗаписи = ?(РежимЗаписи = Неопределено, РежимЗаписиДокумента.Запись, РежимЗаписи);

    ЛицевыеСчетаДляЗакрытия = ПолучитьНеактуальныеЛицевыеСчетаДляЗакрытия(ДатаАктуальности);

    НачатьТранзакцию();
    Попытка
        Для Каждого ЛицевойСчет Из ЛицевыеСчетаДляЗакрытия Цикл
            ДокументОбъект = НовыйДокументЗакрытияЛицевогоСчета(ДатаДокумента, ЛицевойСчет);

            ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
            РезультатФункции.СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию();

    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        РезультатФункции.СозданныеДокументы.Очистить();
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка при создании документов закрытия л/с.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с --

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --

// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 ++
#Область СлужебныйПрограммныйИнтерфейс

// Получает таблицу неоткрытых лицевых счетов
// Параметры:
//  ТолькоСозданныеАвтоматически - Булево - Если Истина то будут отобраны лицевые счета с признаком СозданАвтоматически
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * Здание - СправочникСсылка.КВП_Здания
//      * Помещение - СправочникСсылка.УПЖКХ_Помещения
//      * Контрагент - СправочникСсылка.Контрагенты
//      * КоличествоПроживающих - Число
Функция ПолучитьНеоткрытыеЛицевыеСчета(Знач ТолькоСозданныеАвтоматически = Истина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.Адрес КАК Помещение,
        |	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.Адрес <> &ПустаяСсылкаПомещение
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.Здание КАК Здание,
        |	ВТ_ЛицевыеСчета.Помещение КАК Помещение
        |ПОМЕСТИТЬ ВТ_НеоткрытыеЛС
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_ОткрытиеЛицевогоСчета КАК КВП_ОткрытиеЛицевогоСчета
        |		ПО ВТ_ЛицевыеСчета.Ссылка = КВП_ОткрытиеЛицевогоСчета.ЛицевойСчет
        |			И (КВП_ОткрытиеЛицевогоСчета.ПометкаУдаления = ЛОЖЬ)
        |ГДЕ
        |	КВП_ОткрытиеЛицевогоСчета.Ссылка ЕСТЬ NULL
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_НеоткрытыеЛС.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_НеоткрытыеЛС.Здание КАК Здание,
        |	ВТ_НеоткрытыеЛС.Помещение КАК Помещение,
        |	ЕСТЬNULL(ГП_КонтрагентыБП77.Контрагент, &ПустаяСсылкаКонтрагент) КАК Контрагент,
        |	ЕСТЬNULL(ГП_ЗданияБП77.КоличествоПроживающих, 0) КАК КоличествоПроживающих
        |ИЗ
        |	ВТ_НеоткрытыеЛС КАК ВТ_НеоткрытыеЛС
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ЗданияБП77 КАК ГП_ЗданияБП77
        |		ПО ВТ_НеоткрытыеЛС.Здание = ГП_ЗданияБП77.Здание
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |		ПО (ГП_ЗданияБП77.КонтрагентКод = ГП_КонтрагентыБП77.Код)
        |";

    Если ТолькоСозданныеАвтоматически = Ложь Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА", "");
    КонецЕсли;
    Запрос.УстановитьПараметр("ПустаяСсылкаПомещение", Справочники.УПЖКХ_Помещения.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Получает таблицу созданных автоматически лицевых счетов (созданных только ГарантПлюс)
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьТаблицуПеренесенныхЛицевыхСчетовИзБП77ГП() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |   КВП_ЛицевыеСчета.Адрес КАК Помещение,
        |   КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
        |   КВП_ЛицевыеСчета.Идентификатор КАК Идентификатор,
        |   КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ИЗ
        |   Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |   КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |   И КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО &МакетИдентификатораЛС
        |   И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |";

    Запрос.УстановитьПараметр("МакетИдентификатораЛС", "%[0-9][_-][0-9]%");

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * СоставнойКодЛицевогоСчета - Строка
//      * Контрагент - СправочникСсылка.Контрагенты
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
Функция ПолучитьТаблицуОсновныхДоговоровАбонентовПеренесенныхЛицевыхСчетов() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |	И КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_КонтрагентыБП77.Код КАК Код,
        |	ГП_КонтрагентыБП77.ОсновнойДоговорКод КАК ОсновнойДоговорКод,
        |	ГП_КонтрагентыБП77.ОсновнойДоговорНаименование КАК ОсновнойДоговорНаименование,
        |	ГП_КонтрагентыБП77.Контрагент КАК Контрагент
        |ПОМЕСТИТЬ ВТ_Абоненты
        |ИЗ
        |	РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |ГДЕ
        |	ГП_КонтрагентыБП77.Контрагент <> &ПустаяСсылкаКонтрагент
        |	И ГП_КонтрагентыБП77.Группа = ""Абоненты""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
        |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
        |	ДоговорыКонтрагентов.Код КАК Код,
        |	ДоговорыКонтрагентов.Наименование КАК Наименование,
        |	ДоговорыКонтрагентов.lc_ВидДоговора КАК lc_ВидДоговора,
        |	ДоговорыКонтрагентов.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |	ДоговорыКонтрагентов.ГП_СозданАвтоматически КАК ГП_СозданАвтоматически
        |ПОМЕСТИТЬ ВТ_Договоры
        |ИЗ
        |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |	ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
        |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
        |	И ДоговорыКонтрагентов.Владелец ССЫЛКА Справочник.Контрагенты
        |	И ДоговорыКонтрагентов.lc_ВидДоговора.Код = ""000000004""
        |	И ДоговорыКонтрагентов.Владелец В
        |			(ВЫБРАТЬ
        |				ВТ_Абоненты.Контрагент
        |			ИЗ
        |				ВТ_Абоненты)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК СоставнойКодЛицевогоСчета,
        |	ВТ_Абоненты.Код КАК Код,
        |	ВТ_Абоненты.Контрагент КАК Контрагент,
        |	ВТ_Договоры.Ссылка КАК Договор
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Абоненты КАК ВТ_Абоненты
        |		ПО (ВТ_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ВТ_Абоненты.Код + ""_[0-9]%"")
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
        |		ПО (ВТ_Договоры.Наименование = ВТ_Абоненты.ОсновнойДоговорНаименование)
        |			И (ВТ_Абоненты.Контрагент = ВТ_Договоры.Контрагент)
        |ГДЕ
        |	НЕ ВТ_Договоры.Ссылка ЕСТЬ NULL
        |";

    Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Гарант+ Килипенко 29.11.2024 [F00231556] Обмен со СТАРТ ++
//
// Параметры:
//  ТолькоНезаполненные - Булево
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * ИсходныйКодМКД - Строка
//      * КодМКД - Строка
Функция ПолучитьДанныеЗаполненияКодаМКДПоВсемЛицевымСчетам(Знач ТолькоНезаполненные = Ложь) Экспорт
    ДлинаКодаМКД = 9;

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ЗданияБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |	ЗданияБП77.КодМКД КАК КодМКД,
        |	ЗданияБП77.ОбъектАбонентаКод + ""_"" + ЗданияБП77.КонтрагентКод КАК ИдентификаторЛС
        |ПОМЕСТИТЬ ВТ_ЗданияБП77
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ЗданияБП77
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ЛицевыеСчета.Ссылка КАК Ссылка,
        |	ЛицевыеСчета.Наименование КАК Наименование,
        |	ЛицевыеСчета.Адрес КАК Помещение,
        |	ЕСТЬNULL(ЛицевыеСчета.Адрес.Владелец, ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)) КАК Здание,
        |	ЛицевыеСчета.Идентификатор КАК Идентификатор,
        |	ЛицевыеСчета.lc_КодМКД КАК КодМКД
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК ЛицевыеСчета
        |ГДЕ
        |	ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И ЛицевыеСчета.Идентификатор В
        |			(ВЫБРАТЬ
        |				Т.ИдентификаторЛС
        |			ИЗ
        |				ВТ_ЗданияБП77 КАК Т)
        |	И ЛицевыеСчета.lc_КодМКД = """"
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВТ_ЛицевыеСчета.Наименование КАК Наименование,
        |	ВТ_ЛицевыеСчета.Помещение КАК Помещение,
        |	ВТ_ЛицевыеСчета.Здание КАК Здание,
        |	ВТ_ЛицевыеСчета.Идентификатор КАК Идентификатор,
        |	ВТ_ЛицевыеСчета.КодМКД КАК ИсходныйКодМКД,
        |	ВЫРАЗИТЬ(ВТ_ЗданияБП77.КодМКД КАК СТРОКА(&ДлинаКодаМКД)) КАК КодМКД,
        |	ВТ_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ЗданияБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗданияБП77 КАК ВТ_ЗданияБП77
        |		ПО ВТ_ЛицевыеСчета.Идентификатор = ВТ_ЗданияБП77.ИдентификаторЛС
        |";

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДлинаКодаМКД", Формат(ДлинаКодаМКД, "ЧДЦ=0; ЧГ=0"));
    Если ТолькоНезаполненные = Ложь Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЛицевыеСчета.lc_КодМКД = """"", "");
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();

    // Дополнение кодов МКД
    Для Каждого СтрокаДанных Из РезультатФункции Цикл
        Если ПустаяСтрока(СтрокаДанных.КодМКД) = Истина Тогда
            Если СтрДлина(СтрокаДанных.КодМКД) > 0 Тогда
                СтрокаДанных.КодМКД = "";
            КонецЕсли;

            Продолжить;
        КонецЕсли;

        СтрокаДанных.КодМКД = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
                СтрокаДанных.КодМКД, ДлинаКодаМКД, "0", "Слева");
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 29.11.2024 [F00231556] Обмен со СТАРТ --

// Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с ++
//
// Параметры:
//  ДатаАктуальностиЛицевыхСчетов - Дата, Неопределено
//  ИсключитьПомеченныеНаУдаление - Булево
// Возвращаемое значение:
//  - Массив из СправочникСсылка.КВП_ЛицевыеСчета
Функция ПолучитьНеактуальныеЛицевыеСчетаДляЗакрытия(
        Знач ДатаАктуальностиЛицевыхСчетов = Неопределено, ИсключитьПомеченныеНаУдаление = Истина) Экспорт

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ЗданияБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименованиеБП77,
        |	ЗданияБП77.ОбъектАбонентаКод + ""_"" + ЗданияБП77.КонтрагентКод КАК ИдентификаторЛС
        |ПОМЕСТИТЬ ВТ_ЗданияБП77
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ЗданияБП77
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Период КАК Период,
        |	КВП_ЛицевыеСчета.Объект КАК Помещение,
        |	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
        |	КВП_ЛицевыеСчета.Действует КАК Действует
        |ПОМЕСТИТЬ ВТ_ЗакрытыеЛицевыеСчета
        |ИЗ
        |	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаАктуальностиЛицевыхСчетов, ) КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.Действует = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ЛицевыеСчета.Ссылка КАК ЛицевойСчет
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК ЛицевыеСчета
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗданияБП77 КАК ВТ_ЗданияБП77
        |		ПО ЛицевыеСчета.Идентификатор = ВТ_ЗданияБП77.ИдентификаторЛС
        |			И (ЛицевыеСчета.Идентификатор <> """")
        |ГДЕ
        |	ВТ_ЗданияБП77.КонтрагентКод ЕСТЬ NULL
        |	И ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |	И ЛицевыеСчета.Идентификатор ПОДОБНО ""%[0-9]~_[0-9]%"" СПЕЦСИМВОЛ ""~""
        |	И НЕ ЛицевыеСчета.Ссылка В
        |				(ВЫБРАТЬ
        |					Т.ЛицевойСчет
        |				ИЗ
        |					ВТ_ЗакрытыеЛицевыеСчета КАК Т)
        |";

    Если ДатаАктуальностиЛицевыхСчетов = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальностиЛицевыхСчетов", "");
    Иначе
        Запрос.УстановитьПараметр("ДатаАктуальностиЛицевыхСчетов", ДатаАктуальностиЛицевыхСчетов);
    КонецЕсли;

    Если ИсключитьПомеченныеНаУдаление = Ложь Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ", "");
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с --

// Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с ++
//
// Параметры:
//  ДатаДокумента - Дата
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
// Возвращаемое значение:
//  - ДокументОбъект.КВП_ЗакрытиеЛицевогоСчета
Функция НовыйДокументЗакрытияЛицевогоСчета(Знач ДатаДокумента, Знач ЛицевойСчет) Экспорт
    НовыйДокументОбъект = ГП_РаботаСЛицевымиСчетами.НовыйДокументЗакрытияЛицевогоСчета(ЛицевойСчет);
    НовыйДокументОбъект.ОбнулитьНачисления = Ложь;
    НовыйДокументОбъект.АннулироватьДанныеОСобственности = Ложь;
    НовыйДокументОбъект.Дата = ДатаДокумента;
    НовыйДокументОбъект.ЛицевойСчет = ЛицевойСчет;
    НовыйДокументОбъект.Комментарий = "#создан автоматически (ГарантПлюс)";

    Возврат НовыйДокументОбъект;
КонецФункции // Гарант+ Килипенко 18.12.2024 [F00232368] Закрытие неактуальных л/с --

// Формирует составной код лицевого счета
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьСоставнойКодЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", КонтрагентКод, ОбъектАбонентаКод);
КонецФункции

// Формирует идентификатор лицевого счета
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьИдентификаторЛицевогоСчета(Знач КонтрагентКод, Знач ОбъектАбонентаКод) Экспорт
    Возврат СтрШаблон("%1_%2", ОбъектАбонентаКод, КонтрагентКод);
КонецФункции

// Формирует наименование лицевого счета
// Параметры:
//  НаименованиеКонтрагента - Строка
//  НаименованиеЗдания - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьНаименованиеЛицевогоСчета(Знач НаименованиеКонтрагента, Знач НаименованиеЗдания) Экспорт
    Возврат СтрШаблон("%1 / %2", НаименованиеКонтрагента, НаименованиеЗдания);
КонецФункции

// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 ++
#Область ТолькоДляРазработки

// Устарела. Функция используется только в процессе разработки, из релиза будет удалена
//
// Исправляет значения реквизита Идентификатор для всех созданных автоматически ГарантПлюс лицевых счетов
//  меняя местами код контрагента и код объекта абонента для соответствия схеме идентификатора ранее используемого клиентом
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоОбновленныхИдентификаторов - Число
//      * ТекстСообщения - Строка, Неопределено
Функция ИсправитьИдентификаторыПеренесенныхЛицевыхСчетов() Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоОбновленныхИдентификаторов, ТекстСообщения", Истина, 0);

    // Получаем лицевые счета для исправления
    ТаблицаПеренесенныхЛС = ПолучитьТаблицуПеренесенныхЛицевыхСчетовИзБП77ГП();

    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаЛС Из ТаблицаПеренесенныхЛС Цикл
            РезультатПоиска = СтрНайтиПоРегулярномуВыражению(СтрокаЛС.ГП_ИдентификаторБП77, "^([0-9]+)_([0-9]+)$");
            Если РезультатПоиска.НачальнаяПозиция = 0 Тогда
                Продолжить;
            КонецЕсли;

            НайденныеГруппы = РезультатПоиска.ПолучитьГруппы();
            Если НайденныеГруппы.Количество() < 2 Тогда
                Продолжить;
            КонецЕсли;

            НовоеЗначениеИдентификатора = СформироватьИдентификаторЛицевогоСчета(НайденныеГруппы[0].Значение, НайденныеГруппы[1].Значение);
            Если СтрокаЛС.Идентификатор = НовоеЗначениеИдентификатора Тогда
                Продолжить; // Нет изменений
            КонецЕсли;

            ЛицевойСчетОбъект = СтрокаЛС.ЛицевойСчет.ПолучитьОбъект();
            ЛицевойСчетОбъект.Идентификатор = НовоеЗначениеИдентификатора;
            ЛицевойСчетОбъект.Записать();
            РезультатФункции.КоличествоОбновленныхИдентификаторов = РезультатФункции.КоличествоОбновленныхИдентификаторов + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при исправлении идентификаторов лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоОбновленныхИдентификаторов = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Устарела. Функция используется только в процессе разработки для оперативного внесения изменений
//   в созданные автоматически документы открытия лицевых счетов, из релиза будет удалена
//
// Исправляет (записывает) поле Контрагент в созданных автоматически (ГарантПлюс) документах открытия лицевых счетов
// Параметры:
//  РежимЗаписи - РежимЗаписиДокумента, Неопределено - (по умолчанию Запись)
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоОбновленных - Число
//      * ТекстСообщения - Строка, Неопределено
Функция ИсправитьКонтрагентовВСозданныхАвтоматическиДокументахОткрытияЛС(Знач РежимЗаписи = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоОбновленных, ТекстСообщения", Истина, 0);

    Если РежимЗаписи = Неопределено Тогда
        РежимЗаписи = РежимЗаписиДокумента.Запись;
    КонецЕсли;

    // Получение созданных автоматически документов открытия л/с и значения контрагентов
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
        |ГДЕ
        |	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И КВП_ЛицевыеСчета.ГП_СозданАвтоматически = ИСТИНА
        |	И КВП_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ""%[0-9][_-][0-9]%""
        |	И КВП_ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ГП_КонтрагентыБП77.Код КАК Код,
        |	ГП_КонтрагентыБП77.Контрагент КАК Контрагент
        |ПОМЕСТИТЬ ВТ_Абоненты
        |ИЗ
        |	РегистрСведений.ГП_КонтрагентыБП77 КАК ГП_КонтрагентыБП77
        |ГДЕ
        |	ГП_КонтрагентыБП77.Контрагент <> &ПустаяСсылкаКонтрагент
        |	И ГП_КонтрагентыБП77.Группа = ""Абоненты""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ОткрытиеЛицевогоСчета.Ссылка КАК ОткрытиеЛС,
        |	ВТ_Абоненты.Контрагент КАК КонтрагентНовоеЗначение,
        |	КВП_ОткрытиеЛицевогоСчета.Контрагент КАК Контрагент
        |ИЗ
        |	Документ.КВП_ОткрытиеЛицевогоСчета КАК КВП_ОткрытиеЛицевогоСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |		ПО (ВТ_ЛицевыеСчета.Ссылка = КВП_ОткрытиеЛицевогоСчета.ЛицевойСчет)
        |			И (КВП_ОткрытиеЛицевогоСчета.ПометкаУдаления = ЛОЖЬ)
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Абоненты КАК ВТ_Абоненты
        |		ПО (ВТ_ЛицевыеСчета.ГП_ИдентификаторБП77 ПОДОБНО ВТ_Абоненты.Код + ""[_-][0-9]%"")
        |";

    Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДокументовОткрытияЛС = РезультатЗапроса.Выгрузить();
    Если ТаблицаДокументовОткрытияЛС.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Перезапись значений контрагентов в документах открытия л/с
    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаОткрытияЛС Из ТаблицаДокументовОткрытияЛС Цикл
            Если СтрокаОткрытияЛС.Контрагент = СтрокаОткрытияЛС.КонтрагентНовоеЗначение Тогда
                Продолжить; // Нет изменений
            КонецЕсли;

            ОткрытиеЛицевогоСчетаОбъект = СтрокаОткрытияЛС.ОткрытиеЛС.ПолучитьОбъект();
            ОткрытиеЛицевогоСчетаОбъект.Контрагент = СтрокаОткрытияЛС.КонтрагентНовоеЗначение;
            Если ЗначениеЗаполнено(ОткрытиеЛицевогоСчетаОбъект.Контрагент) Тогда
                ОткрытиеЛицевогоСчетаОбъект.ОтветственныйСобственник = ОткрытиеЛицевогоСчетаОбъект.Контрагент;
                ОткрытиеЛицевогоСчетаОбъект.ВладелецКонтрагент = Истина;
            КонецЕсли;

            ОткрытиеЛицевогоСчетаОбъект.Записать(РежимЗаписи);
            РезультатФункции.КоличествоОбновленных = РезультатФункции.КоличествоОбновленных + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при исправлении контрагентов открытия лицевых счетов.";
        СтруктураОшибки = ГП_МиграцияОбщегоНазначения.ЗаписатьОшибкуВЖурнал(
                ОбщаяЧастьСообщения, ИнформацияОбОшибке(), Ложь, Истина);

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                СтруктураОшибки.КраткоеПредставлениеОшибки);

        РезультатФункции.КоличествоОбновленных = 0;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

Функция ВыполнитьКорректировкуОткрытыхЛСПоДублямДоговоров() Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);

    СтруктураДанныхКорректировки = ПолучитьДанныеКорректировкиЛСПоДублямДокументов();

    НачатьТранзакцию();
    Попытка
        // Корректируем документы открытия ЛС
        Для Каждого ДокументыОткрытияЛС Из СтруктураДанныхКорректировки.ДокументыОткрытияЛС Цикл
            ДокументыОткрытияЛСОбъект = ДокументыОткрытияЛС.Ссылка.ПолучитьОбъект();
            ДокументыОткрытияЛСОбъект.Контрагент = ДокументыОткрытияЛС.КонтрагентЗамены;
            ДокументыОткрытияЛСОбъект.ОтветственныйСобственник = ДокументыОткрытияЛС.КонтрагентЗамены;
            ДокументыОткрытияЛСОбъект.Записать(
                ?(ДокументыОткрытияЛСОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
        КонецЦикла;

        // Корректируем документы УправлениеСведениямиДляВзаиморасчетов
        Для Каждого СведенияДляВзаиморасчетов Из СтруктураДанныхКорректировки.СведенияДляВзаиморасчетов.Строки Цикл
            УправлениеСведениямиДляВзаиморасчетовОбъект = СведенияДляВзаиморасчетов.Ссылка.ПолучитьОбъект();
            ДанныеДляИзмененияВзаиморасчетов = Новый Массив(
                    УправлениеСведениямиДляВзаиморасчетовОбъект.СведенияДляВзаиморасчетов.Количество());
            Для Каждого СтрокаКорректировки Из СведенияДляВзаиморасчетов.Строки Цикл
                НайденныеСтроки = УправлениеСведениямиДляВзаиморасчетовОбъект.СведенияДляВзаиморасчетов.НайтиСтроки(
                        Новый Структура("ЛицевойСчет, ДоговорКонтрагента, Контрагент",
                            СтрокаКорректировки.ЛицевойСчет, СтрокаКорректировки.ДоговорКонтрагента, СтрокаКорректировки.Контрагент));

                Для Каждого СтрокаИзменения Из НайденныеСтроки Цикл
                    СтрокаИзменения.ДоговорКонтрагента = СтрокаКорректировки.ДоговорЗамены;
                    СтрокаИзменения.Контрагент = СтрокаКорректировки.КонтрагентЗамены;

                    ДанныеДляИзмененияВзаиморасчетов.Вставить(СтрокаИзменения.НомерСтроки - 1, СтрокаИзменения);
                КонецЦикла;
            КонецЦикла;

            УправлениеСведениямиДляВзаиморасчетовОбъект.Записать(
                ?(УправлениеСведениямиДляВзаиморасчетовОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
        КонецЦикла;

        // Удаление договоров
        Для Каждого ДоговорДляУдаления Из СтруктураДанныхКорректировки.ДоговорыДляУдаления Цикл
            ДоговорОбъект = ДоговорДляУдаления.Договор.ПолучитьОбъект();
            ДоговорОбъект.УстановитьПометкуУдаления(Истина);
        КонецЦикла;

        // Удаление контрагентов
        Для Каждого КонтрагентДляУдаления Из СтруктураДанныхКорректировки.КонтрагентыДляУдаления Цикл
            КонтрагентОбъект = КонтрагентДляУдаления.Контрагент.ПолучитьОбъект();
            КонтрагентОбъект.УстановитьПометкуУдаления(Истина);
        КонецЦикла;

        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        ОбщегоНазначения.СообщитьПользователю(РезультатФункции.ТекстСообщения);
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьДанныеКорректировкиЛСПоДублямДокументов() Экспорт
    МВТ = Новый МенеджерВременныхТаблиц;
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ДоговорыКонтрагентов.Ссылка) КАК uid,
        |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
        |	ДоговорыКонтрагентов.Код КАК Код,
        |	ДоговорыКонтрагентов.Наименование КАК Наименование,
        |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
        |	ДоговорыКонтрагентов.lc_ВидДоговора КАК ВидДоговора,
        |	ДоговорыКонтрагентов.ГП_ИдентификаторБП77 КАК ИдентификаторБП77,
        |	ДоговорыКонтрагентов.ГП_СозданАвтоматически КАК СозданАвтоматически
        |ПОМЕСТИТЬ ВТ_Договоры
        |ИЗ
        |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |	ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
        |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Договоры.uid КАК uid,
        |	ВТ_Договоры.Ссылка КАК Договор,
        |	ВТ_Договоры.Код КАК Код,
        |	ВТ_Договоры.Наименование КАК Наименование,
        |	ВТ_Договоры.Контрагент КАК Контрагент,
        |	ВТ_Договоры.ВидДоговора КАК ВидДоговора,
        |	ВТ_Договоры.ИдентификаторБП77 КАК ИдентификаторБП77,
        |	ВТ_Договоры.СозданАвтоматически КАК СозданАвтоматически,
        |	Т.uid КАК uidЗамены,
        |	Т.Ссылка КАК ДоговорЗамены,
        |	Т.Код КАК КодЗамены,
        |	Т.Наименование КАК НаименованиеЗамены,
        |	Т.Контрагент КАК КонтрагентЗамены,
        |	Т.ВидДоговора КАК ВидДоговораЗамены,
        |	Т.ИдентификаторБП77 КАК ИдентификаторБП77Замены,
        |	Т.СозданАвтоматически КАК СозданАвтоматическиЗамены
        |ПОМЕСТИТЬ ВТ_ДублиДоговоров
        |ИЗ
        |	ВТ_Договоры КАК ВТ_Договоры
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договоры КАК Т
        |		ПО ВТ_Договоры.Наименование = Т.Наименование
        |			И ВТ_Договоры.uid <> Т.uid
        |			И (ВТ_Договоры.ВидДоговора.Код = ""000000004"")
        |			И ВТ_Договоры.ВидДоговора = Т.ВидДоговора
        |			И (ВТ_Договоры.СозданАвтоматически = ИСТИНА)
        |			И (Т.СозданАвтоматически = ЛОЖЬ)
        |			И (ВТ_Договоры.Контрагент.ГП_СозданАвтоматически = ИСТИНА)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ОткрытиеЛицевогоСчета.Ссылка КАК Ссылка,
        |	КВП_ОткрытиеЛицевогоСчета.Номер КАК Номер,
        |	КВП_ОткрытиеЛицевогоСчета.Дата КАК Дата,
        |	КВП_ОткрытиеЛицевогоСчета.Проведен КАК Проведен,
        |	КВП_ОткрытиеЛицевогоСчета.ЛицевойСчет КАК ЛицевойСчет,
        |	КВП_ОткрытиеЛицевогоСчета.Контрагент КАК Контрагент,
        |	КВП_ОткрытиеЛицевогоСчета.ОтветственныйСобственник КАК ОтветственныйСобственник,
        |	КВП_ОткрытиеЛицевогоСчета.ВладелецКонтрагент КАК ВладелецКонтрагент,
        |	ВТ_ДублиДоговоров.uid КАК uid,
        |	ВТ_ДублиДоговоров.Договор КАК Договор,
        |	ВТ_ДублиДоговоров.Код КАК Код,
        |	ВТ_ДублиДоговоров.Наименование КАК Наименование,
        |	ВТ_ДублиДоговоров.ВидДоговора КАК ВидДоговора,
        |	ВТ_ДублиДоговоров.ИдентификаторБП77 КАК ИдентификаторБП77,
        |	ВТ_ДублиДоговоров.СозданАвтоматически КАК СозданАвтоматически,
        |	ВТ_ДублиДоговоров.uidЗамены КАК uidЗамены,
        |	ВТ_ДублиДоговоров.ДоговорЗамены КАК ДоговорЗамены,
        |	ВТ_ДублиДоговоров.КодЗамены КАК КодЗамены,
        |	ВТ_ДублиДоговоров.НаименованиеЗамены КАК НаименованиеЗамены,
        |	ВТ_ДублиДоговоров.КонтрагентЗамены КАК КонтрагентЗамены,
        |	ВТ_ДублиДоговоров.ВидДоговораЗамены КАК ВидДоговораЗамены,
        |	ВТ_ДублиДоговоров.ИдентификаторБП77Замены КАК ИдентификаторБП77Замены,
        |	ВТ_ДублиДоговоров.СозданАвтоматическиЗамены КАК СозданАвтоматическиЗамены
        |ПОМЕСТИТЬ ВТ_ДокументыОткрытияЛСДляКорректировки
        |ИЗ
        |	Документ.КВП_ОткрытиеЛицевогоСчета КАК КВП_ОткрытиеЛицевогоСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДублиДоговоров КАК ВТ_ДублиДоговоров
        |		ПО КВП_ОткрытиеЛицевогоСчета.Контрагент = ВТ_ДублиДоговоров.Контрагент
        |;";

    // Формирование временных таблиц
    Запрос.Выполнить();

    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    Запрос.Текст =
        "
        |////////////////////////////////////////////////////////////////////////////////
        |// ДокументыОткрытияЛС для корректировки
        |// Результат [0]
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	*
        |ИЗ
        |	ВТ_ДокументыОткрытияЛСДляКорректировки КАК ВТ_ДокументыОткрытияЛСДляКорректировки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// СведенияДляВзаиморасчетов для корректировки
        |// Результат [1]
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	СведенияДляВзаиморасчетов.Ссылка КАК Ссылка,
        |	СведенияДляВзаиморасчетов.НомерСтроки КАК НомерСтроки,
        |	СведенияДляВзаиморасчетов.ЛицевойСчет КАК ЛицевойСчет,
        |	СведенияДляВзаиморасчетов.Контрагент КАК Контрагент,
        |	СведенияДляВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.Ссылка КАК ДокументОткрытияЛС,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.uid КАК uid,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.uidЗамены КАК uidЗамены,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.ДоговорЗамены КАК ДоговорЗамены,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.КодЗамены КАК КодЗамены,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.КонтрагентЗамены КАК КонтрагентЗамены,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.ВидДоговораЗамены КАК ВидДоговораЗамены,
        |	ВТ_ДокументыОткрытияЛСДляКорректировки.ИдентификаторБП77Замены КАК ИдентификаторБП77Замены
        |ИЗ
        |	Документ.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.СведенияДляВзаиморасчетов КАК СведенияДляВзаиморасчетов
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыОткрытияЛСДляКорректировки КАК ВТ_ДокументыОткрытияЛСДляКорректировки
        |		ПО СведенияДляВзаиморасчетов.ЛицевойСчет = ВТ_ДокументыОткрытияЛСДляКорректировки.ЛицевойСчет
        |			И СведенияДляВзаиморасчетов.Контрагент = ВТ_ДокументыОткрытияЛСДляКорректировки.Контрагент
        |			И СведенияДляВзаиморасчетов.ДоговорКонтрагента = ВТ_ДокументыОткрытияЛСДляКорректировки.Договор
        |ИТОГИ ПО СведенияДляВзаиморасчетов.Ссылка
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// ДоговорыДляУдаления
        |// Результат [2]
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_ДублиДоговоров.Договор КАК Договор
        |ИЗ
        |	ВТ_ДублиДоговоров КАК ВТ_ДублиДоговоров
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// КонтрагентыДляУдаления
        |// Результат [3]
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	ВТ_ДублиДоговоров.Контрагент КАК Контрагент
        |ИЗ
        |	ВТ_ДублиДоговоров КАК ВТ_ДублиДоговоров
        |;";

    РезультатФункции = Новый Структура;

    РезультатПакетаЗапроса = Запрос.ВыполнитьПакет();
    РезультатФункции.Вставить("ДокументыОткрытияЛС", РезультатПакетаЗапроса[0].Выгрузить());
    РезультатФункции.Вставить("СведенияДляВзаиморасчетов", РезультатПакетаЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
    РезультатФункции.Вставить("ДоговорыДляУдаления", РезультатПакетаЗапроса[2].Выгрузить());
    РезультатФункции.Вставить("КонтрагентыДляУдаления", РезультатПакетаЗапроса[3].Выгрузить());

    Возврат РезультатФункции;
КонецФункции

// Гарант+ Килипенко 18.11.2024 [F00231122] До-создание документов взаиморасчетов по л/с ++
//
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * Договор - СправочникСсылка.ДоговорыКонтрагентов
//      * Контрагент - СправочникСсылка.Контрагенты
Функция ПолучитьДанныеДляСозданияВзаиморасчетовПоЛСДляНесозданных() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	СведенияДляВзаиморасчетовПоЛС.Период КАК Период,
        |	СведенияДляВзаиморасчетовПоЛС.Организация КАК Организация,
        |	СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет КАК ЛицевойСчет,
        |	СведенияДляВзаиморасчетовПоЛС.Договор КАК Договор,
        |	СведенияДляВзаиморасчетовПоЛС.Контрагент КАК Контрагент
        |ПОМЕСТИТЬ ВТ_СведенияДляВзаиморасчетовПоЛС
        |ИЗ
        |	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(, ) КАК СведенияДляВзаиморасчетовПоЛС
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ЛицевыеСчета.Ссылка КАК Ссылка
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчета
        |ИЗ
        |	Справочник.КВП_ЛицевыеСчета КАК ЛицевыеСчета
        |ГДЕ
        |	ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |	И ЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЛицевыеСчета.Ссылка КАК Ссылка,
        |	ВТ_ЛицевыеСчета.Ссылка.Идентификатор КАК Идентификатор
        |ПОМЕСТИТЬ ВТ_ЛицевыеСчетаБезВзаиморасчетов
        |ИЗ
        |	ВТ_ЛицевыеСчета КАК ВТ_ЛицевыеСчета
        |ГДЕ
        |	НЕ ВТ_ЛицевыеСчета.Ссылка В
        |				(ВЫБРАТЬ
        |					Т.ЛицевойСчет
        |				ИЗ
        |					ВТ_СведенияДляВзаиморасчетовПоЛС КАК Т)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ЗданияБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |	ЗданияБП77.ДоговорНомер КАК ДоговорНомер,
        |	ЗданияБП77.ОбъектАбонентаКод + ""_"" + ЗданияБП77.КонтрагентКод КАК ИдентификаторЛС,
        |	ДоговорыБП77.Наименование КАК НаименованиеДоговора,
        |	КонтрагентыБП77.ИНН КАК ИНН,
        |	КонтрагентыБП77.КПП КАК КПП,
        |	КонтрагентыБП77.Наименование КАК НаименованиеКонтрагентаБП77,
        |	КонтрагентыБП77.ПолнНаименование КАК ПолноеНаименованиеКонтрагентаБП77,
        |	КонтрагентыБП77.ОсновнойДоговорКод КАК ОсновнойДоговорКод,
        |	КонтрагентыБП77.ОсновнойДоговорНаименование КАК ОсновнойДоговорНаименование
        |ПОМЕСТИТЬ ВТ_ЗданияБП77
        |ИЗ
        |	РегистрСведений.ГП_ЗданияБП77 КАК ЗданияБП77
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_ДоговорыБП77 КАК ДоговорыБП77
        |		ПО ЗданияБП77.КонтрагентКод = ДоговорыБП77.КонтрагентКод
        |			И ЗданияБП77.ДоговорКод = ДоговорыБП77.Код
        |			И (ЗданияБП77.ВидДоговораНаименование = ""Абонентский отдел"")
        |			И (ЗданияБП77.ЭтоНегативноеВоздействиеЦСВ = ЛОЖЬ)
        |			И (ЗданияБП77.ЭтоПлатаЗаХолодноеВодоснабжениеОИ = ЛОЖЬ)
        |			// И (ЗданияБП77.ЭтоПотериВоды = ЛОЖЬ)
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГП_КонтрагентыБП77 КАК КонтрагентыБП77
        |		ПО ЗданияБП77.КонтрагентКод = КонтрагентыБП77.Код
        |ГДЕ
        |	ЗданияБП77.ДоговорНомер <> """"
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВЫРАЗИТЬ(СоответствияНомеровСуществующихДоговоров.Ссылка КАК Справочник.ДоговорыКонтрагентов) КАК Ссылка,
        |	СоответствияНомеровСуществующихДоговоров.Наименование КАК Наименование,
        |	СоответствияНомеровСуществующихДоговоров.НомерИзНаименования КАК НомерИзНаименования
        |ПОМЕСТИТЬ ВТ_СоответствияНомеровСуществующихДоговоров
        |ИЗ
        |	&СоответствияНомеровСуществующихДоговоров КАК СоответствияНомеровСуществующихДоговоров
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_ЗданияБП77.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_ЗданияБП77.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_ЗданияБП77.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |	ВТ_ЗданияБП77.ДоговорНомер КАК ДоговорНомер,
        |	ВТ_ЗданияБП77.ИдентификаторЛС КАК СоставнойКодЛицевогоСчета,
        |	ВТ_ЗданияБП77.НаименованиеДоговора КАК НаименованиеДоговора,
        |	ВТ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |	ВЫРАЗИТЬ(ВТ_СоответствияНомеровСуществующихДоговоров.Ссылка КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
        |	ВТ_СоответствияНомеровСуществующихДоговоров.Наименование КАК НаименованиеДоговораБП77,
        |	ВЫРАЗИТЬ(ВТ_СоответствияНомеровСуществующихДоговоров.Ссылка.Владелец КАК Справочник.Контрагенты) КАК Контрагент,
        |	АВТОНОМЕРЗАПИСИ() КАК АвтоНомер
        |ПОМЕСТИТЬ ВТ_РезультатПодготовка
        |ИЗ
        |	ВТ_ЛицевыеСчетаБезВзаиморасчетов КАК ВТ_ЛицевыеСчета
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗданияБП77 КАК ВТ_ЗданияБП77
        |		ПО (ВТ_ЗданияБП77.ИдентификаторЛС = ВТ_ЛицевыеСчета.Идентификатор)
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствияНомеровСуществующихДоговоров КАК ВТ_СоответствияНомеровСуществующихДоговоров
        |		ПО (ВТ_ЗданияБП77.ДоговорНомер = ВТ_СоответствияНомеровСуществующихДоговоров.НомерИзНаименования)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_РезультатПодготовка.КонтрагентКод КАК КонтрагентКод,
        |	ВТ_РезультатПодготовка.ОбъектАбонентаКод КАК ОбъектАбонентаКод,
        |	ВТ_РезультатПодготовка.ОбъектАбонентаНаименование КАК ОбъектАбонентаНаименование,
        |	ВТ_РезультатПодготовка.ДоговорНомер КАК ДоговорНомер,
        |	ВТ_РезультатПодготовка.СоставнойКодЛицевогоСчета КАК СоставнойКодЛицевогоСчета,
        |	ВТ_РезультатПодготовка.НаименованиеДоговора КАК НаименованиеДоговора,
        |	ВТ_РезультатПодготовка.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_РезультатПодготовка.Договор КАК Договор,
        |	ВТ_РезультатПодготовка.НаименованиеДоговораБП77 КАК НаименованиеДоговораБП77,
        |	ВТ_РезультатПодготовка.Контрагент КАК Контрагент
        |ИЗ
        |	ВТ_РезультатПодготовка КАК ВТ_РезультатПодготовка
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РезультатПодготовка КАК Т
        |		ПО ВТ_РезультатПодготовка.ЛицевойСчет = Т.ЛицевойСчет
        |			И ВТ_РезультатПодготовка.АвтоНомер <> Т.АвтоНомер
        |			И ВТ_РезультатПодготовка.Контрагент >= Т.Контрагент
        |ГДЕ
        |	Т.Контрагент ЕСТЬ NULL
        |";

    СоответствияНомеровСуществующихДоговоров = ГП_РаботаСДоговорами.ПолучитьТаблицуСоответствийНомеровНаименованийДоговоров();
    Запрос.УстановитьПараметр("СоответствияНомеровСуществующихДоговоров", СоответствияНомеровСуществующихДоговоров);

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции // Гарант+ Килипенко 18.11.2024 [F00231122] До-создание документов взаиморасчетов по л/с --

#КонецОбласти // ТолькоДляРазработки
// Гарант+ Килипенко 08.08.2024 [F00227208] перенос контрагентов из БП77 --

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 05.08.2024 [F00226996] перенос лицевых счетов из БП77 --
