// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++
#Область ПереопределениеСтандартногоФункционала

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДанныеЧеков")
Процедура ГП_ЗаполнитьДанныеЧеков(врТаблицаОплат, Отказ)

	ПараметрыФискальногоУстройства = Новый Структура("ИдентификаторУстройства, ШиринаСтроки, ВерсииФорматовФД");
	ПараметрыФискальногоУстройства.ИдентификаторУстройства = ИдентификаторУстройства;
	ПараметрыФискальногоУстройства.ШиринаСтроки            = ШиринаСтроки;
	ПараметрыФискальногоУстройства.ВерсииФорматовФД        = ВерсииФорматовФД;

	Если ТипДокументаОплаты = Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
		МассивЧеков = Документы.КВП_РегистрацияОплаты.СобратьДанныеЧеков(врТаблицаОплат, ПараметрыФискальногоУстройства);
	ИначеЕсли ТипДокументаОплаты = Тип("ДокументСсылка.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ") Тогда
		МассивЧеков = Документы.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.СобратьДанныеЧеков(врТаблицаОплат,
																						ПараметрыФискальногоУстройства);
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
            "В текущей реализации нет возможность использовать механизм формирования чеков по контрагенту.", Отказ);
		Возврат;
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не определен тип документа-источника печати чека.", Отказ);
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура("Документ, ЛицевойСчет");
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = Истина Тогда
        Отбор = Новый Структура("Документ, ГП_КонтрагентДокументаОплаты");
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

	Для Каждого ТекущиеДанныеЧека Из МассивЧеков Цикл

		Отбор.Документ    = ТекущиеДанныеЧека.ДокументОснование;
        #Удаление // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++
		Отбор.ЛицевойСчет = ТекущиеДанныеЧека.ЛицевойСчет;
        #КонецУдаления
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = Истина Тогда
            Отбор.ГП_КонтрагентДокументаОплаты = ТекущиеДанныеЧека.ГП_КонтрагентДокументаОплаты;
        Иначе
            Отбор.ЛицевойСчет = ТекущиеДанныеЧека.ЛицевойСчет;
        КонецЕсли;

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

		НайденныеСтроки = ТаблицаОплат.НайтиСтроки(Отбор);

		Если Не НайденныеСтроки.Количество() = 0 Тогда

			СтрокаДанных            = НайденныеСтроки[0];
			СтрокаДанных.ДанныеЧека = ТекущиеДанныеЧека;
			СтрокаДанных.ИдентификаторЗаписи = ТекущиеДанныеЧека.ИдентификаторФискальнойЗаписи;

			СтрокаДанных.Сумма = 0;
			Для Каждого Оплата Из ТекущиеДанныеЧека.ТаблицаОплат Цикл
				СтрокаДанных.Сумма = СтрокаДанных.Сумма + Оплата.Сумма;
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	ПересчитатьИтогиТаблицыОплат();

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьТаблицуОплат")
Процедура ГП_ЗаполнитьТаблицуОплат(врТаблицаОплат)
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    // Подготовка данных для использования механизма формирования чеков по контрагенту
    Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
        //врТаблицаОплат.ЗаполнитьЗначения(Справочники.КВП_ЛицевыеСчета.ПустаяСсылка(), "ЛицевойСчет");

        // !!!
        // !!! Требует рефакторинг. Колонку требуется добавить и заполнить ранее по стеку вызова !!!
        // !!!
        Если врТаблицаОплат.Колонки.Найти("ГП_КонтрагентДокументаОплаты") = Неопределено Тогда
            врТаблицаОплат.Колонки.Добавить("ГП_КонтрагентДокументаОплаты", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
        КонецЕсли;

        // Заполнение контрагентов
        КэшКонтрагентыДокументов = Новый Соответствие;
        Для Каждого ТекущаяСтрока Из врТаблицаОплат Цикл
            Если КэшКонтрагентыДокументов.Получить(ТекущаяСтрока.Документ) = Неопределено Тогда
                КэшКонтрагентыДокументов.Вставить(ТекущаяСтрока.Документ, );
            КонецЕсли;

            Если ТипЗнч(ТекущаяСтрока.Документ) = Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
                Если КэшКонтрагентыДокументов.Получить(ТекущаяСтрока.Документ) = Неопределено Тогда
                    ТекущийКонтрагентДокументаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Документ, "Контрагент");
                    КэшКонтрагентыДокументов.Вставить(ТекущаяСтрока.Документ, ТекущийКонтрагентДокументаОплаты);
                КонецЕсли;

                ТекущийКонтрагентДокументаОплаты = КэшКонтрагентыДокументов.Получить(ТекущаяСтрока.Документ);
                ТекущаяСтрока.ГП_КонтрагентДокументаОплаты = ТекущийКонтрагентДокументаОплаты;
            Иначе
                ВызватьИсключение("Формирование чеков по контрагенту доступно только для документов ""Регистрации оплаты"".");
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

	ТаблицаОплат.Очистить();

	// В пакете втФискальныеОперацииПоОплатам выполняется исключение дублей записей о фискальной операции.
	// Также исключаются чеки в статусе "На сервисе облачной кассы" - их обработка не должна
	// выполняться.
	Запрос = Новый Запрос;
	Если ТипДокументаОплаты = Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
		Запрос.Текст = ТекстЗапросаПолученияДанныхПоследнегоЧека() +
		"
		|ВЫБРАТЬ
		|	втДатаПоследнегоЧека.Документ КАК Документ,
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        |   ВЫРАЗИТЬ(втДатаПоследнегоЧека.ГП_КонтрагентДокументаОплаты КАК Справочник.Контрагенты) КАК ГП_КонтрагентДокументаОплаты,

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
		|	втДатаПоследнегоЧека.ЛицевойСчет КАК ЛицевойСчет,
		|	ФискальныеОперации.УПЖКХ_СтатусЧека КАК СтатусЧека,
		|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи
		|ПОМЕСТИТЬ втСтатусыЧеков
		|ИЗ
		|	втДатаПоследнегоЧека КАК втДатаПоследнегоЧека
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВозвраты КАК втВозвраты
		|		ПО втДатаПоследнегоЧека.Документ = втВозвраты.Документ
		|			И втДатаПоследнегоЧека.ЛицевойСчет = втВозвраты.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО (втВозвраты.Документ = ФискальныеОперации.ДокументОснование)
		|			И (втВозвраты.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет)
		|			И втДатаПоследнегоЧека.Дата = ФискальныеОперации.Дата
		|ГДЕ
		|	ФискальныеОперации.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втДатаПоследнегоЧека.Документ,
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        |   втДатаПоследнегоЧека.ГП_КонтрагентДокументаОплаты,

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
		|	втДатаПоследнегоЧека.ЛицевойСчет,
		|	ФискальныеОперации.УПЖКХ_СтатусЧека,
		|	ФискальныеОперации.ИдентификаторЗаписи
		|ИЗ
		|	втДатаПоследнегоЧека КАК втДатаПоследнегоЧека
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПриходы КАК втПриходы
		|		ПО втДатаПоследнегоЧека.Документ = втПриходы.Документ
		|			И втДатаПоследнегоЧека.ЛицевойСчет = втПриходы.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО (втПриходы.Документ = ФискальныеОперации.ДокументОснование)
		|			И (втПриходы.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет)
		|			И втДатаПоследнегоЧека.Дата = ФискальныеОперации.Дата
		|ГДЕ
		|	ФискальныеОперации.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
		|;";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	врТаблицаОплат.Документ КАК Документ,
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        |   врТаблицаОплат.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
		|	врТаблицаОплат.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ втОплатыПоЛицевымСчетам
		|ИЗ
		|	&врТаблицаОплат КАК врТаблицаОплат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОплатыПоЛицевымСчетам.Документ КАК Документ,
		|	втОплатыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        |   втОплатыПоЛицевымСчетам.ГП_КонтрагентДокументаОплаты,

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
		|	МАКСИМУМ(ФискальныеОперации.Дата) КАК Дата
		|ПОМЕСТИТЬ втДатаПоследнегоЧека
		|ИЗ
		|	втОплатыПоЛицевымСчетам КАК втОплатыПоЛицевымСчетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО втОплатыПоЛицевымСчетам.Документ = ФискальныеОперации.ДокументОснование
		|			И втОплатыПоЛицевымСчетам.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
		|
		|СГРУППИРОВАТЬ ПО
		|	втОплатыПоЛицевымСчетам.Документ,
		|	втОплатыПоЛицевымСчетам.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДатаПоследнегоЧека.Документ КАК Документ,
		|	втДатаПоследнегоЧека.ЛицевойСчет КАК ЛицевойСчет,
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        |   втДатаПоследнегоЧека.ГП_КонтрагентДокументаОплаты,

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
		|	ФискальныеОперации.УПЖКХ_СтатусЧека КАК СтатусЧека,
		|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи
		|ПОМЕСТИТЬ втСтатусыЧеков
		|ИЗ
		|	втДатаПоследнегоЧека КАК втДатаПоследнегоЧека
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО втДатаПоследнегоЧека.Документ = ФискальныеОперации.ДокументОснование
		|			И втДатаПоследнегоЧека.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
		|			И втДатаПоследнегоЧека.Дата = ФискальныеОперации.Дата
		|;";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДатаПоследнегоЧека.Документ КАК Документ,
	|	втДатаПоследнегоЧека.ЛицевойСчет КАК ЛицевойСчет,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втДатаПоследнегоЧека.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	ЕСТЬNULL(ФискальныеОперации.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ФискальныеОперации.ИдентификаторЗаписи, """") КАК ИдентификаторЗаписи,
	|	ЕСТЬNULL(ФискальныеОперации.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПробития,
	|	ЕСТЬNULL(ФискальныеОперации.ЗаводскойНомерФН, """") КАК ЗаводскойНомерФН,
	|	ЕСТЬNULL(ФискальныеОперации.РегистрационныйНомерККТ, """") КАК РегистрационныйНомерККТ,
	|	ЕСТЬNULL(ФискальныеОперации.НомерЧекаККМ, 0) КАК НомерЧекаККМ,
	|	ЕСТЬNULL(ФискальныеОперации.ФискальныйПризнак, """") КАК ФискальныйПризнак,
	|	ЕСТЬNULL(ФискальныеОперации.АдресСайтаПроверки, """") КАК АдресСайтаПроверки,
	|	ЕСТЬNULL(ФискальныеОперации.ДанныеXML, НЕОПРЕДЕЛЕНО) КАК ДанныеXML,
	|	ЕСТЬNULL(ФискальныеОперации.УПЖКХ_ДатаОтправки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтправки,
	|	ЕСТЬNULL(ФискальныеОперации.УПЖКХ_АдресЭПНомерТелефона, """") КАК КонтактнаяИнформацияПредыдущейОтправки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСтатусыЧеков.СтатусЧека, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.НеПробит)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитОтправлен)
	|			ТОГДА 3
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(втСтатусыЧеков.СтатусЧека, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.НеПробит)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|					ТОГДА 2
	|				КОГДА ЕСТЬNULL(втСтатусыЧеков.СтатусЧека, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.НеПробит)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ОблачнаяКассаВОчереди)
	|					ТОГДА 4
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ втФискальныеОперацииПоОплатамПредварительная
	|ИЗ
	|	втДатаПоследнегоЧека КАК втДатаПоследнегоЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыЧеков КАК втСтатусыЧеков
	|		ПО втДатаПоследнегоЧека.Документ = втСтатусыЧеков.Документ
	|			И втДатаПоследнегоЧека.ЛицевойСчет = втСтатусыЧеков.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО втДатаПоследнегоЧека.Документ = ФискальныеОперации.ДокументОснование
	|			И втДатаПоследнегоЧека.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
	|			И втДатаПоследнегоЧека.Дата = ФискальныеОперации.Дата
	|			И (втСтатусыЧеков.ИдентификаторЗаписи = ФискальныеОперации.ИдентификаторЗаписи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФискальныеОперацииПоОплатамПредварительная.ЛицевойСчет КАК ЛицевойСчет,
	|	втФискальныеОперацииПоОплатамПредварительная.Документ КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втФискальныеОперацииПоОплатамПредварительная.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	МАКСИМУМ(втФискальныеОперацииПоОплатамПредварительная.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втМаксимальныйПриоритетЧекаВРегистре
	|ИЗ
	|	втФискальныеОперацииПоОплатамПредварительная КАК втФискальныеОперацииПоОплатамПредварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	втФискальныеОперацииПоОплатамПредварительная.Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втФискальныеОперацииПоОплатамПредварительная.ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втФискальныеОперацииПоОплатамПредварительная.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФискальныеОперацииПоОплатамПредварительная.Документ КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втФискальныеОперацииПоОплатамПредварительная.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втФискальныеОперацииПоОплатамПредварительная.ЛицевойСчет КАК ЛицевойСчет,
	|	втФискальныеОперацииПоОплатамПредварительная.Сумма КАК Сумма,
	|	втФискальныеОперацииПоОплатамПредварительная.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	втФискальныеОперацииПоОплатамПредварительная.ДатаПробития КАК ДатаПробития,
	|	втФискальныеОперацииПоОплатамПредварительная.ЗаводскойНомерФН КАК ЗаводскойНомерФН,
	|	втФискальныеОперацииПоОплатамПредварительная.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	втФискальныеОперацииПоОплатамПредварительная.НомерЧекаККМ КАК НомерЧекаККМ,
	|	втФискальныеОперацииПоОплатамПредварительная.ФискальныйПризнак КАК ФискальныйПризнак,
	|	втФискальныеОперацииПоОплатамПредварительная.АдресСайтаПроверки КАК АдресСайтаПроверки,
	|	втФискальныеОперацииПоОплатамПредварительная.ДанныеXML КАК ДанныеXML,
	|	втФискальныеОперацииПоОплатамПредварительная.ДатаОтправки КАК ДатаОтправки,
	|	втФискальныеОперацииПоОплатамПредварительная.КонтактнаяИнформацияПредыдущейОтправки КАК КонтактнаяИнформацияПредыдущейОтправки,
	|	втМаксимальныйПриоритетЧекаВРегистре.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ втФискальныеОперацииПоОплатам
	|ИЗ
	|	втФискальныеОперацииПоОплатамПредварительная КАК втФискальныеОперацииПоОплатамПредварительная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныйПриоритетЧекаВРегистре КАК втМаксимальныйПриоритетЧекаВРегистре
	|		ПО втФискальныеОперацииПоОплатамПредварительная.Приоритет = втМаксимальныйПриоритетЧекаВРегистре.Приоритет
	|			И втФискальныеОперацииПоОплатамПредварительная.Документ = втМаксимальныйПриоритетЧекаВРегистре.Документ
	|			И втФискальныеОперацииПоОплатамПредварительная.ЛицевойСчет = втМаксимальныйПриоритетЧекаВРегистре.ЛицевойСчет
	|ГДЕ
	|	втМаксимальныйПриоритетЧекаВРегистре.Приоритет <> 4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(втФискальныеОперацииПоОплатам.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втМинимальныйПриоритетСтатусовЧека
	|ИЗ
	|	втФискальныеОперацииПоОплатам КАК втФискальныеОперацииПоОплатам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втМинимальныйПриоритетСтатусовЧека.Приоритет = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитОтправлен)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втМинимальныйПриоритетСтатусовЧека.Приоритет = 2
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.ПробитНеОтправлен)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыЧека.НеПробит)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусЧеков
	|ИЗ
	|	втМинимальныйПриоритетСтатусовЧека КАК втМинимальныйПриоритетСтатусовЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФискальныеОперацииПоОплатам.Документ КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втФискальныеОперацииПоОплатам.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втФискальныеОперацииПоОплатам.ЛицевойСчет КАК ЛицевойСчет,
	|	втФискальныеОперацииПоОплатам.Сумма КАК Сумма,
	|	втФискальныеОперацииПоОплатам.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	втФискальныеОперацииПоОплатам.ДатаПробития КАК ДатаПробития,
	|	втФискальныеОперацииПоОплатам.ЗаводскойНомерФН КАК ЗаводскойНомерФН,
	|	втФискальныеОперацииПоОплатам.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	втФискальныеОперацииПоОплатам.НомерЧекаККМ КАК НомерЧекаККМ,
	|	втФискальныеОперацииПоОплатам.ФискальныйПризнак КАК ФискальныйПризнак,
	|	втФискальныеОперацииПоОплатам.АдресСайтаПроверки КАК АдресСайтаПроверки,
	|	втФискальныеОперацииПоОплатам.ДанныеXML КАК ДанныеXML,
	|	втФискальныеОперацииПоОплатам.ДатаОтправки КАК ДатаОтправки,
	|	втФискальныеОперацииПоОплатам.КонтактнаяИнформацияПредыдущейОтправки КАК КонтактнаяИнформацияПредыдущейОтправки
	|ИЗ
	|	втФискальныеОперацииПоОплатам КАК втФискальныеОперацииПоОплатам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныйПриоритетСтатусовЧека КАК втМинимальныйПриоритетСтатусовЧека
	|		ПО втФискальныеОперацииПоОплатам.Приоритет = втМинимальныйПриоритетСтатусовЧека.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ";

	Возвраты = Новый СписокЗначений;
	Возвраты.Добавить(Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы);
	Возвраты.Добавить(Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета);

	Запрос.УстановитьПараметр("врТаблицаОплат", врТаблицаОплат);
	Запрос.УстановитьПараметр("Возвраты", Возвраты);
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
        // Запрос.Текст = СтрЗаменитьПоРегулярномуВыражению(Запрос.Текст, "^(?i)(\s*(?:И\s+)?)(\(?[а-яА-Я]+\s*\.\s*ЛицевойСчет\s*=\s*[а-яА-Я]+\s*\.\s*УПЖКХ_ЛицевойСчет\s*\)?\s*)$", "$1ИСТИНА", Истина, Истина);
        Запрос.Текст = СтрЗаменитьПоРегулярномуВыражению(Запрос.Текст, "(?i)[а-яА-Я]+\s*\.\s*ЛицевойСчет\s*=\s*([а-яА-Я]+\s*\.\s*УПЖКХ_ЛицевойСчет)",
            "$1 = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)", Истина, Ложь);
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

	ПакетыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = ПакетыЗапроса[ПакетыЗапроса.Количество() - 2].Выбрать();

	Если Выборка.Следующий() Тогда
		СтатусЧеков = Выборка.СтатусЧеков;
	КонецЕсли;

	Выборка = ПакетыЗапроса[ПакетыЗапроса.Количество() - 1].Выбрать();

	НомерСтрокиТаблицыОплат = 1;

	Пока Выборка.Следующий() Цикл

		// Возможны ситуации, когда в выборке содержатся дубли.
		// Н-р, когда при печати чека произошло несколько ошибок,
		// будет несколько записей с статусом чека НеПробит.
		// В таких случаях нужно добавлять в таблицу 1 запись.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Документ",    Выборка.Документ);
		ПараметрыОтбора.Вставить("ЛицевойСчет", Выборка.ЛицевойСчет);
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
            ПараметрыОтбора.Вставить("ГП_КонтрагентДокументаОплаты", Выборка.ГП_КонтрагентДокументаОплаты);
            ПараметрыОтбора.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
        КонецЕсли;

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

		Если ТаблицаОплат.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтрокиТаблицыОплат;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
            НоваяСтрока.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
        КонецЕсли;

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

		// Все чеки были пробиты ранее, для всех строк оплат можно сформировать
		// текст чека и текст сообщения по данными РС "Фискальные операции".
		Если Не СтатусЧеков = Перечисления.УПЖКХ_СтатусыЧека.НеПробит Тогда

			ТекстСообщенияXML = Выборка.ДанныеXML.Получить();
			Если ЗначениеЗаполнено(ТекстСообщенияXML) Тогда
				НоваяСтрока.ДанныеЧека = УПЖКХ_ТиповыеМетодыСервер.ЗагрузитьДанныеФискализацииИзXML(ТекстСообщенияXML);
			КонецЕсли;

		КонецЕсли;

		НомерСтрокиТаблицыОплат = НомерСтрокиТаблицыОплат + 1;

	КонецЦикла;

	ПересчитатьИтогиТаблицыОплат();

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ТекстЗапросаПолученияДанныхПоследнегоЧека")
Функция ГП_ТекстЗапросаПолученияДанныхПоследнегоЧека()

	Результат =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(врТаблицаОплат.Документ КАК Документ.КВП_РегистрацияОплаты) КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   ВЫРАЗИТЬ(врТаблицаОплат.ГП_КонтрагентДокументаОплаты КАК Справочник.Контрагенты) КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	врТаблицаОплат.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втОплатыПоЛицевымСчетам
	|ИЗ
	|	&врТаблицаОплат КАК врТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОплатыПоЛицевымСчетам.Документ КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втОплатыПоЛицевымСчетам.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втОплатыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
	|	втОплатыПоЛицевымСчетам.Документ.ВидОперации КАК ДокументВидОперации
	|ПОМЕСТИТЬ втВидыОпераций
	|ИЗ
	|	втОплатыПоЛицевымСчетам КАК втОплатыПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыОпераций.Документ КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втВидыОпераций.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втВидыОпераций.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втВозвраты
	|ИЗ
	|	втВидыОпераций КАК втВидыОпераций
	|ГДЕ
	|	втВидыОпераций.ДокументВидОперации В(&Возвраты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыОпераций.Документ КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втВидыОпераций.ГП_КонтрагентДокументаОплаты КАК ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втВидыОпераций.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втПриходы
	|ИЗ
	|	втВидыОпераций КАК втВидыОпераций
	|ГДЕ
	|	НЕ втВидыОпераций.ДокументВидОперации В (&Возвраты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОплатыПоЛицевымСчетам.Документ КАК Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втОплатыПоЛицевымСчетам.ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втОплатыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ФискальныеОперации.Дата) КАК Дата
	|ПОМЕСТИТЬ втДатаПоследнегоЧека
	|ИЗ
	|	втВозвраты КАК втОплатыПоЛицевымСчетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО втОплатыПоЛицевымСчетам.Документ = ФискальныеОперации.ДокументОснование
	|			И втОплатыПоЛицевымСчетам.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
	|			И (ФискальныеОперации.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств))
	|
	|СГРУППИРОВАТЬ ПО
	|	втОплатыПоЛицевымСчетам.Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втОплатыПоЛицевымСчетам.ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втОплатыПоЛицевымСчетам.ЛицевойСчет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втОплатыПоЛицевымСчетам.Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втОплатыПоЛицевымСчетам.ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втОплатыПоЛицевымСчетам.ЛицевойСчет,
	|	МАКСИМУМ(ФискальныеОперации.Дата)
	|ИЗ
	|	втПриходы КАК втОплатыПоЛицевымСчетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО втОплатыПоЛицевымСчетам.Документ = ФискальныеОперации.ДокументОснование
	|			И втОплатыПоЛицевымСчетам.ЛицевойСчет = ФискальныеОперации.УПЖКХ_ЛицевойСчет
	|			И (ФискальныеОперации.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств))
	|
	|СГРУППИРОВАТЬ ПО
	|	втОплатыПоЛицевымСчетам.Документ,
    #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

    |   втОплатыПоЛицевымСчетам.ГП_КонтрагентДокументаОплаты,

    #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
	|	втОплатыПоЛицевымСчетам.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";

	Возврат Результат;

КонецФункции

&НаКлиенте
&ИзменениеИКонтроль("ВыполнитьПробитиеИОтправкуЧеков")
Процедура ГП_ВыполнитьПробитиеИОтправкуЧеков()

	// Из-за изменений, связанных переходом библиотеки подключаемого оборудования на асинхронность,
	// требуется гарантировать то, что программа завершит все команды к физической кассе до того,
	// как начнется печать следующего чека. Из-за этого принудительно прерываем цикл при
	// обращении к физическому устройству с сохранением контекста на следующую итерацию
	Пока НомерСтроки < КоличествоЧековКПробитию Цикл

		ТекущаяОплата = ТаблицаОплат[НомерСтроки];
		НомерСтроки = НомерСтроки + 1;

		ПробиватьЧек                    = Ложь;
		ОтсутствуетКонтактнаяИнформация = Истина;

		Если ОтправлятьЭлектронныйЧек Тогда
			ОтсутствуетКонтактнаяИнформация = Ложь;
			Если ТипРассылкиЭлектронныхЧеков = ПредопределенноеЗначение("Перечисление.ТипыРассылкиЭлектронныхЧеков.ЭлектронноеПисьмо")
				 И Не ТекущаяОплата.АдресЭлектроннойПочты = "" Тогда
				ТекущаяОплата.ДанныеЧека.ПокупательEmail   = ТекущаяОплата.АдресЭлектроннойПочты;
				ТекущаяОплата.ДанныеЧека.Отправляет1СEmail = Отправляет1СEmail;
			ИначеЕсли ТипРассылкиЭлектронныхЧеков = ПредопределенноеЗначение("Перечисление.ТипыРассылкиЭлектронныхЧеков.СообщениеSMS")
				 И Не ТекущаяОплата.НомерТелефона = "" Тогда
				ТекущаяОплата.ДанныеЧека.ПокупательНомер = ТекущаяОплата.НомерТелефона;
				ТекущаяОплата.ДанныеЧека.Отправляет1СSMS = Отправляет1СSMS;
			Иначе
				ОтсутствуетКонтактнаяИнформация = Истина;
			КонецЕсли;

			ТекущаяОплата.ДанныеЧека.Электронно = Не ПечататьБумажныйЧек;

		КонецЕсли;

		// Разрешим пробитие чеков без печати и отправки в случае, если установлена настройка "Разрешить пробивать чеки
		// без печати бумажного и отправки электронного чека" на вкладке "Регистрация оплаты" в параметрах учета.
		Если Не ПечататьБумажныйЧек И ОтсутствуетКонтактнаяИнформация Тогда
			Если ПробиватьЧекиБезПечатиИОтправки Тогда
				ТекущаяОплата.ДанныеЧека.Электронно = Истина;
				ТекущаяОплата.ДанныеЧека.Отправляет1СSMS = Ложь;
				ТекущаяОплата.ДанныеЧека.Отправляет1СEmail = Ложь;

				ПробиватьЧек = Истина;
			Иначе
				ВывестиПрогресс(НомерСтроки - 1, КоличествоЧековКПробитию);
				Продолжить;
			КонецЕсли;
		Иначе
			ПробиватьЧек = Истина;
		КонецЕсли;

		Оповещение = Новый ОписаниеОповещения("ВыполнитьПробитиеИОтправкуЧековЗавершение", ЭтотОбъект, ОтсутствуетКонтактнаяИнформация);
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        // Контроль заполненности полей для механизма печати чека по контрагенту
        Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
            Если ЗначениеЗаполнено(ТекущаяОплата.ЛицевойСчет) Тогда
                ВызватьИсключение("При формировании чека по контрагенту поле ЛицевойСчет должно быть не заполнено для всех чеков");
            КонецЕсли;
            Если НЕ ЗначениеЗаполнено(ТекущаяОплата.ГП_КонтрагентДокументаОплаты) Тогда
                ВызватьИсключение("При формировании чека по контрагенту поле Контрагент должно быть заполнено для всех чеков");
            КонецЕсли;
        КонецЕсли;

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

		Если ПробиватьЧек И ЧекКоррекции Тогда

			Если Не ЗначениеЗаполнено(ДатаКоррекции) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле ""Дата коррекции"" не заполнено.");
				Возврат;
			КонецЕсли;

			ДанныеКоррекции = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеКоррекции();

			ДанныеКоррекции.ТипКоррекции      = ?(КоррекцияПоПредписанию, 1, 0);
			ДанныеКоррекции.НомерПредписания  = ?(КоррекцияПоПредписанию, НомерПредписания, "0");
			ДанныеКоррекции.ОписаниеКоррекции = ОписаниеКоррекции;
			ДанныеКоррекции.ДатаКоррекции     = ДатаКоррекции;

			ПараметрыЧекаКоррекции = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииЧекаКоррекции();

			ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции, ТекущаяОплата.ДанныеЧека);
			ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции.ДанныеКоррекции, ДанныеКоррекции);

			ПараметрыЧекаКоррекции.КорректируемыйДокумент   = ТекущаяОплата.КорректируемыйДокумент;
			ПараметрыЧекаКоррекции.НеприменениеККТ          = НЕ ЗначениеЗаполнено(ТекущаяОплата.КорректируемыйЧек);
			ПараметрыЧекаКоррекции.Вставить("ЛицевойСчет", ТекущаяОплата.ЛицевойСчет);
            #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

            Если ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
                ПараметрыЧекаКоррекции.Вставить("ГП_КонтрагентДокументаОплаты", ТекущаяОплата.ГП_КонтрагентДокументаОплаты);
            КонецЕсли;

            #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

			Если ЗначениеЗаполнено(ТекущаяОплата.КорректируемыйДокумент) Тогда
				ИдентификаторЗаписиКорректируемогоДокумента = ИдентификаторЗаписиКорректируемогоДокумента(ТекущаяОплата.КорректируемыйДокумент,
																										  ТекущаяОплата.ЛицевойСчет);
				ПараметрыЧекаКоррекции.Вставить("ИдентификаторЗаписиКорректируемогоДокумента", ИдентификаторЗаписиКорректируемогоДокумента);
			КонецЕсли;

			// !!!ВАЖНО!!!
			// !!!ПРИ ПОМЕЩЕНИИ ДОРАБОТОК В ХРАНИЛИЩЕ!!!
			// 1. В будущем описание коррекции, дата коррекции и номер предписания нужно перенести в таблицу значений "ТаблицаОплат".
			// Т.К. для каждого чека коррекции эти значения могут быть разными, то есть фактически это еще 3 разреза.
			ПараметрыЧекаКоррекции.ИдентификаторФискальнойЗаписи = Неопределено;

			Если Не ЭтоПробитиеНаОблачнойКассе Тогда
				ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(Оповещение,
					УникальныйИдентификатор,
					ИдентификаторУстройства,
					ПараметрыЧекаКоррекции);
				// Прерываем цикл при обращении к физической кассе
				Прервать;
			КонецЕсли;

		ИначеЕсли ПробиватьЧек Тогда

			Если ЭтоПробитиеНаОблачнойКассе Тогда
				УПЖКХ_ИнтеграцияСОблачнойКассойКлиент.ОтправитьДанныеДляПробитияЧекаНаСервисОблачнойКассы(Оповещение,
					ТекущаяОплата.ДанныеЧека,
					ИдентификаторУстройства,
					ПараметрыОблачнойКассы);
			Иначе
				УПЖКХ_ТиповыеМетодыКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение,
					УникальныйИдентификатор,
					ИдентификаторУстройства,
					ТекущаяОплата.ДанныеЧека);
				// Прерываем цикл при обращении к физической кассе
				Прервать;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// После пробития чеков на облачной кассе проверку
	// статусов чеков на сервисе облачной кассы, отправку чеков плательщику.
	Если ЭтоПробитиеНаОблачнойКассе Тогда
		ВыполнятьПроверкуЧековНаСервисеОблачнойКассы = Истина;
		ПодключитьОбработчикОжидания("ОбработчикОжидания_ПроверитьСостояниеЧековНаСервисеОблачнойКассы", 10, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ВыполнитьПробитиеИОтправкуЧековЗавершение")
Процедура ГП_ВыполнитьПробитиеИОтправкуЧековЗавершение(РезультатВыполнения, ОтсутствуетКонтактнаяИнформация) Экспорт

	СтрокаОплаты = ТаблицаОплат[НомерСтроки - 1];

	Если Не РезультатВыполнения.Результат Тогда

		ТекстСообщения = НСтр("ru = 'При печати чека по лицевому счету ''%ЛицевойСчет%'' произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
        #Удаление // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
		"%ЛицевойСчет%",
		СтрокаОплаты.ЛицевойСчет);
        #КонецУдаления
        #Вставка // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++

        ТекстСообщения = СтрЗаменить(ТекстСообщения, "При печати чека по лицевому счету", "При печати чека по контрагенту");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛицевойСчет%", СтрокаОплаты.ГП_КонтрагентДокументаОплаты);

        #КонецВставки // Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);

	Иначе

		ЧековПробито = ЧековПробито + 1;

		// Отправка пробитых на облачной кассе чеков выполняется после запроса
		// статуса чеков с сервиса рассылки.
		Если ОтправлятьЭлектронныйЧек И Не ОтсутствуетКонтактнаяИнформация И Не ЭтоПробитиеНаОблачнойКассе Тогда

			Если ТипРассылкиЭлектронныхЧеков = ПредопределенноеЗначение("Перечисление.ТипыРассылкиЭлектронныхЧеков.ЭлектронноеПисьмо") И Отправляет1СEmail
				 Или ТипРассылкиЭлектронныхЧеков = ПредопределенноеЗначение("Перечисление.ТипыРассылкиЭлектронныхЧеков.СообщениеSMS") И Отправляет1СSMS Тогда

				Если РезультатВыполнения.Свойство("ПараметрыФискализации")
				   И ЗначениеЗаполнено(РезультатВыполнения.ПараметрыФискализации) Тогда

					ПараметрыФискализации = РезультатВыполнения.ПараметрыФискализации;

					ДанныеОплаты = ДанныеОплатыКОтправке(СтрокаОплаты, ПараметрыФискализации);

					ЧековОтправленоПред = ЧековОтправлено;

					УПЖКХ_МеханизмыПечатиЧеков.ОтправитьЭлектронныйЧек(ДанныеОплаты, ТипРассылкиЭлектронныхЧеков, ЧековОтправлено);

					// Отправка корректируемого чека.
					ОтправитьКорректируемыйЧек(ПараметрыФискализации, СтрокаОплаты, ЧековОтправленоПред);

				КонецЕсли;

			Иначе
				ЧековОтправлено = ЧековОтправлено + 1;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВывестиПрогресс(НомерСтроки - 1, КоличествоЧековКПробитию);

	// Для обеспечения непрерывности отправки команд ККТ в рамках одного чека на физической кассе
	// возобновляем отправку чеков на печать после получения подтверждения о завершении команды.
	// Цикл отправки не прерывается при пробитии чека на облачной кассе Раруса
	Если НомерСтроки < КоличествоЧековКПробитию
		И Не ЭтоПробитиеНаОблачнойКассе Тогда
		ВыполнитьПробитиеИОтправкуЧеков();
	Иначе
		ПоказатьРезультатыПечати();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ПереопределениеСтандартногоФункционала
// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ГП_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
    // Создание дополнительных элементов формы
    ГП_СоздатьДополнительныеЭлементыНаСервере();

    ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента =
        ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокументаНаСервере();

    ГП_УстановитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);

    // Контроль заполненности документов
    РезультатКонтроля = ГП_ВыполнитьПроверкуЗаполненностиДанныхДокументовНаСервере(
        ЭтотОбъект.Параметры, ЭтотОбъект.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента);
    Если РезультатКонтроля.Успех = Ложь Тогда
        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(РезультатКонтроля.ТекстСообщения, Отказ);
		Возврат;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы
// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --

// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа ++
#Область СлужебныеПроцедурыИФункции

#Область НастройкиФормы

&НаСервере
Процедура ГП_СоздатьДополнительныеЭлементыНаСервере()
    ГП_СоздатьРеквизитИспользуетсяФормированиеЧековПоКонтрагентуДокументаНаСервере();
    ГП_СоздатьЭлементТаблицаОплатКонтрагентНаСервере();
КонецПроцедуры

&НаСервере
Функция ГП_СоздатьЭлементТаблицаОплатКонтрагентНаСервере()
    РезультатФункции = Новый Структура("Элемент, Реквизит");

    ИмяЭлементаТаблицыОплат = "ТаблицаОплат";

    // Создание элемента Контрагент
    БазовоеНаименованиеСоздаваемогоРеквизита = "КонтрагентДокументаОплаты";
    НаименованиеСоздаваемогоРеквизита = СтрШаблон("ГП_%1", БазовоеНаименованиеСоздаваемогоРеквизита);

    // Проверка наличия поля формы
    Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект.Элементы, НаименованиеСоздаваемогоРеквизита) Тогда
        РезультатФункции.Элемент = ЭтотОбъект.Элементы[НаименованиеСоздаваемогоРеквизита];

        Возврат РезультатФункции; // Элемент уже существует
    КонецЕсли;

    ТипРеквизита = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
    СозданныйРеквизит = Новый РеквизитФормы(
            НаименованиеСоздаваемогоРеквизита, ТипРеквизита,
            ИмяЭлементаТаблицыОплат, "Контрагент");
    ЭтотОбъект.ИзменитьРеквизиты(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СозданныйРеквизит));
    РезультатФункции.Реквизит = СозданныйРеквизит;

    ИмяСоздаваемогоЭлемента = СтрШаблон("ГП_%1%2", ИмяЭлементаТаблицыОплат, БазовоеНаименованиеСоздаваемогоРеквизита);
    ПараметрыЭлемента = Новый Структура("ПутьКДанным, ОтображатьВПодвале");
    ПараметрыЭлемента.ПутьКДанным = СтрШаблон("%1.%2", ИмяЭлементаТаблицыОплат, СозданныйРеквизит.Имя);
    ПараметрыЭлемента.ОтображатьВПодвале = Ложь;

    РезультатФункции.Элемент = ГП_РаботаСФормамиКлиентСервер.СоздатьПолеФормы(ИмяСоздаваемогоЭлемента, ПараметрыЭлемента, ЭтотОбъект,
        ИмяЭлементаТаблицыОплат, СтрШаблон("%1ЛицевойСчет", ИмяЭлементаТаблицыОплат));
    РезультатФункции.Элемент.КнопкаВыбора = Ложь;

    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ГП_СоздатьРеквизитИспользуетсяФормированиеЧековПоКонтрагентуДокументаНаСервере()
    РезультатФункции = Новый Структура("Реквизит");

    НаименованиеСоздаваемогоРеквизита = "ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента";

    // Проверка наличия реквизита формы
    Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, НаименованиеСоздаваемогоРеквизита) Тогда
        РезультатФункции.Реквизит = ЭтотОбъект[НаименованиеСоздаваемогоРеквизита];

        Возврат РезультатФункции; // Реквизит уже существует
    КонецЕсли;

    ТипРеквизита = Новый ОписаниеТипов("Булево");
    СозданныйРеквизит = Новый РеквизитФормы(
            НаименованиеСоздаваемогоРеквизита, ТипРеквизита, , "Используется формирование чеков по контрагенту");
    ЭтотОбъект.ИзменитьРеквизиты(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СозданныйРеквизит));
    РезультатФункции.Реквизит = СозданныйРеквизит;

    Возврат РезультатФункции;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ГП_УстановитьВидимостьДоступностьЭлементовФормы(Форма)
    Если Форма.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента Тогда
        Форма.Элементы.ТаблицаОплатЛицевойСчет.Видимость = Ложь;
        Форма.Элементы.ГП_ТаблицаОплатКонтрагентДокументаОплаты.Видимость = Истина;
    Иначе
        Форма.Элементы.ТаблицаОплатЛицевойСчет.Видимость = Истина;
        Форма.Элементы.ГП_ТаблицаОплатКонтрагентДокументаОплаты.Видимость = Ложь;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // НастройкиФормы

&НаСервере
Функция ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокументаНаСервере()
    Возврат Истина // ЭтотОбъект.ТипДокументаОплаты = Тип("ДокументСсылка.КВП_РегистрацияОплаты")
        И УПЖКХ_МеханизмыПечатиЧеков.ГП_ИспользуетсяФормированиеЧековПоКонтрагентуДокумента(Неопределено);
КонецФункции

&НаСервереБезКонтекста
Функция ГП_ПолучитьТипДокументаИзПараметровНаСервере(Знач Параметры)
    РезультатФункции = Неопределено;

    Если НЕ Параметры.Свойство("ДокументЛицевыеСчета") Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    Для Каждого ДокументОплаты Из Параметры.ДокументЛицевыеСчета Цикл
		Если ЗначениеЗаполнено(ДокументОплаты.Ключ) Тогда
			РезультатФункции = ТипЗнч(ДокументОплаты.Ключ);
			Прервать;
		КонецЕсли;
	КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
&НаСервереБезКонтекста
Функция ГП_ВыполнитьПроверкуЗаполненностиДанныхДокументовНаСервере(
        Знач Параметры, Знач ИспользуетсяФормированиеЧековПоКонтрагентуДокумента)

    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);

    Для Каждого ДокументОплаты Из Параметры.ДокументЛицевыеСчета Цикл
		Если ИспользуетсяФормированиеЧековПоКонтрагентуДокумента = Истина Тогда
            Если ТипЗнч(ДокументОплаты.Ключ) <> Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
                РезультатФункции.Успех = Ложь;
                РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Документ ""%1"" не поддерживается для формирования чеков по контрагентам", ТипЗнч(ДокументОплаты.Ключ));

                Возврат РезультатФункции;
            КонецЕсли;

            КонтрагентТекущегоДокументаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты.Ключ, "Контрагент");
            Если ТипЗнч(КонтрагентТекущегоДокументаОплаты) <> Тип("СправочникСсылка.Контрагенты")
                    ИЛИ КонтрагентТекущегоДокументаОплаты.Пустая() Тогда

                РезультатФункции.Успех = Ложь;
                РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Для документа ""%1"" не заполнено поле Контрагент", Строка(ДокументОплаты.Ключ));

                Возврат РезультатФункции;
            КонецЕсли;
		КонецЕсли;
	КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.02.2025 [F00235125] Печать чеков по контрагенту документа --
