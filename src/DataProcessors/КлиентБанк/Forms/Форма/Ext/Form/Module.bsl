
&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДокументыКИмпортуПоРаспознаннымДаннымИзБанка")
Процедура ГП_ЗаполнитьДокументыКИмпортуПоРаспознаннымДаннымИзБанка(ДокументыКИмпорту, РаспознанныеДанныеИзБанка, ВыводитьСообщения)

    ДокументыКИмпорту.Очистить();

    Если ВыводитьСообщения Тогда
        // Сообщим пользователю об ошибках в выписке
        Для Каждого ОшибкаГруппировкиВыписки Из РаспознанныеДанныеИзБанка.ПротоколГруппировкиВыписки Цикл
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаГруппировкиВыписки.ПолноеОписание);
        КонецЦикла;
    КонецЕсли;

    НомерСтроки = 1;
    Для Каждого КлючИЗначение Из РаспознанныеДанныеИзБанка.Выписки Цикл

        ИдентификаторВыписки = КлючИЗначение.Ключ;
        Выписка              = КлючИЗначение.Значение;
        РаспознаннаяВыписка  = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
        Если РаспознаннаяВыписка = Неопределено Тогда
            Продолжить;
        КонецЕсли;

        ПредупреждениеНеНайденБанковскийСчет = РаспознаннаяВыписка.Предупреждения.Найти("БанковскийСчетНеНайден", "КодПроблемы");
        Если ПредупреждениеНеНайденБанковскийСчет <> Неопределено Тогда
            Если ВыводитьСообщения Тогда
                ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредупреждениеНеНайденБанковскийСчет.Текст);
            КонецЕсли;
            Продолжить;
        КонецЕсли;

        // Ограничим загружаемую выписку
        БанковскийСчет = РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет;
        Если ЗначениеЗаполнено(Объект.БанковскийСчет) И БанковскийСчет <> Объект.БанковскийСчет Тогда
            Продолжить;
        КонецЕсли;

        ВалютаСчета = РаспознаннаяВыписка.ВладелецСчета.ВалютаСчета;

        ДанныеДокументов = ДанныеДокументов(Выписка, РаспознаннаяВыписка);

        Для Каждого Операция Из Выписка.Операции Цикл

            СтрокаТаблицы                           = ДокументыКИмпорту.Добавить();
            СтрокаТаблицы.ИдентификаторВыписки      = ИдентификаторВыписки;
            СтрокаТаблицы.Загружать                 = Истина;
            СтрокаТаблицы.НомерСтроки               = НомерСтроки;
            СтрокаТаблицы.БанковскийСчетОрганизации = БанковскийСчет;
            СтрокаТаблицы.ВалютаСчетаОрганизации    = ВалютаСчета;
            НомерСтроки                             = НомерСтроки + 1;

            // Заполним по строкам выписки
            СтрокаТаблицы.ДатаПроведения            = Операция.ДатаИсполнения;
            СтрокаТаблицы.НомерДок                  = Операция.НомерДокумента;
            СтрокаТаблицы.НазначениеПлатежа         = Операция.НазначениеПлатежа;
            СтрокаТаблицы.ИдентификаторОперации     = Операция.Идентификатор;
            Если Операция.ПоступилоСписано = "Поступило" Тогда
                СтрокаТаблицы.СуммаПоступило = Операция.Сумма;
            Иначе
                СтрокаТаблицы.СуммаСписано   = Операция.Сумма;
            КонецЕсли;

            // Заполним по строкам распознанной выписки
            РаспознаннаяОперация = РаспознаннаяВыписка.Операции.Найти(Операция.Идентификатор, "Идентификатор");
            Если РаспознаннаяОперация = Неопределено Тогда 
                Продолжить;
            КонецЕсли;

            СтрокаТаблицы.ДокументОснование  = РаспознаннаяОперация.ПлатежноеПоручение;
            СтрокаТаблицы.Документ           = РаспознаннаяОперация.Ссылка;

            ХозяйственнаяОперация = РаспознаннаяОперация.ХозяйственнаяОперация;
            ДанныеДокумента       = ДанныеДокументов[Операция.Идентификатор];
            Если ХозяйственнаяОперация <> Неопределено Тогда
                #Вставка // Гарант+ Килипенко 16.01.2025 Принудительная установка НДС 20% ++
                ВыполнитьЗаменуСтавкиНДСХозяйственнойОперацииНаСервере(ХозяйственнаяОперация);
                #КонецВставки // Гарант+ Килипенко 16.01.2025 Принудительная установка НДС 20% --
                ЗаполнитьСтрокуПоХозяйственнойОперации(РаспознанныеДанныеИзБанка, СтрокаТаблицы, ХозяйственнаяОперация);
            ИначеЕсли ДанныеДокумента <> Неопределено Тогда
                ЗаполнитьСтрокуПоДаннымДокумента(СтрокаТаблицы, ДанныеДокумента);
            КонецЕсли;

            СтрокаТаблицы.ДоговорРазрешеноИзменение =
            Не (ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) И ЗначениеЗаполнено(СтрокаТаблицы.Договор));

            // Покажем ошибки создания документов если они есть
            Если РаспознанныеДанныеИзБанка.Свойство("СозданиеДокументов") Тогда
                РезультатСозданияДокументов = РаспознанныеДанныеИзБанка.СозданиеДокументов[ИдентификаторВыписки];
            Иначе
                РезультатСозданияДокументов = Неопределено;
            КонецЕсли;

            РазместитьПредупреждение(СтрокаТаблицы, РаспознаннаяОперация.Предупреждения, РезультатСозданияДокументов);
            ПодготовитьОтображениеПредупреждений(СтрокаТаблицы, Объект.СоздаватьНенайденныеЭлементы);

        КонецЦикла;
    КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьЗаменуСтавкиНДСХозяйственнойОперацииНаСервере(ХозяйственнаяОперация)   
    Если ХозяйственнаяОперация.ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
        ИЛИ ХозяйственнаяОперация.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
        Возврат Ложь;
    КонецЕсли;
    
    ХозяйственнаяОперация.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
    ХозяйственнаяОперация.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ХозяйственнаяОперация.СуммаВзаиморасчетов,
                Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ХозяйственнаяОперация.СтавкаНДС));
                
    Возврат Истина;
КонецФункции
