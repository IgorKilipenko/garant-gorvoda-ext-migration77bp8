//#Область ОбработчикиСобытийФормы

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//    ЭтотОбъект.Элементы.ГруппаИндикация.Видимость = Ложь;
//    ЭтотОбъект.Объект.КаталогДляВременныхФайлов = "D:\TMA\TokenSchetmash";
//    ЭтотОбъект.Объект.Токен = "";

//    // Основной рнжим доступа
//    // Объект.ИдентификаторМагазина = 59;
//    // Объект.Логин = "wkx_53";
//    // Объект.Пароль = "P9cyRb3?";

//    // Режим ДЕМО (Тестовый)
//    ЭтотОбъект.Объект.ИдентификаторМагазина = 42;
//    ЭтотОбъект.Объект.Логин = "test_api";
//    ЭтотОбъект.Объект.Пароль = "123456";

//    ЭтотОбъект.Объект.Организация = ?(ЭтотОбъект.Объект.Организация = Неопределено,
//            УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), ЭтотОбъект.Объект.Организация)

//        // Гарант+ Килипенко 17.01.2025 Временно отключен основной доступ --
//        ЭтотОбъект.Объект.РасшифровыватьУслуги = Истина;
//    ЭтотОбъект.Объект.ПоУмолчанию_ВидОплаты = 1; // payments.type
//    ЭтотОбъект.Объект.ПоУмолчанию_ПризнакПредметаРасчета = 4; // items.type
//    ЭтотОбъект.Объект.ПоУмолчанию_ПризнакСпособаРасчета = 4; // items.mode
//КонецПроцедуры

//&НаКлиенте
//Процедура ПриОткрытии(Отказ)
//    Если ЭтотОбъект.Объект.Логин = "test_api" И ЭтотОбъект.Объект.Пароль = "123456" Тогда
//        ОбщегоНазначенияКлиент.СообщениеПользователю("ВНИМАНИЕ!!! ВЫ ВОШЛИ В ТЕСТОВОМ РЕЖИМЕ!");
//    КонецЕсли;
//КонецПроцедуры

//#КонецОбласти // ОбработчикиСобытийФормы

//#Область ОбработчикиКомандФормы

//&НаКлиенте
//Процедура ВыборПериода(Команда)
//    ВыбранныйПериод = Новый СтандартныйПериод;
//    ВыбранныйПериод.ДатаНачала = ЭтотОбъект.Объект.ДатаНачала;
//    ВыбранныйПериод.ДатаОкончания = ЭтотОбъект.Объект.ДатаОкончания;

//    Диалог = Новый ДиалогРедактированияСтандартногоПериода();
//    Диалог.Период = ВыбранныйПериод;

//    Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
//КонецПроцедуры



//#КонецОбласти // ОбработчикиКомандФормы

//#Область ОбработчикиСобытийЭлементовФормы

//&НаКлиенте
//Процедура СтрокиРегистрацииОплатПриАктивизацииСтроки(Элемент)
//    СтандартнаяОбработка = Ложь;

//    Если Элементы.СтрокиРегистрацииОплат.ТекущиеДанные <> Неопределено Тогда
//        ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

//        СтруктураПараметровОтбора = Новый Структура;
//        СтруктураПараметровОтбора.Вставить("ДокРегистрацияОплаты", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.ДокРегистрацияОплаты);
//        // СтруктураПараметровОтбора.Вставить("Контрагент", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Контрагент);
//        // СтруктураПараметровОтбора.Вставить("Документ", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Документ);
//        СтруктураПараметровОтбора.Вставить("external_id", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.external_id);

//        НайденныеСтроки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.НайтиСтроки(СтруктураПараметровОтбора);

//        Для Каждого ТекущаяСтрокаРасшифровки Из НайденныеСтроки Цикл
//            НоваяСтрокаДляОтображения = ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Добавить();
//            ЗаполнитьЗначенияСвойств(НоваяСтрокаДляОтображения, ТекущаяСтрокаРасшифровки);
//        КонецЦикла;
//    КонецЕсли;
//КонецПроцедуры

//#КонецОбласти // ОбработчикиСобытийЭлементовФормы

//#Область СлужебныеПроцедурыИФункции

//&НаКлиенте
//Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
//    Диалог = ДополнительныеПараметры.Диалог;

//    Если ЗначениеЗаполнено(Период) Тогда
//        ВыбранныйПериод = Диалог.Период;
//        ЭтотОбъект.Объект.ДатаНач = ВыбранныйПериод.ДатаНачала;
//        ЭтотОбъект.Объект.ДатаКон = ВыбранныйПериод.ДатаОкончания;
//    КонецЕсли;
//КонецПроцедуры

//&НаСервере
//Функция УникальныйНомерДокумента(ДатаН, НомерН, ЛицСчет)

//    Год = Сред(ДатаН, 7, 4);
//    Месяц = Сред(ДатаН, 4, 2);
//    День = Сред(ДатаН, 1, 2);

//    ЛицСч = СтрЗаменить(ЛицСчет, "л/с №", "");

//    Возврат СокрЛП(Объект.ПрефикНомера) + Год + Месяц + День + "_" + СокрЛП(НомерН) + "_" + СокрЛП(ЛицСч);

//КонецФункции

//#Область ЗаполнениеДанных

//&НаКлиенте
//Процедура Заполнить(Команда)
//    ЭтотОбъект.Объект.СтрокиРегистрацииОплат.Очистить();
//    ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.Очистить();
//    ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

//    ЗаполненоУспешно = ЗаполнитьНаСервере();

//    Если НЕ ЗаполненоУспешно Тогда
//        Объект.РасшифровкаРегистрацийОплат.Очистить();
//        Объект.СтрокиРегистрацииОплат.Очистить();
//        ПоказатьПредупреждение( , "Прервано! Исправьте ошибки.", , "Ошибка при заполнении");
//        Возврат;

//    КонецЕсли;
//КонецПроцедуры

//// Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
//// ~ Переработана полностью ~
////
//&НаСервере
//Процедура ПолучитьОбщуюТаблицуРасшифровкиОплат()
//    // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
//    ТаблицаРасшифровкиОплатДляОФД = ГП_ОбменОФД.ПолучитьСвернутуюОбщуюТаблицуРасшифровкиОплатДляОФД(
//            НачалоДня(ЭтотОбъект.Объект.ДатаНач),
//            КонецДня(ЭтотОбъект.Объект.ДатаКон),
//            ?(ЭтотОбъект.ЛицевойСчет.Пустая(), Неопределено, ЭтотОбъект.ЛицевойСчет),
//            ЭтотОбъект.Объект.Организация);

//    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Очистить();
//    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Загрузить(ТаблицаРасшифровкиОплатДляОФД);
//КонецПроцедуры // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД --

//&НаСервере
//Функция ЗаполнитьНаСервере()

//    ТаблицаЛицевыхСчетовРегистрацииОплат = ГП_ОбменОФД.ПолучитьТаблицуЛицевыхСчетовРегистрацииОплатДляОФД(
//            НачалоДня(ЭтотОбъект.Объект.ДатаНач),
//            КонецДня(ЭтотОбъект.Объект.ДатаКон),
//            ?(ЭтотОбъект.ЛицевойСчет.Пустая(), Неопределено, ЭтотОбъект.ЛицевойСчет),
//            ЭтотОбъект.Объект.Организация);

//    ОбщийСписокЛицевыхСчетов = ТаблицаЛицевыхСчетовРегистрацииОплат.ВыгрузитьКолонку("Объект");

//    ПолучитьОбщуюТаблицуРасшифровкиОплат();

//    Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаЛицевыхСчетовРегистрацииОплат Цикл
//        // Заполняем основную таблицу
//        НоваяСтрока = Объект.СтрокиРегистрацииОплат.Добавить();
//        НоваяСтрока.ЛицевойСчет = ВыборкаДетальныеЗаписи.Объект;
//        НоваяСтрока.База = "BUH_1C8";
//        НоваяСтрока.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//        НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
//        НоваяСтрока.timestamp = ВыборкаДетальныеЗаписи.Ссылка.Дата;
//        НоваяСтрока.external_id = ИдентификаторСтрокиОплаты;

//        НоваяСтрока.phone = "";
//        НоваяСтрока.email = "";
//        НоваяСтрока.total = ВыборкаДетальныеЗаписи.Сумма;
//        НоваяСтрока.type = Объект.ПоУмолчанию_type; // 1 - электронный  2 - аванс 3 - кредит

//        СП = Новый Структура;
//        СП.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
//        СП.Вставить("Объект", ВыборкаДетальныеЗаписи.Объект);

//        // Пропускаем расшифровку повторного лицевого счета,
//        // т.к. расшифровка одна на все оплаты в одном документе,
//        // ну даа, как то так, сам в шоке, из-за этого нет возможности разделить оплаты
//        // в одном документе и записывается как одна оплата.
//        Если НЕ ЭтоПовтор Тогда

//            // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД ++
//            //
//            //ЗаполненоУспешно = ЗаполнитьРасшифровкиПлатежа(СП);

//            ЗаполненоУспешно = ЗаполнитьРасшифровкиПлатежа(СП, ИдентификаторСтрокиОплаты);
//            //
//            // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД --

//            // Если произошла ошибка при заполнении,
//            // тогда остановливаем процесс и возвращаем Ложь выполнении функции
//            Если НЕ ЗаполненоУспешно Тогда

//                Возврат Ложь;

//            КонецЕсли;

//        КонецЕсли;
//    КонецЦикла;

//    // Сварачиваем строки в основной таблице,
//    // в этот момент как раз и сворачиваются оплаты с одинаковым объектом(Лицевым счетом).
//    СвернутьТаблицуОплат();

//    // Заполнено успешно
//    Возврат Истина;

//КонецФункции

//&НаСервере
//Процедура СвернутьТаблицуОплат()

//    ТЗР = Объект.СтрокиРегистрацииОплат.Выгрузить();
//    ТЗР.Свернуть("База, ДокРегистрацияОплаты, ЛицевойСчет, type, external_id, timestamp, phone, email", "Сумма, total");
//    Объект.СтрокиРегистрацииОплат.Очистить();
//    Объект.СтрокиРегистрацииОплат.Загрузить(ТЗР);

//КонецПроцедуры

//// Устарела. Требует рефакторинг и адаптацию
//&НаСервере
//Функция ЗаполнитьРасшифровкиПлатежа(Знач СтруктураОтбораРасшифровки, Знач ИдентификаторСтрокиОплаты)
//    РезультатПоиска = ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.НайтиСтроки(СтруктураОтбораРасшифровки);

//    Инд = 0;
//    ИндError = 0;
//    ИндErrorP = 0;
//    ДляПров = Ложь;
//    КоличествоПредупреждений = 0;

//    НачальныйИндексСтроки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.Количество();

//    Для Каждого ВыборкаДетальныеЗаписи Из РезультатПоиска Цикл

//        Если ВыборкаДетальныеЗаписи.Услуга = "Ошибка определения услуги" Тогда
//            Сообщить("Ошибка (код 0). Услуга не определена. Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Код);
//            Объект.РасшифровкаРегистрацийОплат.Очистить();
//            Объект.СтрокиРегистрацииОплат.Очистить();
//            Объект.ТаблицаЧеков.Очистить();
//            Возврат Ложь;
//        КонецЕсли;

//        НоваяСтрока = Объект.РасшифровкаРегистрацийОплат.Добавить();
//        НоваяСтрока.ЛицевойСчет = ВыборкаДетальныеЗаписи.Объект;
//        НоваяСтрока.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//        НоваяСтрока.Услуга = ВыборкаДетальныеЗаписи.Услуга;
//        НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
//        НоваяСтрока.Пени = ВыборкаДетальныеЗаписи.Пени;
//        НоваяСтрока.Аванс = ВыборкаДетальныеЗаписи.АвансСумма;
//        НоваяСтрока.Долг = ВыборкаДетальныеЗаписи.ДолгСумма;

//        // проверю Пени это или Услуга(всего два варианта)
//        Если ВыборкаДетальныеЗаписи.Услуга = "Холодное водоснабжение (пени)" Тогда

//            // разбиваю пени и Услугу в одной строке,
//            // т.к. есть оплата Пени предполагаю, что оплата полная(нужно понаблюдать)
//            // и наоборот если это авнас то это часть - Аванс,
//            // иначе это просто оплата Пени
//            Если ВыборкаДетальныеЗаписи.Сумма > 0 И ВыборкаДетальныеЗаписи.Пени > 0 Тогда

//                Если ВыборкаДетальныеЗаписи.ЭтоАванс <> "Да" Тогда

//                    НоваяСтрока.Пени = 0;
//                    НоваяСтрока.Услуга = "Холодное водоснабжение";
//                    НоваяСтрока.items_type = 4;
//                    НоваяСтрока.items_mode = 4;

//                Иначе

//                    НоваяСтрока.Пени = 0;
//                    НоваяСтрока.Услуга = "Холодное водоснабжение";
//                    НоваяСтрока.items_type = 4;
//                    НоваяСтрока.items_mode = 3;

//                КонецЕсли;

//                // Разделяем пени
//                НоваяСтрокаПени = Объект.РасшифровкаРегистрацийОплат.Добавить();
//                НоваяСтрокаПени.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
//                НоваяСтрокаПени.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//                НоваяСтрокаПени.Услуга = ВыборкаДетальныеЗаписи.Услуга;
//                НоваяСтрокаПени.Сумма = 0;
//                НоваяСтрокаПени.Пени = ВыборкаДетальныеЗаписи.Пени;
//                НоваяСтрокаПени.Аванс = ВыборкаДетальныеЗаписи.АвансСумма;
//                НоваяСтрокаПени.Долг = ВыборкаДетальныеЗаписи.ДолгСумма;
//                НоваяСтрокаПени.items_type = 10;
//                НоваяСтрокаПени.items_mode = 4;

//            Иначе

//                НоваяСтрока.items_type = 10;
//                НоваяСтрока.items_mode = 4;

//            КонецЕсли;

//        Иначе

//            УслугаДляПараметра = ВыборкаДетальныеЗаписи.Услуга;

//            // если в строке только сумма без долга - это Аванс
//            Если ВыборкаДетальныеЗаписи.Сумма > 0 И ВыборкаДетальныеЗаписи.ДолгСумма = 0 Тогда // На аванс

//                // Проверяем действительно ли у него аванс
//                ТаблицаВзаиморасчетовПоЛС = ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

//                СП = Новый Структура;
//                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
//                СП.Вставить("Услуга", УслугаДляПараметра);

//                Если ТаблицаВзаиморасчетовПоЛС <> Неопределено Тогда
//                    ДеталиА = ТаблицаВзаиморасчетовПоЛС.НайтиСтроки(СП);
//                КонецЕсли;

//                // проверяем чтобы была только одна строка в результате,
//                // иначе выводим ошибку
//                Если ТаблицаВзаиморасчетовПоЛС <> Неопределено И ДеталиА.Количество() = 1 Тогда

//                    // если остаток меньше тогда всё ок,
//                    // иначе выводим ошибку и разбераемся, скорее всего разнесено неправильно в рег. оплате
//                    Если ДеталиА[0].СуммаНачисленияОстаток < 0 Тогда

//                        НоваяСтрока.Долг = ДеталиА[0].СуммаНачисленияОстаток;
//                        НоваяСтрока.items_type = 4;
//                        НоваяСтрока.items_mode = 3;

//                    Иначе

//                        Сообщить("Ошибка (код 7). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                            + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
//                        Объект.РасшифровкаРегистрацийОплат.Очистить();
//                        Объект.СтрокиРегистрацииОплат.Очистить();
//                        Объект.ТаблицаЧеков.Очистить();
//                        Возврат Ложь;

//                    КонецЕсли;

//                Иначе

//                    Сообщить("Ошибка (код 6). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
//                    Объект.РасшифровкаРегистрацийОплат.Очистить();
//                    Объект.СтрокиРегистрацииОплат.Очистить();
//                    Объект.ТаблицаЧеков.Очистить();
//                    Возврат Ложь;

//                КонецЕсли;

//            ИначеЕсли ВыборкаДетальныеЗаписи.Сумма = ВыборкаДетальныеЗаписи.ДолгСумма Тогда // Полная оплата

//                // Проверяем действительно ли у него полная оплата
//                ТаблицаВзаиморасчетовПоЛС = ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

//                СП = Новый Структура;
//                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
//                СП.Вставить("Услуга", УслугаДляПараметра);

//                Если ТаблицаВзаиморасчетовПоЛС <> Неопределено Тогда
//                    ДеталиПО = ТаблицаВзаиморасчетовПоЛС.НайтиСтроки(СП);
//                КонецЕсли;

//                Если ТаблицаВзаиморасчетовПоЛС = Неопределено ИЛИ ДеталиПО.Количество() = 0 Тогда

//                    НоваяСтрока.items_type = 4;
//                    НоваяСтрока.items_mode = 4;

//                ИначеЕсли ДеталиПО.Количество() = 1 Тогда

//                    // если остаток больше тогда это - Частичная оплата,
//                    // иначе Полная
//                    Если ДеталиПО[0].СуммаНачисленияОстаток > 0 Тогда

//                        // дополнительная проверка от 20.05.2020г
//                        // если общий остаток равен нулю (есть такие случаи)
//                        // тогда и по этой услуге будет полная оплата

//                        СП = Новый Структура;
//                        СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);

//                        ДеталиПО2 = ТаблицаВзаиморасчетовПоЛС.НайтиСтроки(СП);
//                        СуммаДляПроверки = 0;
//                        Для Каждого СтрокаСуммы Из ДеталиПО2 Цикл

//                            СуммаДляПроверки = СуммаДляПроверки + СтрокаСуммы.СуммаНачисленияОстаток;

//                        КонецЦикла;

//                        Если СуммаДляПроверки <> 0 Тогда

//                            ИндError = ИндError + 1;
//                            НоваяСтрока.Долг = ДеталиПО[0].СуммаНачисленияОстаток;
//                            НоваяСтрока.items_type = 4;
//                            НоваяСтрока.items_mode = 5;

//                        Иначе

//                            НоваяСтрока.Долг = ДеталиПО[0].СуммаНачисленияОстаток;
//                            НоваяСтрока.items_type = 4;
//                            НоваяСтрока.items_mode = 4;

//                        КонецЕсли;

//                    Иначе

//                        НоваяСтрока.items_type = 4;
//                        НоваяСтрока.items_mode = 4;

//                    КонецЕсли;

//                Иначе

//                    Сообщить("Ошибка (код 5). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
//                    Объект.РасшифровкаРегистрацийОплат.Очистить();
//                    Объект.СтрокиРегистрацииОплат.Очистить();
//                    Объект.ТаблицаЧеков.Очистить();
//                    Возврат Ложь;

//                КонецЕсли;

//                // здесь выводим ошибку, т.к сумма олаты не может быть больше суммы долга
//                // в таких случаях разница должна уйти в Аванс
//            ИначеЕсли ВыборкаДетальныеЗаписи.Сумма > ВыборкаДетальныеЗаписи.ДолгСумма Тогда

//                // дополнено 02.08.189
//                // в случае если абонент оплатил в том же месяце что и насления
//                // тогда проверяем и в этом случае разбиваем вручную
//                ТаблицаВзаиморасчетовПоЛС = ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

//                СП = Новый Структура;
//                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
//                СП.Вставить("Услуга", УслугаДляПараметра);

//                Если ТаблицаВзаиморасчетовПоЛС <> Неопределено Тогда
//                    ОстаткиПроверки = ТаблицаВзаиморасчетовПоЛС.НайтиСтроки(СП);
//                Иначе
//                    ОстаткиПроверки = Новый ТаблицаЗначений();
//                КонецЕсли;

//                Для Каждого СтрОст Из ОстаткиПроверки Цикл

//                    Если СтрОст.СуммаНачисленияОстаток > 0 Тогда

//                        Сообщить("Ошибка (код 4). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                            + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
//                        Объект.РасшифровкаРегистрацийОплат.Очистить();
//                        Объект.СтрокиРегистрацииОплат.Очистить();
//                        Объект.ТаблицаЧеков.Очистить();
//                        Возврат Ложь;

//                    КонецЕсли;

//                КонецЦикла;

//                // здесь создаем новые строки на аванс
//                // если он "реально" есть
//                Если ОстаткиПроверки.Количество() <> 0 Тогда

//                    НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.ДолгСумма;
//                    НоваяСтрока.items_type = 4;
//                    НоваяСтрока.items_mode = 4;

//                    НоваяСтрокаАванс = Объект.РасшифровкаРегистрацийОплат.Добавить();
//                    НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
//                    НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//                    НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
//                    НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма - ВыборкаДетальныеЗаписи.ДолгСумма;
//                    НоваяСтрокаАванс.Пени = 0;
//                    НоваяСтрокаАванс.Аванс = 1;
//                    НоваяСтрокаАванс.Долг = 0;
//                    НоваяСтрокаАванс.items_type = 4;
//                    НоваяСтрокаАванс.items_mode = 3;

//                Иначе

//                    // Если авансы не найдены, а значит это полная оплата
//                    // тогда добавляем полную сумму, а не долг
//                    НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
//                    НоваяСтрока.items_type = 4;
//                    НоваяСтрока.items_mode = 4;

//                КонецЕсли;

//                // здесь частиная оплата, но стоит проверить(здесь какя то фигня бывает, мониторим и если что, исправляем)
//            ИначеЕсли ВыборкаДетальныеЗаписи.Сумма < ВыборкаДетальныеЗаписи.ДолгСумма Тогда

//                // Проверяем действительно ли у него частичная оплата
//                ТаблицаВзаиморасчетовПоЛС = ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

//                СП = Новый Структура;
//                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
//                СП.Вставить("Услуга", УслугаДляПараметра);

//                Детали = ТаблицаВзаиморасчетовПоЛС.НайтиСтроки(СП);

//                Если Детали.Количество() = 0 Тогда

//                    НоваяСтрока.Долг = ВыборкаДетальныеЗаписи.Сумма;
//                    НоваяСтрока.items_type = 4;
//                    НоваяСтрока.items_mode = 4;

//                ИначеЕсли Детали.Количество() = 1 Тогда

//                    // когда всё "красиво" должен быть остаток по услуге, тогда это точно Частичная оплата
//                    // иначе попытка разбить сумму на Аванс и Услугу, но здесь всё "хитро",
//                    // может быть неправильно сделан перерасчет и тогда разобьет некорректно
//                    // в любом случае выводим сообщение бухгалтеру(ответсвенному лицу) для проверки корректности разбития,
//                    // или исправить перерасчет и сново вручную разбить сумму в документе Рег.оплаты.
//                    СаммаПослеПроведенияДокумента = Детали[0].СуммаНачисленияОстаток;
//                    НоваяСтрока.Долг = СаммаПослеПроведенияДокумента + ВыборкаДетальныеЗаписи.Сумма;

//                    Если СаммаПослеПроведенияДокумента > 0 Тогда // долг

//                        НоваяСтрока.items_type = 4;
//                        НоваяСтрока.items_mode = 5;

//                    ИначеЕсли СаммаПослеПроведенияДокумента < 0 Тогда // аванс

//                        // здесь проверяю был ли аванс, до оплаты
//                        // если был, тогда всю сумму на аванс
//                        Если (СаммаПослеПроведенияДокумента * -1) > ВыборкаДетальныеЗаписи.Сумма
//                            ИЛИ (СаммаПослеПроведенияДокумента * -1) = ВыборкаДетальныеЗаписи.Сумма Тогда

//                            // проверяем действительно ли у него аванс
//                            // или сумма все-таки не зочлась и у него полная оплата
//                            ОстаткиПроверкиАванса = ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Объект);
//                            ОстаткиПроверкиАванса.Свернуть("ЛицевойСчет", "СуммаНачисленияОстаток");

//                            Если ОстаткиПроверкиАванса.Количество() <> 0
//                                И НЕ ОстаткиПроверкиАванса[0].СуммаНачисленияОстаток = 0 Тогда // если общий остаток больше или равен 0 тогда есть какой то остаток(не аванс)

//                                // здесь сделаем долнительную проверку
//                                // если общий остаток после оплаты больше 0 тогда это точно не аванс
//                                // иначе аванс
//                                Если ОстаткиПроверкиАванса[0].СуммаНачисленияОстаток < 0 Тогда

//                                    // Добавляем остаток на аванс
//                                    НоваяСтрокаАванс = Объект.РасшифровкаРегистрацийОплат.Добавить();
//                                    НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
//                                    НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//                                    НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
//                                    НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма;
//                                    НоваяСтрокаАванс.Пени = 0;
//                                    НоваяСтрокаАванс.Аванс = 1;
//                                    НоваяСтрокаАванс.Долг = 0;
//                                    НоваяСтрокаАванс.items_type = 4;
//                                    НоваяСтрокаАванс.items_mode = 3;

//                                    Объект.РасшифровкаРегистрацийОплат.Удалить(НоваяСтрока);

//                                Иначе

//                                    Сообщить("Ошибка (код 35). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);

//                                КонецЕсли;

//                            Иначе // иначе если остатков нет тогда ясно что это полная оплата

//                                // Добавляем полную оплату
//                                НоваяСтрокаАванс = Объект.РасшифровкаРегистрацийОплат.Добавить();
//                                НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
//                                НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//                                НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
//                                НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма;
//                                НоваяСтрокаАванс.Пени = 0;
//                                НоваяСтрокаАванс.Аванс = 0;
//                                НоваяСтрокаАванс.Долг = 0;
//                                НоваяСтрокаАванс.items_type = 4;
//                                НоваяСтрокаАванс.items_mode = 4;

//                                Объект.РасшифровкаРегистрацийОплат.Удалить(НоваяСтрока);


//                            КонецЕсли;

//                        Иначе // здесь сумма после оплаты , меньше суммы самой оплаты(пока что не понятно, что делать в этом случе, вывожу ошибку)

//                            // покачто разбиваем на полную оплату и аванс
//                            // Добавляем полную оплату
//                            НоваяСтрокаАванс = Объект.РасшифровкаРегистрацийОплат.Добавить();
//                            НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
//                            НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//                            НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
//                            НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма - (СаммаПослеПроведенияДокумента * -1);
//                            НоваяСтрокаАванс.Пени = 0;
//                            НоваяСтрокаАванс.Аванс = 0;
//                            НоваяСтрокаАванс.Долг = 0;
//                            НоваяСтрокаАванс.items_type = 4;
//                            НоваяСтрокаАванс.items_mode = 4;

//                            // Добавляем остаток на аванс
//                            НоваяСтрокаАванс = Объект.РасшифровкаРегистрацийОплат.Добавить();
//                            НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
//                            НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
//                            НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
//                            НоваяСтрокаАванс.Сумма = (СаммаПослеПроведенияДокумента * -1);
//                            НоваяСтрокаАванс.Пени = 0;
//                            НоваяСтрокаАванс.Аванс = 1;
//                            НоваяСтрокаАванс.Долг = 0;
//                            НоваяСтрокаАванс.items_type = 4;
//                            НоваяСтрокаАванс.items_mode = 3;

//                            Объект.РасшифровкаРегистрацийОплат.Удалить(НоваяСтрока);

//                            КоличествоПредупреждений = КоличествоПредупреждений + 1;

//                            ОбщийОстатокПоВсемУслугам = ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Объект);

//                            Для Каждого СтрПроверкиУслуги Из ОбщийОстатокПоВсемУслугам Цикл

//                                Если СтрПроверкиУслуги.Услуга.Наименование = "Горячее водоснабжение" Тогда

//                                    Сообщить("ВАЖНО!!!Исправьте(остатки на ГВ). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
//                                    Продолжить;

//                                КонецЕсли;

//                            КонецЦикла;

//                            ОбщийОстатокПоВсемУслугам.Свернуть("ЛицевойСчет", "СуммаНачисленияОстаток");

//                            Если ОбщийОстатокПоВсемУслугам.Количество() <> 0
//                                И НЕ ОбщийОстатокПоВсемУслугам[0].СуммаНачисленияОстаток = 0 Тогда

//                                Сообщить("ВАЖНО!!! Исправьте(скорее всего сумма оплаты разбита некорректно). Лицевой счет: "
//                                    + ВыборкаДетальныеЗаписи.Объект.Наименование + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);

//                            Иначе

//                                Сообщить("ВАЖНО!!! Исправьте(должна быть полная оплата). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                                    + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);

//                            КонецЕсли;

//                        КонецЕсли;

//                    КонецЕсли;

//                Иначе

//                    Сообщить("Ошибка (код 2). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
//                    Объект.РасшифровкаРегистрацийОплат.Очистить();
//                    Объект.СтрокиРегистрацииОплат.Очистить();
//                    Объект.ТаблицаЧеков.Очистить();
//                    Возврат Ложь;

//                КонецЕсли;
//            Иначе

//                Сообщить("Ошибка (код 1). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
//                    + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
//                Объект.РасшифровкаРегистрацийОплат.Очистить();
//                Объект.СтрокиРегистрацииОплат.Очистить();
//                Объект.ТаблицаЧеков.Очистить();
//                Возврат Ложь;

//            КонецЕсли;

//        КонецЕсли;

//    КонецЦикла;

//    // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД ++
//    //
//    // Заполнение идентификатора для всех строк расшифровки
//    РезультатПоискаРасшифровки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.НайтиСтроки(
//            Новый Структура("ДокРегистрацияОплаты, ЛицевойСчет",
//                СтруктураОтбораРасшифровки.Ссылка, СтруктураОтбораРасшифровки.Объект));
//    Для Каждого ТекущаяСтрокаРегистрации Из РезультатПоискаРасшифровки Цикл
//        ТекущаяСтрокаРегистрации.external_id = ИдентификаторСтрокиОплаты;
//    КонецЦикла;
//    //
//    // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД --

//    // Выполнено успешно
//    Возврат Истина;

//КонецФункции

//&НаСервере
//Функция ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(Знач Документ, Знач СписокЛицевыхСчетов, Знач Услуга = Неопределено)
//    Если ТипЗнч(СписокЛицевыхСчетов) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
//        СписокЛицевыхСчетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЛицевойСчет);
//    КонецЕсли;

//    Запрос = Новый Запрос;
//    Запрос.Текст = "ВЫБРАТЬ
//        |    ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
//        |    ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
//        |    ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
//        |ИЗ
//        |    РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
//        |       &Дата,
//        |       ЛицевойСчет В (&СписокЛицевыхСчетов)
//        |       И &ДополнительныеУсловия) КАК ВзаиморасчетыПоЛицевымСчетамОстатки
//        |";

//    ДополнительныеУсловияТаблицы = "ИСТИНА";
//    Если Услуга <> Неопределено Тогда
//        ДополнительныеУсловияТаблицы = СтрШаблон("%1 И (Услуга = &Услуга)", ДополнительныеУсловияТаблицы);
//        Запрос.УстановитьПараметр("Услуга", Услуга);
//    КонецЕсли;
//    Запрос.Текст = СтрЗаменить( , "&ДополнительныеУсловияТаблицы", ДополнительныеУсловияТаблицы);

//    Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
//    Запрос.УстановитьПараметр("Дата", Новый Граница(Документ.МоментВремени(), ВидГраницы.Включая));

//    Возврат Запрос.Выполнить().Выгрузить();
//КонецФункции

//#КонецОбласти // ЗаполнениеДанных

//#Область РаботаСЧеками

//// Приход (sell)
//&НаКлиенте
//Процедура ДляТекущейСтрокиРегистрацияЧека_Приход(Команда)

//    ТекСтр = Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;
//    Оповещение = Новый ОписаниеОповещения("ДляТекущейСтрокиРегистрацияЧека_Приход_Продолжение", ЭтотОбъект);
//    ТекстВопроса = "Будет выполнена регистрация чека ""Приход"" для лицевого счета: " + Символы.ПС + ТекСтр.Лицевойсчет +
//        " на сумму: " + ТекСтр.Сумма + Символы.ПС +
//        "Продолжить?";
//    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

//КонецПроцедуры

//&НаКлиенте
//Процедура ДляТекущейСтрокиРегистрацияЧека_Приход_Продолжение(Результат, ДополнительныеПараметры) Экспорт

//    Если Результат = КодВозвратаДиалога.ОК Тогда
//        ДляТекущейСтрокиРегистрацияЧека("sell", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные);
//    Иначе
//        Сообщение = Новый СообщениеПользователю;
//        Сообщение.Текст = "Регистрация не выполнена.";
//        Сообщение.Сообщить();
//    КонецЕсли;

//КонецПроцедуры

//Функция ЗаполнитьТабличнуюЧастьЧека(ДокРегОпл, ЛичСч)
//    ЭтотОбъект.Объект.ТаблицаЧеков.Очистить();

//    Для Каждого ТекСтр Из ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат Цикл
//        Если (ТекСтр.ДокРегистрацияОплаты = ДокРегОпл) И (ТекСтр.ЛицевойСчет = ЛичСч) Тогда
//            НовСтр = Объект.ТаблицаЧеков.Добавить();
//            НовСтр.name = ТекСтр.Услуга;
//            Если ТекСтр.Пени <> 0 Тогда
//                НовСтр.ЭтоПени = Истина;
//            КонецЕсли;
//            НовСтр.price = ТекСтр.Сумма + ТекСтр.Пени;
//            НовСтр.items_type = ТекСтр.items_type;
//            НовСтр.items_mode = ТекСтр.items_mode;
//        КонецЕсли;
//    КонецЦикла;
//КонецФункции

//&НаКлиенте
//Процедура ДляВсехСтрок_РегистрацияЧека_Приход(Команда)

//    Инд = 0;
//    Всего = Объект.СтрокиРегистрацииОплат.Количество();

//    Для Каждого ТекущаяСтрока Из Объект.СтрокиРегистрацииОплат Цикл
//        Инд = Инд + 1;
//        ДляТекущейСтрокиРегистрацияЧека("sell", ТекущаяСтрока);
//        Состояние("Отправлено " + Инд + " из " + Всего, Инд * 100 / Всего, "Отправка чеков");
//    КонецЦикла;

//    ПоказатьПредупреждение( , "Данные успешно отправлены!");

//КонецПроцедуры

//&НаКлиенте
//Процедура ПроверкаСтатусаЧекаДляТекущейСтроки(Команда)

//    ТекущаяСтрока = Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;

//    ПроверкаСтатусаЧека(ТекущаяСтрока);

//КонецПроцедуры

//&НаКлиенте
//Функция ПроверкаСтатусаЧека(ТекущаяСтрока)

//    Получитьtoken();

//    ФайлОтвета = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\status_check.txt";

//    HTTPСоединение = Новый HTTPСоединение("online.schetmash.com", , , , , , Новый ЗащищенноеСоединениеOpenSSL());
//    ЗапросGET = Новый HTTPЗапрос("/lk/api/v1/" + СокрЛП(Объект.id_Магазина) + "/report?token=" + СокрЛП(Объект.token) + "&external_id=" + СокрЛП(ТекущаяСтрока.external_id));
//    Ответ = HTTPСоединение.Получить(ЗапросGET, ФайлОтвета);

//    ТД = Новый ТекстовыйДокумент;
//    ТД.Прочитать(ФайлОтвета);
//    Строка = ТД.ПолучитьСтроку(1);
//    Если Лев(Строка, СтрДлина("<!DOCTYPE html>")) = "<!DOCTYPE html>" Тогда
//        ФайлШТМЛ = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\status_check.html";
//        КопироватьФайл(ФайлОтвета, ФайлШТМЛ);
//        //ЗапуститьПриложение(ФайлШТМЛ);
//        Сообщить("Ответ в виде веб-страницы");
//        Возврат Ложь;
//    КонецЕсли;

//    ЧтениеJSON = Новый ЧтениеJSON;
//    ЧтениеJSON.ОткрытьФайл(ФайлОтвета);

//    //Попытка
//    code = Неопределено;
//    message = Неопределено;
//    status = Неопределено;
//    Пока ЧтениеJSON.Прочитать() Цикл
//        ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
//        Если ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
//            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
//        КонецЕсли;

//        Если (ИмяСвойства = "status") И ТипJSON = ТипЗначенияJSON.Строка Тогда
//            status = ЧтениеJSON.ТекущееЗначение;
//        КонецЕсли;

//        Если (ИмяСвойства = "id") И ТипJSON = ТипЗначенияJSON.Число Тогда
//            id = ЧтениеJSON.ТекущееЗначение;
//        КонецЕсли;

//        Если (ИмяСвойства = "code") И ТипJSON = ТипЗначенияJSON.Число Тогда
//            code = ЧтениеJSON.ТекущееЗначение;
//        КонецЕсли;
//        Если (ИмяСвойства = "message") И ТипJSON = ТипЗначенияJSON.Строка Тогда
//            message = ЧтениеJSON.ТекущееЗначение;
//        КонецЕсли

//    КонецЦикла;

//    Если ЗначениеЗаполнено(code)
//        И ЗначениеЗаполнено(message)
//        И НЕ ЗначениеЗаполнено(status) Тогда
//        status = "Код " + code + ": " + message;
//    КонецЕсли;

//    ТекущаяСтрока.status = status;
//    ТекущаяСтрока.id_Чека = id;
//    Возврат Истина;
//КонецФункции

//#КонецОбласти // РаботаСЧеками

//#КонецОбласти // СлужебныеПроцедурыИФункции
