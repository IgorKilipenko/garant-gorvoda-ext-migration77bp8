#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ЭтотОбъект.Объект.Токен = "";

    // Режим доступа
    ПользовательСчетмаш = ГП_СчетмашAPI.ПолучитьДемоПользователяСчетмаш();
    ЭтоДемоЛогинСчетмаш = ГП_СчетмашAPI.ЭтоДемоЛогинСчетмаш(ПользовательСчетмаш.Логин);

    Если ЭтоДемоЛогинСчетмаш Тогда
        ЭтотОбъект.Объект.ИдентификаторМагазина = 42;
    Иначе
        ЭтотОбъект.Объект.ИдентификаторМагазина = 59;
    КонецЕсли;

    ЭтотОбъект.Объект.Логин = ПользовательСчетмаш.Логин;
    ЭтотОбъект.Объект.Пароль =
        Константы.ГП_КлючАвторизацииСчетмаш.ПолучитьКлючДоступа(ЭтоДемоЛогинСчетмаш);

    ЭтотОбъект.Объект.Организация = ?(ЗначениеЗаполнено(ЭтотОбъект.Объект.Организация) = Ложь,
            УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), ЭтотОбъект.Объект.Организация);

    ЭтотОбъект.Объект.ПоУмолчанию_ВидОплаты = 1; // payments.type
    ЭтотОбъект.Объект.ПоУмолчанию_ПризнакПредметаРасчета = 4; // items.type
    ЭтотОбъект.Объект.ПоУмолчанию_ПризнакСпособаРасчета = 4; // items.mode

    РезультатПолученияТокена = ГП_СчетмашAPI.ПолучитьТокен(
            Новый Структура("Логин, Пароль", ЭтотОбъект.Объект.Логин, ЭтотОбъект.Объект.Пароль), Новый Структура);

    Если РезультатПолученияТокена.Успех Тогда
        ОбщегоНазначения.СообщитьПользователю("Токен получен");
    Иначе
        ОбщегоНазначения.СообщитьПользователю(РезультатПолученияТокена.ТекстСообщения);
    КонецЕсли;

    ЭтотОбъект.ТестовыйРежим = ЭтоДемоЛогинСчетмаш;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    Если ЭтотОбъект.ТестовыйРежим Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("ВНИМАНИЕ!!! ВКЛЮЧЕН ТЕСТОВЫЙ РЕЖИМ!");
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыборПериода(Команда)
    ВыбранныйПериод = Новый СтандартныйПериод;
    ВыбранныйПериод.ДатаНачала = ЭтотОбъект.Объект.ДатаНачала;
    ВыбранныйПериод.ДатаОкончания = ЭтотОбъект.Объект.ДатаОкончания;

    Диалог = Новый ДиалогРедактированияСтандартногоПериода();
    Диалог.Период = ВыбранныйПериод;

    Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусовЧеков(Команда)
    ГП_СчетмашОнлайнФорма.ПроверкаСтатусовЧеков(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПрихода(Команда)
    ГП_СчетмашОнлайнФорма.ВозвратПрихода(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КоррекцияПрихода(Команда)
    ГП_СчетмашОнлайнФорма.КоррекцияПрихода(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КоррекцияПриходаВсехСтрок(Команда)
    ГП_СчетмашОнлайнФорма.КоррекцияПрихода(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПриходаВсехСтрок(Форма)
    ГП_СчетмашОнлайнФорма.КоррекцияПрихода(Форма);
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокиРегистрацииОплатПриАктивизацииСтроки(Элемент)
    СтандартнаяОбработка = Ложь;

    Если Элементы.СтрокиРегистрацииОплат.ТекущиеДанные <> Неопределено Тогда
        ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

        СтруктураПараметровОтбора = Новый Структура;
        СтруктураПараметровОтбора.Вставить("Документ", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Документ);
        // СтруктураПараметровОтбора.Вставить("Контрагент", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Контрагент);
        // СтруктураПараметровОтбора.Вставить("Документ", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Документ);
        СтруктураПараметровОтбора.Вставить("external_id", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.external_id);

        НайденныеСтроки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.НайтиСтроки(СтруктураПараметровОтбора);

        Для Каждого ТекущаяСтрокаРасшифровки Из НайденныеСтроки Цикл
            НоваяСтрокаДляОтображения = ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрокаДляОтображения, ТекущаяСтрокаРасшифровки);
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
    Диалог = ДополнительныеПараметры.Диалог;

    Если ЗначениеЗаполнено(Период) Тогда
        ВыбранныйПериод = Диалог.Период;
        ЭтотОбъект.Объект.ДатаНачала = ВыбранныйПериод.ДатаНачала;
        ЭтотОбъект.Объект.ДатаОкончания = ВыбранныйПериод.ДатаОкончания;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УникальныйНомерДокумента(ДатаН, НомерН, ЛицСчет)

    Год = Сред(ДатаН, 7, 4);
    Месяц = Сред(ДатаН, 4, 2);
    День = Сред(ДатаН, 1, 2);

    ЛицСч = СтрЗаменить(ЛицСчет, "л/с №", "");

    Возврат СокрЛП(Объект.ПрефикНомера) + Год + Месяц + День + "_" + СокрЛП(НомерН) + "_" + СокрЛП(ЛицСч);

КонецФункции

#Область ЗаполнениеДанных

&НаКлиенте
Процедура Заполнить(Команда)
    ЗаполненоУспешно = ЗаполнитьНаСервере();

    Если НЕ ЗаполненоУспешно Тогда
        Объект.РасшифровкаРегистрацийОплат.Очистить();
        Объект.СтрокиРегистрацииОплат.Очистить();
        ПоказатьПредупреждение( , "Прервано! Исправьте ошибки.", , "Ошибка при заполнении");
        Возврат;

    КонецЕсли;
КонецПроцедуры

// Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
// ~ Переработана полностью ~
//
&НаСервере
Процедура ПолучитьОбщуюТаблицуРасшифровкиОплат()
    // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
    ТаблицаРасшифровкиОплатДляОФД = ГП_ОбменОФД.ПолучитьСвернутуюОбщуюТаблицуРасшифровкиОплатДляОФД(
            НачалоДня(ЭтотОбъект.Объект.ДатаНачала),
            КонецДня(ЭтотОбъект.Объект.ДатаОкончания),
            ?(ЭтотОбъект.ЛицевойСчет.Пустая(), Неопределено, ЭтотОбъект.ЛицевойСчет),
            ЭтотОбъект.Объект.Организация);

    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Очистить();
    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Загрузить(ТаблицаРасшифровкиОплатДляОФД);
КонецПроцедуры // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД --

&НаСервере
Функция ЗаполнитьНаСервере()
    ЭтотОбъект.Объект.СтрокиРегистрацииОплат.Очистить();
    ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.Очистить();
    ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

    ДанныеЗаполнения = ГП_ОбменОФД.СобратьДанныеЧековСчетмаш(
            НачалоДня(ЭтотОбъект.Объект.ДатаНачала),
            КонецДня(ЭтотОбъект.Объект.ДатаОкончания),
            Новый Структура("Контрагент, Организация",
                ?(ЭтотОбъект.Контрагент.Пустая(), Неопределено, ЭтотОбъект.Контрагент),
                ЭтотОбъект.Объект.Организация));

    Для Каждого СтрокаДанныхЗаполнения Из ДанныеЗаполнения.ТаблицаОплат Цикл
        НоваяСтрокаОплаты = ЭтотОбъект.Объект.СтрокиРегистрацииОплат.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаты, СтрокаДанныхЗаполнения);

        // Формирование идентификатора
        ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанныхЗаполнения.Документ, "Дата, Номер");
        ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанныхЗаполнения.Контрагент, "Код");
        НоваяСтрокаОплаты.external_id = ГП_ОбменОФД.СформироватьВнешнийИдентификаторЧекаСчетмаш(ДанныеДокумента, ДанныеКонтрагента);
        Если ПустаяСтрока(НоваяСтрокаОплаты.external_id) Тогда
            НоваяСтрокаОплаты.external_id = "";
            ВызватьИсключение("Ошибка формирования идентификатора");
        КонецЕсли;

        НайденныеСтрокиРасшифровки = ДанныеЗаполнения.РасшифровкаОплатДляЧеков.НайтиСтроки(
                Новый Структура("Документ, Контрагент", СтрокаДанныхЗаполнения.Документ, СтрокаДанныхЗаполнения.Контрагент));
        Для Каждого СтрокаДанныхЗаполненияРасшифровки Из НайденныеСтрокиРасшифровки Цикл
            НоваяСтрокаРасшифровки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, СтрокаДанныхЗаполненияРасшифровки);
            НоваяСтрокаРасшифровки.external_id = НоваяСтрокаОплаты.external_id;
            НоваяСтрокаРасшифровки.Аванс = ?(СтрокаДанныхЗаполненияРасшифровки.ЭтоАванс = Истина, НоваяСтрокаРасшифровки.Сумма, 0);
            НоваяСтрокаРасшифровки.Пени = ?(СтрокаДанныхЗаполненияРасшифровки.ЭтоПени = Истина, НоваяСтрокаРасшифровки.Сумма, 0);
        КонецЦикла;
    КонецЦикла;

    Возврат Истина;
КонецФункции

&НаСервере
Процедура СвернутьТаблицуОплат()

    //ТЗР = Объект.СтрокиРегистрацииОплат.Выгрузить();
    //ТЗР.Свернуть("База, ДокРегистрацияОплаты, ЛицевойСчет, type, external_id, timestamp, phone, email", "Сумма, total");
    //Объект.СтрокиРегистрацииОплат.Очистить();
    //Объект.СтрокиРегистрацииОплат.Загрузить(ТЗР);

КонецПроцедуры

// Устарела. Требует рефакторинг и адаптацию
&НаСервере
Функция ЗаполнитьРасшифровкиПлатежа(Знач СтруктураОтбораРасшифровки, Знач ИдентификаторСтрокиОплаты)
КонецФункции

&НаСервере
Функция ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(Знач Документ, Знач СписокЛицевыхСчетов, Знач Услуга = Неопределено)
    Если ТипЗнч(СписокЛицевыхСчетов) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
        СписокЛицевыхСчетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокЛицевыхСчетов);
    КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
        |    ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
        |    ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
        |    ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
        |ИЗ
        |    РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
        |       &Дата,
        |       ЛицевойСчет В (&СписокЛицевыхСчетов)
        |       И &ДополнительныеУсловия) КАК ВзаиморасчетыПоЛицевымСчетамОстатки
        |";

    ДополнительныеУсловияТаблицы = "ИСТИНА";
    Если Услуга <> Неопределено Тогда
        ДополнительныеУсловияТаблицы = СтрШаблон("%1 И (Услуга = &Услуга)", ДополнительныеУсловияТаблицы);
        Запрос.УстановитьПараметр("Услуга", Услуга);
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеУсловияТаблицы", ДополнительныеУсловияТаблицы);

    Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
    Запрос.УстановитьПараметр("Дата", Новый Граница(Документ.МоментВремени(), ВидГраницы.Включая));

    Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти // ЗаполнениеДанных

#Область РаботаСЧеками

// Приход (sell)
&НаКлиенте
Процедура ДляТекущейСтрокиРегистрацияЧека_Приход(Команда)

    //ТекСтр = Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;
    //Оповещение = Новый ОписаниеОповещения("ДляТекущейСтрокиРегистрацияЧека_Приход_Продолжение", ЭтотОбъект);
    //ТекстВопроса = "Будет выполнена регистрация чека ""Приход"" для лицевого счета: " + Символы.ПС + ТекСтр.Лицевойсчет +
    //    " на сумму: " + ТекСтр.Сумма + Символы.ПС +
    //    "Продолжить?";
    //ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

&НаКлиенте
Процедура ДляТекущейСтрокиРегистрацияЧека_Приход_Продолжение(Результат, ДополнительныеПараметры) Экспорт

    //Если Результат = КодВозвратаДиалога.ОК Тогда
    //    ДляТекущейСтрокиРегистрацияЧека("sell", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные);
    //Иначе
    //    Сообщение = Новый СообщениеПользователю;
    //    Сообщение.Текст = "Регистрация не выполнена.";
    //    Сообщение.Сообщить();
    //КонецЕсли;

КонецПроцедуры

Функция ЗаполнитьТабличнуюЧастьЧека(ДокРегОпл, ЛичСч)
    ЭтотОбъект.Объект.ТаблицаЧеков.Очистить();

    Для Каждого ТекСтр Из ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат Цикл
        Если (ТекСтр.ДокРегистрацияОплаты = ДокРегОпл) И (ТекСтр.ЛицевойСчет = ЛичСч) Тогда
            НовСтр = Объект.ТаблицаЧеков.Добавить();
            НовСтр.name = ТекСтр.Услуга;
            Если ТекСтр.Пени <> 0 Тогда
                НовСтр.ЭтоПени = Истина;
            КонецЕсли;
            НовСтр.price = ТекСтр.Сумма + ТекСтр.Пени;
            НовСтр.items_type = ТекСтр.items_type;
            НовСтр.items_mode = ТекСтр.items_mode;
        КонецЕсли;
    КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ДляВсехСтрок_РегистрацияЧека_Приход(Команда)

    //Инд = 0;
    //Всего = Объект.СтрокиРегистрацииОплат.Количество();

    //Для Каждого ТекущаяСтрока Из Объект.СтрокиРегистрацииОплат Цикл
    //    Инд = Инд + 1;
    //    ДляТекущейСтрокиРегистрацияЧека("sell", ТекущаяСтрока);
    //    Состояние("Отправлено " + Инд + " из " + Всего, Инд * 100 / Всего, "Отправка чеков");
    //КонецЦикла;

    //ПоказатьПредупреждение( , "Данные успешно отправлены!");

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусаЧекаДляТекущейСтроки(Команда)

    ТекущаяСтрока = Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;

    ПроверкаСтатусаЧека(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Функция ПроверкаСтатусаЧека(ТекущаяСтрока)

    //Получитьtoken();

    //ФайлОтвета = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\status_check.txt";

    //HTTPСоединение = Новый HTTPСоединение("online.schetmash.com", , , , , , Новый ЗащищенноеСоединениеOpenSSL());
    //ЗапросGET = Новый HTTPЗапрос("/lk/api/v1/" + СокрЛП(Объект.id_Магазина) + "/report?token=" + СокрЛП(Объект.token) + "&external_id=" + СокрЛП(ТекущаяСтрока.external_id));
    //Ответ = HTTPСоединение.Получить(ЗапросGET, ФайлОтвета);

    //ТД = Новый ТекстовыйДокумент;
    //ТД.Прочитать(ФайлОтвета);
    //Строка = ТД.ПолучитьСтроку(1);
    //Если Лев(Строка, СтрДлина("<!DOCTYPE html>")) = "<!DOCTYPE html>" Тогда
    //    ФайлШТМЛ = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\status_check.html";
    //    КопироватьФайл(ФайлОтвета, ФайлШТМЛ);
    //    //ЗапуститьПриложение(ФайлШТМЛ);
    //    Сообщить("Ответ в виде веб-страницы");
    //    Возврат Ложь;
    //КонецЕсли;

    //ЧтениеJSON = Новый ЧтениеJSON;
    //ЧтениеJSON.ОткрытьФайл(ФайлОтвета);

    ////Попытка
    //code = Неопределено;
    //message = Неопределено;
    //status = Неопределено;
    //Пока ЧтениеJSON.Прочитать() Цикл
    //    ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
    //    Если ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
    //        ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
    //    КонецЕсли;

    //    Если (ИмяСвойства = "status") И ТипJSON = ТипЗначенияJSON.Строка Тогда
    //        status = ЧтениеJSON.ТекущееЗначение;
    //    КонецЕсли;

    //    Если (ИмяСвойства = "id") И ТипJSON = ТипЗначенияJSON.Число Тогда
    //        id = ЧтениеJSON.ТекущееЗначение;
    //    КонецЕсли;

    //    Если (ИмяСвойства = "code") И ТипJSON = ТипЗначенияJSON.Число Тогда
    //        code = ЧтениеJSON.ТекущееЗначение;
    //    КонецЕсли;
    //    Если (ИмяСвойства = "message") И ТипJSON = ТипЗначенияJSON.Строка Тогда
    //        message = ЧтениеJSON.ТекущееЗначение;
    //    КонецЕсли

    //КонецЦикла;

    //Если ЗначениеЗаполнено(code)
    //    И ЗначениеЗаполнено(message)
    //    И НЕ ЗначениеЗаполнено(status) Тогда
    //    status = "Код " + code + ": " + message;
    //КонецЕсли;

    //ТекущаяСтрока.status = status;
    //ТекущаяСтрока.id_Чека = id;
    //Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ДляТекущейСтрокиРегистрацияЧека(Форма, Знач ТипОперации, Знач ТекущаяСтрока) Экспорт
    ГП_СчетмашОнлайнФорма.ДляТекущейСтрокиРегистрацияЧека(ЭтотОбъект, ТипОперации, ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти // РаботаСЧеками

#КонецОбласти // СлужебныеПроцедурыИФункции
