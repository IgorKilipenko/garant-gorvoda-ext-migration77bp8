#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    // Режим доступа
    ПользовательСчетмаш = ГП_СчетмашAPI.ПолучитьДемоПользователяСчетмаш();
    ЭтоДемоЛогинСчетмаш = ГП_СчетмашAPI.ЭтоДемоЛогинСчетмаш(ПользовательСчетмаш.Логин);

    Если ЭтоДемоЛогинСчетмаш Тогда
        ЭтотОбъект.Объект.ИдентификаторМагазина = 42;
    Иначе
        ЭтотОбъект.Объект.ИдентификаторМагазина = 59;
    КонецЕсли;

    ЭтотОбъект.Объект.Логин = ПользовательСчетмаш.Логин;

    ЭтотОбъект.Объект.Организация = ?(ЗначениеЗаполнено(ЭтотОбъект.Объект.Организация) = Ложь,
            УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), ЭтотОбъект.Объект.Организация);

    РезультатПроверкиСоединения = ГП_СчетмашAPI.ПроверитьСоединениеСчетмаш(ЭтотОбъект.Объект.Логин, Ложь);

    Если РезультатПроверкиСоединения.Успех Тогда
        ОбщегоНазначения.СообщитьПользователю("Соединение с сервером установлено");
    Иначе
        ОбщегоНазначения.СообщитьПользователю(РезультатПроверкиСоединения.ТекстСообщения);
    КонецЕсли;

    ЭтотОбъект.ТестовыйРежим = ЭтоДемоЛогинСчетмаш;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    Если ЭтотОбъект.ТестовыйРежим Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("ВНИМАНИЕ!!! ВКЛЮЧЕН ТЕСТОВЫЙ РЕЖИМ!");
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыборПериода(Команда)
    ВыбранныйПериод = Новый СтандартныйПериод;
    ВыбранныйПериод.ДатаНачала = ЭтотОбъект.Объект.ДатаНачала;
    ВыбранныйПериод.ДатаОкончания = ЭтотОбъект.Объект.ДатаОкончания;

    Диалог = Новый ДиалогРедактированияСтандартногоПериода();
    Диалог.Период = ВыбранныйПериод;

    Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеДанныеОплат(Команда)
    ЗаполненоУспешно = ЗаполнитьДанныеОплатНаСервере();

    Если НЕ ЗаполненоУспешно Тогда
        ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.Очистить();
        ЭтотОбъект.Объект.СтрокиРегистрацииОплат.Очистить();
        ПоказатьПредупреждение( , "Прервано! Исправьте ошибки.", , "Ошибка при заполнении");

        Возврат;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьПробитиеЧека(Команда)
    ТекущаяСтрокаОплаты = ЭтотОбъект.Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;
    Если ТекущаяСтрокаОплаты = Неопределено Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана строка оплаты");
        Возврат;
    КонецЕсли;

    РезультатДиалога = Ждать ВопросАсинх(СтрШаблон(
                "Будет выполнена регистрация чека ""Приход"" для контрагента: %1
                |Продолжить?", ТекущаяСтрокаОплаты.Контрагент), РежимДиалогаВопрос.ДаНет, 0, , "Регистрация чека (приход)");

    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат; // Отказ пользователя
    КонецЕсли;

    ТипОперацииРегистрации = ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека().Приход;
    РезультатПробитияЧека = ПробитьЧекСчетмаш(
            ТипОперацииРегистрации,
            ТекущаяСтрокаОплаты);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьВозвратПриходаЧека(Команда)
    ТекущаяСтрокаОплаты = ЭтотОбъект.Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;
    Если ТекущаяСтрокаОплаты = Неопределено Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана строка оплаты");
        Возврат;
    КонецЕсли;

    РезультатДиалога = Ждать ВопросАсинх(СтрШаблон(
                "Будет выполнен возврат регистрации чека ""Приход"" для контрагента: %1
                |Продолжить?", ТекущаяСтрокаОплаты.Контрагент), РежимДиалогаВопрос.ДаНет, 0, , "Возврат чека (приход)");

    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат; // Отказ пользователя
    КонецЕсли;

    РезультатПробитияЧека = ВозвратПриходаЧекаСчетмаш(ТекущаяСтрокаОплаты);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуСтатусаЧека(Команда)
    ТекущаяСтрокаОплаты = ЭтотОбъект.Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;
    Если ТекущаяСтрокаОплаты = Неопределено Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана строка оплаты");
        Возврат;
    КонецЕсли;

    ПроверитьСтатусаЧека(ТекущаяСтрокаОплаты);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьКоррекциюПрихода(Команда)
    ТекущаяСтрокаОплаты = ЭтотОбъект.Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;
    Если ТекущаяСтрокаОплаты = Неопределено Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана строка оплаты");
        Возврат;
    КонецЕсли;

    РезультатДиалога = Ждать ВопросАсинх(СтрШаблон(
                "Будет выполнена регистрация коррекции чека ""Приход"" для контрагента: %1
                |Продолжить?", ТекущаяСтрокаОплаты.Контрагент), РежимДиалогаВопрос.ДаНет, 0, , "Регистрация коррекции чека (приход)");

    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат; // Отказ пользователя
    КонецЕсли;

    ТипОперацииРегистрации = ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека().КоррекцияПрихода;
    РезультатПробитияЧека = ПробитьЧекСчетмаш(
            ТипОперацииРегистрации,
            ТекущаяСтрокаОплаты);
КонецПроцедуры

// Устарела. Требует рефакторинг
&НаКлиенте
Процедура ПроверкаСтатусовЧеков(Команда)
    ГП_СчетмашОнлайнФорма.ПроверкаСтатусовЧеков(ЭтотОбъект);
КонецПроцедуры

// Устарела. Требует рефакторинг
&НаКлиенте
Процедура КоррекцияПриходаВсехСтрок(Команда)
    ГП_СчетмашОнлайнФорма.КоррекцияПрихода(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокиРегистрацииОплатПриАктивизацииСтроки(Элемент)
    СтандартнаяОбработка = Ложь;

    Если Элементы.СтрокиРегистрацииОплат.ТекущиеДанные <> Неопределено Тогда
        ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

        СтруктураПараметровОтбора = Новый Структура;
        // СтруктураПараметровОтбора.Вставить("Документ", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Документ);
        СтруктураПараметровОтбора.Вставить("external_id", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.external_id);

        НайденныеСтроки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.НайтиСтроки(СтруктураПараметровОтбора);

        Для Каждого ТекущаяСтрокаРасшифровки Из НайденныеСтроки Цикл
            НоваяСтрокаДляОтображения = ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрокаДляОтображения, ТекущаяСтрокаРасшифровки);
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
    Диалог = ДополнительныеПараметры.Диалог;

    Если ЗначениеЗаполнено(Период) Тогда
        ВыбранныйПериод = Диалог.Период;
        ЭтотОбъект.Объект.ДатаНачала = ВыбранныйПериод.ДатаНачала;
        ЭтотОбъект.Объект.ДатаОкончания = ВыбранныйПериод.ДатаОкончания;
    КонецЕсли;
КонецПроцедуры

#Область ЗаполнениеДанных

// Устарела. Требует рефакторинг
// Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
// ~ Переработана полностью ~
//
&НаСервере
Процедура ПолучитьОбщуюТаблицуРасшифровкиОплат()
    // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
    ТаблицаРасшифровкиОплатДляОФД = ГП_ОбменОФД.ПолучитьСвернутуюОбщуюТаблицуРасшифровкиОплатДляОФД(
            НачалоДня(ЭтотОбъект.Объект.ДатаНачала),
            КонецДня(ЭтотОбъект.Объект.ДатаОкончания),
            ?(ЭтотОбъект.ЛицевойСчет.Пустая(), Неопределено, ЭтотОбъект.ЛицевойСчет),
            ЭтотОбъект.Объект.Организация);

    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Очистить();
    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Загрузить(ТаблицаРасшифровкиОплатДляОФД);
КонецПроцедуры // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД --

&НаСервере
Функция ЗаполнитьДанныеОплатНаСервере()
    ЭтотОбъект.Объект.СтрокиРегистрацииОплат.Очистить();
    ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.Очистить();
    ЭтотОбъект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

    ДанныеЗаполнения = ГП_ОбменОФД.СобратьДанныеЧековСчетмаш(
            НачалоДня(ЭтотОбъект.Объект.ДатаНачала),
            КонецДня(ЭтотОбъект.Объект.ДатаОкончания),
            Новый Структура("Контрагент, Организация",
                ?(ЭтотОбъект.Контрагент.Пустая(), Неопределено, ЭтотОбъект.Контрагент),
                ЭтотОбъект.Объект.Организация));

    Для Каждого СтрокаДанныхЗаполнения Из ДанныеЗаполнения.ТаблицаОплат Цикл
        НоваяСтрокаОплаты = ЭтотОбъект.Объект.СтрокиРегистрацииОплат.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаты, СтрокаДанныхЗаполнения);
        НоваяСтрокаОплаты.timestamp = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанныхЗаполнения.Документ, "Дата");

        // Формирование идентификатора
        ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанныхЗаполнения.Документ, "Дата, Номер");
        ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанныхЗаполнения.Контрагент, "Код");
        НоваяСтрокаОплаты.external_id = ГП_ОбменОФД.СформироватьВнешнийИдентификаторЧекаСчетмаш(
                ДанныеДокумента, ДанныеКонтрагента);
        Если ПустаяСтрока(НоваяСтрокаОплаты.external_id) Тогда
            НоваяСтрокаОплаты.external_id = "";
            ВызватьИсключение("Ошибка формирования идентификатора");
        КонецЕсли;

        НайденныеСтрокиРасшифровки = ДанныеЗаполнения.РасшифровкаОплатДляЧеков.НайтиСтроки(
                Новый Структура("Документ, Контрагент", СтрокаДанныхЗаполнения.Документ, СтрокаДанныхЗаполнения.Контрагент));
        Для Каждого СтрокаДанныхЗаполненияРасшифровки Из НайденныеСтрокиРасшифровки Цикл
            НоваяСтрокаРасшифровки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, СтрокаДанныхЗаполненияРасшифровки);
            НоваяСтрокаРасшифровки.external_id = НоваяСтрокаОплаты.external_id;
            НоваяСтрокаРасшифровки.Аванс = ?(СтрокаДанныхЗаполненияРасшифровки.ЭтоАванс = Истина, НоваяСтрокаРасшифровки.Сумма, 0);
            НоваяСтрокаРасшифровки.Пени = ?(СтрокаДанныхЗаполненияРасшифровки.ЭтоПени = Истина, НоваяСтрокаРасшифровки.Сумма, 0);
        КонецЦикла;
    КонецЦикла;

    Возврат Истина;
КонецФункции

// Устарела. Требует рефакторинг
&НаСервере
Функция ПолучитьТаблицуОстатковВзаиморасчетовПоДокументу(Знач Документ, Знач СписокЛицевыхСчетов, Знач Услуга = Неопределено)
    Если ТипЗнч(СписокЛицевыхСчетов) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
        СписокЛицевыхСчетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокЛицевыхСчетов);
    КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
        |    ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
        |    ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
        |    ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
        |ИЗ
        |    РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
        |       &Дата,
        |       ЛицевойСчет В (&СписокЛицевыхСчетов)
        |       И &ДополнительныеУсловия) КАК ВзаиморасчетыПоЛицевымСчетамОстатки
        |";

    ДополнительныеУсловияТаблицы = "ИСТИНА";
    Если Услуга <> Неопределено Тогда
        ДополнительныеУсловияТаблицы = СтрШаблон("%1 И (Услуга = &Услуга)", ДополнительныеУсловияТаблицы);
        Запрос.УстановитьПараметр("Услуга", Услуга);
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеУсловияТаблицы", ДополнительныеУсловияТаблицы);

    Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
    Запрос.УстановитьПараметр("Дата", Новый Граница(Документ.МоментВремени(), ВидГраницы.Включая));

    Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти // ЗаполнениеДанных

#Область РаботаСЧеками

&НаКлиенте
Функция ПробитьЧекСчетмаш(Знач ТипОперации, ТекущаяСтрокаОплаты)
    РезультатФункции = Новый Структура("Успех, Результат", Истина);

    РезультатПроверкиСтатуса = ПроверитьСтатусаЧека(ТекущаяСтрокаОплаты);
    Если (РезультатПроверкиСтатуса.Успех И РезультатПроверкиСтатуса.Статус = "success")
        И (ТипОперации <> ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека().КоррекцияПрихода
            И ТипОперации <> ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека().ВозвратПрихода) Тогда

        ОбщегоНазначенияКлиент.СообщитьПользователю("Чек уже пробит.");

        РезультатФункции.Успех = Ложь;
        РезультатФункции.Результат = РезультатПроверкиСтатуса;

        Возврат РезультатФункции;

    ИначеЕсли РезультатПроверкиСтатуса.Успех = Ложь
        И (ТипОперации = ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека().КоррекцияПрихода
            ИЛИ ТипОперации = ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека().ВозвратПрихода) Тогда

        ОбщегоНазначенияКлиент.СообщитьПользователю("Чек должен быть зарегистрирован до коррекции/возврата.");
        Возврат РезультатФункции;
    КонецЕсли;

    ДанныеДляОтправкиСчетмаш = ГП_СчетмашAPIКлиентСервер.НовыйСтруктураРегистрацииЧескаСчетмаш(Истина);
    ДанныеДляОтправкиСчетмаш.external_id = ТекущаяСтрокаОплаты.external_id;
    ДанныеДляОтправкиСчетмаш.timestamp = Формат(ТекущаяСтрокаОплаты.timestamp, "ДФ='dd.MM.yyyy hh:mm:ss'");

    НайденныеСтрокиРасшифровки = ЭтотОбъект.Объект.РасшифровкаРегистрацийОплат.НайтиСтроки(
            Новый Структура("external_id", ДанныеДляОтправкиСчетмаш.external_id));
    Если НайденныеСтрокиРасшифровки.Количество() > 100 Тогда
        ВызватьИсключение("Ошибка. Количество строк расшифровки чека превышает максимальное количество: (100)");
    КонецЕсли;

    Для Каждого ТекущаяСтрокаРасшифровки Из НайденныеСтрокиРасшифровки Цикл
        СтруктураЭлементаЧека = ГП_СчетмашAPIКлиентСервер.НовыйСтруктураРасшифровкиСтрокиОплатыРегистрацииЧескаСчетмаш(Истина);
        СтруктураЭлементаЧека.name = СокрЛП(ТекущаяСтрокаРасшифровки.ВидУслугиПредставление);
        СтруктураЭлементаЧека.type =
            ГП_СчетмашAPIКлиентСервер.ПолучитьПризнакПредметаРасчетаСчетмашПоЗначению(ТекущаяСтрокаРасшифровки.ПризнакПредметаРасчета);
        СтруктураЭлементаЧека.mode =
            ГП_СчетмашAPIКлиентСервер.ПолучитьПризнакСпособаРасчетаСчетмашПоЗначению(ТекущаяСтрокаРасшифровки.ПризнакСпособаРасчета);
        СтруктураЭлементаЧека.price = ТекущаяСтрокаРасшифровки.Сумма; // Тариф
        СтруктураЭлементаЧека.quantity = 1; // Количество
        СтруктураЭлементаЧека.sum = ТекущаяСтрокаРасшифровки.Сумма; // Сумма
        СтруктураЭлементаЧека.tax =
            ГП_СчетмашAPIКлиентСервер.ПолучитьСтавкуНДССчетмашПоЗначению(ТекущаяСтрокаРасшифровки.СтавкаНДС); // СтавкаНДС
        СтруктураЭлементаЧека.tax_sum = Окр(УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрокаРасшифровки.Сумма,
                    Истина, ТекущаяСтрокаРасшифровки.ЗначениеСтавкиНДС), 2); // Сумма НДС

        ДанныеДляОтправкиСчетмаш.receipt.items.Добавить(СтруктураЭлементаЧека);
    КонецЦикла;

    ДанныеДляОтправкиСчетмаш.receipt.total = ТекущаяСтрокаОплаты.Сумма; // Сумма чека

    СтруктураСтрокиОплатыРегистрацииЧеска = ГП_СчетмашAPIКлиентСервер.НовыйСтруктураСтрокиОплатыРегистрацииЧескаСчетмаш(Истина);
    СтруктураСтрокиОплатыРегистрацииЧеска.sum = ТекущаяСтрокаРасшифровки.Сумма;
    ДанныеДляОтправкиСчетмаш.receipt.payments.Добавить(СтруктураСтрокиОплатыРегистрацииЧеска);

    РезультатРегистрацииЧека = ВыполнитьРегистрациюЧекаНаСервере(
            ДанныеДляОтправкиСчетмаш, ТипОперации, ЭтотОбъект.Объект.ИдентификаторМагазина, ЭтотОбъект.Объект.Логин);

    Если РезультатРегистрацииЧека.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатРегистрацииЧека.ТекстСообщения);
        Возврат РезультатФункции; // Ошибка регистрации чека
    КонецЕсли;

    ТекущаяСтрокаОплаты.id_Чека = РезультатРегистрацииЧека.ДанныеОтвета.Идентификатор;
    ТекущаяСтрокаОплаты.status = РезультатРегистрацииЧека.ДанныеОтвета.Статус;
    ОбщегоНазначенияКлиент.СообщитьПользователю("Регистрация чека выполнена успешно");

    РезультатФункции.Результат = РезультатРегистрацииЧека.ДанныеОтвета;

    Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ВозвратПриходаЧекаСчетмаш(ТекущаяСтрокаОплаты)
    ТипОперации = ГП_СчетмашAPIКлиентСервер.НовыйТипыОперацииРегистрацииЧека().ВозвратПрихода;
    Возврат ПробитьЧекСчетмаш(ТипОперации, ТекущаяСтрокаОплаты);
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьРегистрациюЧекаНаСервере(Знач ДанныеДляОтправкиСчетмаш, Знач ТипОперации, Знач ИдентификаторМагазина, Знач Логин)
    РезультатРегистрацииЧека = ГП_СчетмашAPI.ВыполнитьРегистрациюЧека(
            ДанныеДляОтправкиСчетмаш, ТипОперации, ИдентификаторМагазина, Логин);
    Возврат РезультатРегистрацииЧека;
КонецФункции

&НаКлиенте
Функция ПроверитьСтатусаЧека(Знач ТекущаяСтрокаОплаты)
    РезультатПроверкиСтатуса = ПолучитьСтатусЧекаСчетмашНаСервере(
            Новый Структура("external_id", ТекущаяСтрокаОплаты.external_id),
            ЭтотОбъект.Объект.ИдентификаторМагазина,
            ЭтотОбъект.Объект.Логин);

    Если РезультатПроверкиСтатуса.Успех = Ложь Тогда
        ТекущаяСтрокаОплаты.status = РезультатПроверкиСтатуса.Статус;
        ТекущаяСтрокаОплаты.id_Чека = РезультатПроверкиСтатуса.Идентификатор;
        ТекущаяСтрокаОплаты.total = 0;

        Возврат РезультатПроверкиСтатуса;
    КонецЕсли;

    ТекущаяСтрокаОплаты.status = РезультатПроверкиСтатуса.Статус;
    ТекущаяСтрокаОплаты.id_Чека = РезультатПроверкиСтатуса.Идентификатор;
    ТекущаяСтрокаОплаты.total = ?(РезультатПроверкиСтатуса.РеквизитыФискализацииДокумента.СуммаЧека = Неопределено,
            0, РезультатПроверкиСтатуса.РеквизитыФискализацииДокумента.СуммаЧека);

    Возврат РезультатПроверкиСтатуса;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтатусЧекаСчетмашНаСервере(Знач СтруктураИдентификатора, Знач ИдентификаторМагазина, Знач Логин)
    РезультатФункции = Новый Структура("Успех, Статус, Идентификатор, МоментВремени, РеквизитыФискализацииДокумента");

    РезультатПроверкиСтатуса = ГП_СчетмашAPI.ПолучитьСтатусЧекаСчетмаш(
            СтруктураИдентификатора, ИдентификаторМагазина, Логин);

    РезультатФункции.Успех = РезультатПроверкиСтатуса.Успех;

    Если РезультатПроверкиСтатуса.Успех = Ложь Тогда
        ОбщегоНазначения.СообщитьПользователю(РезультатПроверкиСтатуса.ТекстСообщения);
        Если РезультатПроверкиСтатуса.Свойство("Статус") Тогда
            РезультатФункции.Статус = РезультатПроверкиСтатуса.Статус;
        КонецЕсли;
        Если РезультатПроверкиСтатуса.Свойство("Идентификатор") Тогда
            РезультатФункции.Идентификатор = РезультатПроверкиСтатуса.Идентификатор;
        КонецЕсли;

        РезультатПроверкиСтатуса.Успех = Ложь;
        Возврат РезультатФункции;
    КонецЕсли;

    РезультатФункции.Идентификатор = РезультатПроверкиСтатуса.ДанныеОтвета.Идентификатор;
    РезультатФункции.Статус = РезультатПроверкиСтатуса.ДанныеОтвета.Статус;

    РезультатФункции.РеквизитыФискализацииДокумента = Новый Структура;
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "СуммаЧека", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "total"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "НомерЧекаВСмене", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "fiscal_receipt_number"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "НомерСмены", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "shift_number"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "ДатаДокументаИзФН", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "receipt_datetime"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "НомерФН", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "fn_number"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "НомерККТ", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "ecr_registration_number"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "ФискальныйНомерДокумента", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "fiscal_document_number"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "ФискальныйПризнакДокумента", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "fiscal_document_attribute"));
    РезультатФункции.РеквизитыФискализацииДокумента.Вставить(
        "АдресСайтаФНС", ПолучитьЗначениеСвойстваНаСервере(
            РезультатПроверкиСтатуса.ДанныеОтвета.Данные, "fns_site"));

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // РаботаСЧеками

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСвойстваНаСервере(Знач Контейнер, Знач Ключ, Знач ЗначениеПоУмолчанию = Неопределено)
    РезультатФункции = ЗначениеПоУмолчанию;
    Попытка
        РезультатФункции = Контейнер[Ключ];
    Исключение
        РезультатФункции = ЗначениеПоУмолчанию;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
