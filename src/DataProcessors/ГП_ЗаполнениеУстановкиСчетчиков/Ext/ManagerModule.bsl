// ++ Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
#Область ПрограммныйИнтерфейс

// Устарела. Требует рефакторинг
//
// Создает документы Установка счетчика и Ввод показаний (начальных) счетчика
// Параметры:
//  ДатаДокумента - Дата, Неопределено
//  СчетчикиПоСреднимМетодуРасчета - Булево
// Возвращаемое значение:
//  - Структура:
//      * Успех - Булево
//      * УстановленныеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * СообщениеОбОшибке - Строка, Неопределено
Функция СоздатьДокументыУстановкиСчетчиковБезВводаПоказаний(
        Знач ДатаДокумента = Неопределено, Знач СчетчикиПоСреднимМетодуРасчета = Ложь) Экспорт

    РезультатФункции = Новый Структура("Успех, УстановленныеСчетчики, СообщениеОбОшибке", Истина, Новый Массив);

    ДатаВключенияПоУмолчанию = Дата(2024, 01, 01);

    ДатаДокумента = ?(ДатаДокумента = Неопределено, ТекущаяДатаСеанса(), ДатаДокумента);

    // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему ++
    ДанныеДляЗаполнения = Неопределено;
    Если СчетчикиПоСреднимМетодуРасчета = Ложь Тогда
        // Устанавливается обычный счетчик
        ДанныеДляЗаполнения = ГП_МиграцияПриборовУчета.ПолучитьДанныеДляУстановкиСчетчиков(ДатаДокумента);
    Иначе
        // Устанавливается виртуальный счетчик
        ДанныеДляЗаполнения = ГП_МиграцияПриборовУчета.ПолучитьДанныеДляУстановкиСчетчиковПоСреднему(ДатаДокумента);
    КонецЕсли;
    // Гарант+ Килипенко 03.10.2024 [F00229366] создание и установка счетчиков с методом по среднему --

    Если ДанныеДляЗаполнения.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Заполнение шапки документа КВП_УстановкаСчетчика
    НовыйУстановкаСчетчиковОбъект = Документы.КВП_УстановкаСчетчика.СоздатьДокумент();
    НовыйУстановкаСчетчиковОбъект.Дата = ДатаДокумента;
    НовыйУстановкаСчетчиковОбъект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУстановкаСчетчика.ВключитьСчетчик;
    НовыйУстановкаСчетчиковОбъект.ВвестиНачальныеИлиКонечныеПоказания = Ложь; // Показания счетчиков не вводятся
    НовыйУстановкаСчетчиковОбъект.Ответственный = Пользователи.ТекущийПользователь();
    НовыйУстановкаСчетчиковОбъект.Комментарий = "#создан автоматически по данным из БП 7.7 (ГарантПлюс)";

    Если СчетчикиПоСреднимМетодуРасчета = Ложь Тогда
        // Заполнение шапки документа УПЖКХ_ВводПоказанийСчетчика
        НовыйВводПоказаний = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
        НовыйВводПоказаний.Дата = ДатаДокумента;
        НовыйВводПоказаний.ВводНачальныхПоказаний = Истина;
        НовыйВводПоказаний.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет;
        НовыйВводПоказаний.Ответственный = Пользователи.ТекущийПользователь();
        НовыйВводПоказаний.Комментарий = "#создан автоматически по данным из БП 7.7 (ГарантПлюс)";
    КонецЕсли;

    // Заполнение ТЧ Главная
    Для Каждого СтрокаДанных Из ДанныеДляЗаполнения Цикл
        // КВП_УстановкаСчетчика
        НоваяЗаписьУстановки = НовыйУстановкаСчетчиковОбъект.Главная.Добавить();
        НоваяЗаписьУстановки.Объект = СтрокаДанных.ЛицевойСчет;
        НоваяЗаписьУстановки.Счетчик = СтрокаДанных.Счетчик;
        Если СчетчикиПоСреднимМетодуРасчета = Ложь Тогда
            // По согласованию с Заказчиком - если дата установки не указана, устанавливаем на 01.01.2024г.
            НоваяЗаписьУстановки.ДатаВключения = ?(ЗначениеЗаполнено(СтрокаДанных.ДатаУстановки),
                    СтрокаДанных.ДатаУстановки, ДатаВключенияПоУмолчанию);
            НоваяЗаписьУстановки.ДатаПоверки = СтрокаДанных.ДатаБудущейПоверки;
            // Когда ДатаПоверки < ДатаВключения - документ не проводится
            //  Временно ДатаВключения устанавливается равным ДатаПоверки, т.е. ДатаВключения = ДатаПоверки
            Если ЗначениеЗаполнено(НоваяЗаписьУстановки.ДатаПоверки)
                И НоваяЗаписьУстановки.ДатаПоверки < НоваяЗаписьУстановки.ДатаВключения Тогда

                НоваяЗаписьУстановки.ДатаВключения = НоваяЗаписьУстановки.ДатаПоверки;
            КонецЕсли;
        Иначе
            НоваяЗаписьУстановки.ДатаВключения = ДатаВключенияПоУмолчанию;
        КонецЕсли;

        Если НовыйВводПоказаний <> Неопределено И СтрокаДанных.Показание <> Неопределено Тогда
            // УПЖКХ_ВводПоказанийСчетчика
            НоваяЗаписьПоказаний = НовыйВводПоказаний.Главная.Добавить();
            НоваяЗаписьПоказаний.Объект = СтрокаДанных.ЛицевойСчет;
            НоваяЗаписьПоказаний.Услуга = СтрокаДанных.Услуга;
            НоваяЗаписьПоказаний.Счетчик = СтрокаДанных.Счетчик;
            НоваяЗаписьПоказаний.ДатаПоказания = СтрокаДанных.ДатаПоказания;
            НоваяЗаписьПоказаний.ДневноеПоказание = СтрокаДанных.Показание;
            НоваяЗаписьПоказаний.КоэффициентТрансформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Счетчик, "Коэффициент");
            НоваяЗаписьПоказаний.Разрядность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Счетчик, "Разрядность");
            НоваяЗаписьПоказаний.ТемпературныйКоэффициент = 1.0; //! Уточнить
            НоваяЗаписьПоказаний.КоэффициентЧислитель = 1.0; //! Уточнить
            НоваяЗаписьПоказаний.КоэффициентЗнаменатель = 1.0; //! Уточнить
        КонецЕсли;

        // Заполнение результата
        РезультатФункции.УстановленныеСчетчики.Добавить(СтрокаДанных.Счетчик);
    КонецЦикла;

    // Запись документа
    НачатьТранзакцию();
    Попытка
        НовыйУстановкаСчетчиковОбъект.Записать(РежимЗаписиДокумента.Запись);
        Если НовыйВводПоказаний <> Неопределено Тогда
            НовыйВводПоказаний.Записать(РежимЗаписиДокумента.Запись);
        КонецЕсли;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при создании документа Установка счетчика (Ввод показаний) при заполнении по данным из БП 7.7.",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.УстановленныеСчетчики.Очистить();
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// -- Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --
