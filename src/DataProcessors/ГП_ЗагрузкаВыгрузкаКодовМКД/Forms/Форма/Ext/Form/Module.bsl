#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ВыгрузитьJSON(Команда)
    ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
    ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
    ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'JSON'; en = 'JSON'") + "(*.json)|*.json";
    ДиалогСохраненияФайла.Заголовок = "Выберите (укажите) файл для сохранения";

    РезультатДиалога = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();
    Если РезультатДиалога = Неопределено ИЛИ РезультатДиалога.Количество() = 0 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Файл для сохранения не указан");
        Возврат;
    КонецЕсли;

    ИмяФайлаДляСохранения = РезультатДиалога[0];

    // Заполнение документа
    ДанныеJSON = ПолучитьСтруктуруДанныхJSONНаСервере();
    ДанныеJSON = ЗаписатьЗначениеJSON(ДанныеJSON);

    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    ТекстовыйДокумент.ДобавитьСтроку(ДанныеJSON);

    РезультатЗаписи = Неопределено;
    Попытка
        РезультатЗаписи = Ждать ТекстовыйДокумент.ЗаписатьАсинх(ИмяФайлаДляСохранения, КодировкаТекста.UTF8);
    Исключение
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "Ошибка при записи файла.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
    КонецПопытки;

    Если РезультатЗаписи <> Истина Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Запись не выполнена");
        Возврат;
    КонецЕсли;

    ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("Данные кодов МКД записаны в файл: %1", ИмяФайлаДляСохранения));
КонецПроцедуры

// Загружает данные кодов МКД из файла
&НаКлиенте
Асинх Процедура ЗагрузитьJSON(Команда)
    РезультатДиалога = Ждать ГП_ОбщегоНазначенияКлиент.СпроситьПользователяОГотовностиВыполнятьОперациюАсинх(
            "Будет выполнена процедура загрузки кодов МКД в табличную часть.");
    Если РезультатДиалога = Ложь Тогда
        Возврат;
    КонецЕсли;

    ОткрытьФайлJSONДляЧтения("ЗагрузитьДанныеКодовМКДJSON");
КонецПроцедуры

&НаКлиенте
Асинх Процедура Заполнить(Команда)
    РезультатДиалога = Ждать ВопросАсинх(
            СтрШаблон(
                "Таблица кодов МКД будет%1 заполнена.
                |Продолжить?",
                " очищена и"), РежимДиалогаВопрос.ДаНет, , , "Внимание!");
    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;

    ЗаполнитьТаблицуНаСервере();
КонецПроцедуры

// Сохраняет значения кодов МКД л/с в ИБ (обновление кодов МКД л/с)
&НаКлиенте
Асинх Процедура ЗаписатьЗначенияКодовМКД(Команда)
    РезультатДиалога = Ждать ВопросАсинх(
            СтрШаблон(
                "Значения кодов МКД л/с будут перезаписаны по данным табличной части обработки.
                |Продолжить?"), РежимДиалогаВопрос.ДаНет, , , "Внимание!");
    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;

    РезультатЗаписи = ПерезаписатьЗначенияКодовМКДНаСервере();
    Если РезультатЗаписи.Успех = Ложь Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗаписи.ТекстСообщения);
    Иначе
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "Успех! Перезаписано ""%1"" элементов лицевых счетов", РезультатЗаписи.ИзмененныеЛицевыеСчета.Количество()));
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПерезаписатьЗначенияКодовМКДНаСервере()
    РезультатФункции = Новый Структура("Успех, ИзмененныеЛицевыеСчета, ТекстСообщения", Истина, Новый Массив);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ДанныеОбмена.ЛицевойСчет КАК ЛицевойСчет,
        |   ДанныеОбмена.Наименование КАК Наименование,
        |   ДанныеОбмена.lc_КодМКД КАК lc_КодМКД,
        |   ДанныеОбмена.Идентификатор КАК Идентификатор,
        |   ДанныеОбмена.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ДанныеОбмена.ОтветственныйСобственникПредставление КАК ОтветственныйСобственникПредставление
        |ПОМЕСТИТЬ ВТ_ДанныеОбмена
        |ИЗ
        |   &ДанныеОбмена КАК ДанныеОбмена
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |   ЛицевыеСчета.Наименование КАК Наименование,
        |   ЛицевыеСчета.lc_КодМКД КАК КодМКД,
        |   ВТ_ДанныеОбмена.lc_КодМКД КАК КодМКДЗамены,
        |   ЛицевыеСчета.Идентификатор КАК Идентификатор,
        |   ЛицевыеСчета.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ЛицевыеСчета.ОтветственныйСобственникПредставление КАК ОтветственныйСобственникПредставление
        |ИЗ
        |   Справочник.КВП_ЛицевыеСчета КАК ЛицевыеСчета
        |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеОбмена КАК ВТ_ДанныеОбмена
        |   ПО ЛицевыеСчета.Ссылка = ВТ_ДанныеОбмена.ЛицевойСчет
        |       И НЕ ВТ_ДанныеОбмена.ЛицевойСчет ЕСТЬ NULL
        |";

    Запрос.УстановитьПараметр("ДанныеОбмена", ЭтотОбъект.Объект.ДанныеОбмена.Выгрузить());

    РезультатЗапроса = Запрос.Выполнить();
    ДанныеЗаполнения = РезультатЗапроса.Выгрузить();

    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
            Если СтрокаДанных.КодМКД = СтрокаДанных.КодМКДЗамены Тогда
                Продолжить;
            КонецЕсли;

            ЛицевойСчетОбъект = СтрокаДанных.ЛицевойСчет.ПолучитьОбъект();
            ЛицевойСчетОбъект.lc_КодМКД = СтрокаДанных.КодМКДЗамены;
            ЛицевойСчетОбъект.Записать();
            РезультатФункции.ИзмененныеЛицевыеСчета.Добавить(ЛицевойСчетОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ИзмененныеЛицевыеСчета.Очистить();
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка при изменении кодов МКД.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуНаСервере()
    ЭтотОбъект.Объект.ДанныеОбмена.Очистить();

    ДанныеЗаполнения = ГП_РаботаСЛицевымиСчетами.ПолучитьТаблицуВсехКодовМКД();

    Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
        Если ПустаяСтрока(СтрокаДанных.Идентификатор) И ПустаяСтрока(СтрокаДанных.ГП_ИдентификаторБП77) Тогда
            Если ПустаяСтрока(СтрокаДанных.lc_КодМКД) = Ложь Тогда
                ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                        "ВНИМАНИЕ! Для л/с: ""%1"" не заполнены идентификаторы - строка игнорируется.",
                        Строка(СтрокаДанных.ЛицевойСчет)));
            КонецЕсли;
            Продолжить; // Нет идентификатора
        КонецЕсли;

        НоваяСтрокаСоответствий = ЭтотОбъект.Объект.ДанныеОбмена.Добавить();
        НоваяСтрокаСоответствий.ЛицевойСчет = СтрокаДанных.ЛицевойСчет;
        НоваяСтрокаСоответствий.lc_КодМКД = СтрокаДанных.lc_КодМКД;
        НоваяСтрокаСоответствий.Идентификатор = СтрокаДанных.Идентификатор;
        НоваяСтрокаСоответствий.ГП_ИдентификаторБП77 = СтрокаДанных.ГП_ИдентификаторБП77;
        НоваяСтрокаСоответствий.Наименование = СтрокаДанных.Наименование;
        НоваяСтрокаСоответствий.ОтветственныйСобственникПредставление = СтрокаДанных.ОтветственныйСобственникПредставление;
    КонецЦикла;

    Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлJSONДляЧтения(Знач КомандаОбработки)
    ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
    ПараметрыЗагрузкиФайла.Диалог.Заголовок = НСтр("ru = 'Выберите файл JSON для загрузки'");
    ПараметрыЗагрузкиФайла.Диалог.Фильтр = НСтр("ru = 'Файлы JSON (*.json)|*.json'");
    ПараметрыЗагрузкиФайла.ИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
    ФайловаяСистемаКлиент.ЗагрузитьФайлы(Новый ОписаниеОповещения("ЗагрузкаФайлаЗавершение",
            ЭтотОбъект, Новый Структура("КомандаОбработки", КомандаОбработки)), ПараметрыЗагрузкиФайла);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеКодовМКДJSON(Знач СтруктураФайла)
    РезультатЗагрузки = ЗагрузитьДанныеКодовМКДJSONНаСервере(СтруктураФайла.Хранение);

    ТекстСообщенияРезультатОперации = "";
    Если РезультатЗагрузки.Успех = Ложь Тогда
        ТекстСообщенияРезультатОперации = СтрШаблон("Загрузка данных кодов МКД не выполнена.
                |Подробная информация: %1", РезультатЗагрузки.ТекстСообщения);
    Иначе
        ЗаполнитьДанныеОбменаИзВнешнихДанныхНаСервере(РезультатЗагрузки.КодыМКД);

        ТекстСообщенияРезультатОперации = СтрШаблон("Загрузка данных кодов МКД  выполнена успешно");
    КонецЕсли;

    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияРезультатОперации);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьДанныеКодовМКДJSONНаСервере(Знач АдресФайла, Знач КодировкаФайла = Неопределено)
    РезультатФункции = Новый Структура("Успех, КодыМКД, ТекстСообщения", Истина);

    КодировкаФайла = ?(КодировкаФайла = Неопределено, "UTF-8", КодировкаФайла);

    ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
    Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = НСтр("ru = 'Не удалось получить данные для загрузки'");

        Возврат РезультатФункции;
    КонецЕсли;

    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
    ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла, КодировкаФайла);
    ДанныеДокумента = ПрочитатьJSON(ЧтениеJSON);

    // Удаляем временный файл
    Попытка
        УдалитьФайлы(ИмяВременногоФайла);
    Исключение
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Загрузка данных счетчиков из JSON'"),
            УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Если ТипЗнч(ДанныеДокумента) <> Тип("Структура") ИЛИ ДанныеДокумента.Свойство("КодыМКД") = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных документа";

        Возврат РезультатФункции;
    КонецЕсли;

    РезультатФункции.КодыМКД = ДанныеДокумента.КодыМКД;
    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхJSONНаСервере()
    СтруктураРезультатаJSON = Новый Структура("КодыМКД");
    СтруктураРезультатаJSON.КодыМКД = Новый Массив;

    Для Каждого СтрокаДанных Из ЭтотОбъект.Объект.ДанныеОбмена Цикл
        НовыйЭлементСчетчика = Новый Структура(
                "Наименование, lc_КодМКД, Идентификатор, ГП_ИдентификаторБП77, ОтветственныйСобственникПредставление",
                "", "", "", "", "");
        ЗаполнитьЗначенияСвойств(НовыйЭлементСчетчика, СтрокаДанных);
        СтруктураРезультатаJSON.КодыМКД.Добавить(НовыйЭлементСчетчика);
    КонецЦикла;

    Возврат СтруктураРезультатаJSON;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьМассивСтруктурЛицевыхСчетовВТаблицуНаСервере(Знач МассивСтруктурЛС)
    РезультатФункции = НовыйТаблицаЛицевыхСчетов();

    Для Каждого СтрокаДанных Из МассивСтруктурЛС Цикл
        НоваяСтрока = РезультатФункции.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

&НаСервереБезКонтекста
Функция НовыйТаблицаЛицевыхСчетов()
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("lc_КодМКД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
    РезультатФункции.Колонки.Добавить("ГП_ИдентификаторБП77", ОбщегоНазначения.ОписаниеТипаСтрока(32));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("ОтветственныйСобственникПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(100));

    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ЗаполнитьДанныеОбменаИзВнешнихДанныхНаСервере(Знач ИсходныеДанныеЗаполнения)
    ИсходныеДанныеЗаполнения = ПреобразоватьМассивСтруктурЛицевыхСчетовВТаблицуНаСервере(ИсходныеДанныеЗаполнения);

    МВТ = Новый МенеджерВременныхТаблиц;
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ПОМЕСТИТЬ ВТ_ИсходныеДанныеЗаполнения
        |ИЗ
        |   &ИсходныеДанныеЗаполнения КАК ИсходныеДанныеЗаполнения
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
        |   ВТ_ИсходныеДанныеЗаполнения.Наименование КАК Наименование,
        |   ВТ_ИсходныеДанныеЗаполнения.lc_КодМКД КАК lc_КодМКД,
        |   ВТ_ИсходныеДанныеЗаполнения.Идентификатор КАК Идентификатор,
        |   ВТ_ИсходныеДанныеЗаполнения.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВТ_ИсходныеДанныеЗаполнения.ОтветственныйСобственникПредставление КАК ОтветственныйСобственникПредставление
        |ПОМЕСТИТЬ ВТ_ВсеДанныеКодовМКД
        |ИЗ
        |   ВТ_ИсходныеДанныеЗаполнения КАК ВТ_ИсходныеДанныеЗаполнения
        |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК ЛицевыеСчета
        |   ПО ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
        |       И (ЛицевыеСчета.ГП_ИдентификаторБП77 + ЛицевыеСчета.Идентификатор) <> """"
        |       И ЛицевыеСчета.Наименование = ВТ_ИсходныеДанныеЗаполнения.Наименование
        |       И ЛицевыеСчета.Идентификатор = ВТ_ИсходныеДанныеЗаполнения.Идентификатор
        |       И ЛицевыеСчета.ГП_ИдентификаторБП77 = ВТ_ИсходныеДанныеЗаполнения.ГП_ИдентификаторБП77
        |;
        |";

    Запрос.УстановитьПараметр("ИсходныеДанныеЗаполнения", ИсходныеДанныеЗаполнения);
    РезультатЗапроса = Запрос.Выполнить();

    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    Запрос.Текст =
        "///////////////////////////////////////
        |// Результат [0]
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_ВсеДанныеКодовМКД.ЛицевойСчет КАК ЛицевойСчет,
        |   ВТ_ВсеДанныеКодовМКД.Наименование КАК Наименование,
        |   ВТ_ВсеДанныеКодовМКД.lc_КодМКД КАК lc_КодМКД,
        |   ВТ_ВсеДанныеКодовМКД.Идентификатор КАК Идентификатор,
        |   ВТ_ВсеДанныеКодовМКД.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВТ_ВсеДанныеКодовМКД.ОтветственныйСобственникПредставление КАК ОтветственныйСобственникПредставление
        |ИЗ
        |   ВТ_ВсеДанныеКодовМКД КАК ВТ_ВсеДанныеКодовМКД
        |ГДЕ
        |   НЕ ВТ_ВсеДанныеКодовМКД.ЛицевойСчет ЕСТЬ NULL
        |;
        |
        |///////////////////////////////////////
        |// Результат [1] Не найденные соответствия
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_ВсеДанныеКодовМКД.Наименование КАК Наименование,
        |   ВТ_ВсеДанныеКодовМКД.lc_КодМКД КАК lc_КодМКД,
        |   ВТ_ВсеДанныеКодовМКД.Идентификатор КАК Идентификатор,
        |   ВТ_ВсеДанныеКодовМКД.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВТ_ВсеДанныеКодовМКД.ОтветственныйСобственникПредставление КАК ОтветственныйСобственникПредставление
        |ИЗ
        |   ВТ_ВсеДанныеКодовМКД КАК ВТ_ВсеДанныеКодовМКД
        |ГДЕ
        |   ВТ_ВсеДанныеКодовМКД.ЛицевойСчет ЕСТЬ NULL
        |;
        |";

    РезультатЗапроса = Запрос.ВыполнитьПакет();

    ИсходныеДанныеЗаполнения = Неопределено;
    ДанныеЗаполнения = РезультатЗапроса[0].Выгрузить();
    НенайденныеСоответствия = РезультатЗапроса[1].Выгрузить();

    // Вывод сообщений о ненайденных соответствиях для установки кодов МКД л/с
    Для Каждого СтрокаДанных Из НенайденныеСоответствия Цикл
        ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                "ВНИМАНИЕ! Не найдено соответствие лицевых счетов: ""%1"", ид: ""%2""",
                СтрокаДанных.Наименование, СтрокаДанных.Идентификатор));
    КонецЦикла;

    // Заполнение таблицы кодов МКД
    Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
        НоваяСтрока = ЭтотОбъект.Объект.ДанныеОбмена.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
    КонецЦикла;

    Возврат Истина;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ФоновыеОперацииИнфраструктура

&НаКлиенте
Процедура ЗагрузкаФайлаЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
    Если ТипЗнч(ПомещенныеФайлы) <> Тип("Массив") Тогда
        Возврат;
    КонецЕсли;

    Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
        И ДополнительныеПараметры.Свойство("КомандаОбработки")
        И ДополнительныеПараметры.КомандаОбработки = "ЗагрузитьДанныеКодовМКДJSON" Тогда

        ЗагрузитьДанныеКодовМКДJSON(ПомещенныеФайлы[0]);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ФоновыеОперацииИнфраструктура
