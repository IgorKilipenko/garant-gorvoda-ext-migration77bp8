// Гарант+ Килипенко 11.12.2024 [F00231508] Создание ПФ "Договор подряда" и "Акт выполненных работ к договору подряда" ++
#Область ПрограммныйИнтерфейс

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГП_ДоговорПодряда") Тогда
        ДокументДляПечати = Новый ТабличныйДокумент;
        Попытка
            ДокументДляПечати = СформироватьПечатнуюФормуДоговораПодряда(
                    МассивОбъектов, ОбъектыПечати);
        Исключение
            ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Ошибка формирования печатной формы. %1",
                    ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
        КонецПопытки;

        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
            КоллекцияПечатныхФорм,
            "ГП_ДоговорПодряда",
            НСтр("ru = 'Договор подряда'"),
            ДокументДляПечати);

    ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГП_АктПриемкиВыполненныхРаботДоговора") Тогда
        ДокументДляПечати = Новый ТабличныйДокумент;
        Попытка
            ДокументДляПечати = СформироватьПечатнуюФормуАктаПриемкиВыполненныхРаботДоговора(
                    МассивОбъектов, ОбъектыПечати);
        Исключение
            ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Ошибка формирования печатной формы. %1",
                    ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
        КонецПопытки;

        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
            КоллекцияПечатныхФорм,
            "ГП_АктПриемкиВыполненныхРаботДоговора",
            НСтр("ru = 'Акт приемки выполненных работ к договору'"),
            ДокументДляПечати);
    КонецЕсли;
КонецПроцедуры

// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка.КВП_НачислениеУслуг
//  ОбъектыПечати
//  Макет - ТабличныйДокумент, Неопределено
//  ПривилегированныйРежим - Булево
Функция СформироватьПечатнуюФормуДоговораПодряда(
        Знач МассивОбъектов, Знач ОбъектыПечати, Знач Макет = Неопределено, ПривилегированныйРежим = Истина) Экспорт

    Если ПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплатуПокупателю_ГП_ДоговорПодряда";
    ТабличныйДокумент.Защита = Ложь;

    Макет = ?(Макет = Неопределено, ПолучитьМакет("ГП_ПФ_ДоговорПодряда"), Макет);
    ПервыйДокумент = Истина;

    Для Каждого ДокументСсылка Из МассивОбъектов Цикл
        Если НЕ ПервыйДокумент Тогда
            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

        ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
        ОбластьТелоДоговора = Макет.ПолучитьОбласть("Тело");
        ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

        ДанныеЗаполнения = ПоучитьДанныеЗаполненияДоговораПодряда(ДокументСсылка);

        // Данные руководителя организации
        РуководительФИО = Неопределено;
        Если ДанныеЗаполнения.ДанныеДокумента.Руководитель <> Неопределено Тогда
            РуководительФИО = УчетЗарплаты.ПредставлениеФизическогоЛица(
                    ДанныеЗаполнения.ДанныеДокумента.Руководитель, ДанныеЗаполнения.ДанныеДокумента.Дата);
        Иначе
            РуководительФИО = ДанныеЗаполнения.СведенияОбОрганизации.РуководительФИО;
        КонецЕсли;

        // Заполнение шапки договора
        ДанныеДоговораКонтрагента = Новый Структура("Дата, Номер", Дата(1,1,1), "");
        Если ДанныеЗаполнения.ДанныеДокумента.ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
            ДанныеДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
                ДанныеЗаполнения.ДанныеДокумента.ДоговорКонтрагента, Новый Структура("Дата, Номер"));
        КонецЕсли;
        ОбластьШапка.Параметры.НомерДокумента = ДанныеДоговораКонтрагента.Номер;
        Если ПустаяСтрока(ОбластьШапка.Параметры.НомерДокумента) = Истина Тогда
            ОбластьШапка.Параметры.НомерДокумента = "_______";
        КонецЕсли;
        ОбластьШапка.Параметры.Дата = Формат(ДанныеДоговораКонтрагента.Дата, "ДФ='дд ММММ гггг'") + " г.";
        Если ОбластьШапка.Параметры.Дата = " г." Тогда
            ОбластьШапка.Параметры.Дата = СтрШаблон("""__"" ______ ____%1", ОбластьШапка.Параметры.Дата);
        КонецЕсли;

        ОбластьШапка.Параметры.Заказчик = ДанныеЗаполнения.ДанныеДокумента.Контрагент;
        ОбластьШапка.Параметры.ПредставлениеЗаказчика = ДанныеЗаполнения.СведенияОКонтрагенте.ПолноеНаименование;
        ОбластьШапка.Параметры.АдресЗаказчика = ?(ПустаяСтрока(ДанныеЗаполнения.СведенияОКонтрагенте.ЮридическийАдрес) = Ложь,
                ДанныеЗаполнения.СведенияОКонтрагенте.ЮридическийАдрес, ДанныеЗаполнения.СведенияОКонтрагенте.ФактическийАдрес);

        ОбластьШапка.Параметры.ПолноеНаименованиеОрганизации = ДанныеЗаполнения.СведенияОбОрганизации.ПолноеНаименование;
        Если РуководительФИО <> Неопределено Тогда
            Попытка
                ОбластьШапка.Параметры.ФИОДиректора =
                    СклонениеПредставленийОбъектов.ПросклонятьФИО(РуководительФИО.ФамилияИО, 2);
            Исключение
                ОбщегоНазначения.СообщитьПользователю("Не удалось выполнить склонение ФИО руководителя.");
            КонецПопытки;
        КонецЕсли;

        ОбластьШапка.Параметры.ДолжностьФИОЗаказчика = ?(ПустаяСтрока(ДанныеЗаполнения.СведенияОКонтрагенте.РуководительФИО) = Ложь,
                ДанныеЗаполнения.СведенияОКонтрагенте.РуководительФИО,
                ДанныеЗаполнения.СведенияОКонтрагенте.НаименованиеДляПечатныхФорм);
        Попытка
            ОбластьШапка.Параметры.ДолжностьФИОЗаказчика =
                СклонениеПредставленийОбъектов.ПросклонятьФИО(ПодготовитьПредставлениеКонтрагентаДляСклонения(
                        ОбластьШапка.Параметры.ДолжностьФИОЗаказчика), 2);
        Исключение
            ОбщегоНазначения.СообщитьПользователю("Не удалось выполнить склонение ФИО представителя заказчика.");
        КонецПопытки;

        Если ЗначениеЗаполнено(ДанныеЗаполнения.ДанныеДокумента.ГП_ВидОснованияКонтрагента) Тогда
            ОбластьШапка.Параметры.ОснованиеЗаказчика =
                Перечисления.ГП_ВидыОснованияПраваПодписиКонтрагента.ПолучитьПредставлениеРодительныйПадеж(
                    ДанныеЗаполнения.ДанныеДокумента.ГП_ВидОснованияКонтрагента);
        КонецЕсли;

        ТабличныйДокумент.Вывести(ОбластьШапка);

        // Заполнение тела договора
        ОбластьТелоДоговора.Параметры.НачалоПериодаРабот = ДанныеЗаполнения.ДанныеДокумента.ГП_НачалоПериодаРабот;
        ОбластьТелоДоговора.Параметры.КонецПериодаРабот = ДанныеЗаполнения.ДанныеДокумента.ГП_КонецПериодаРабот;
        ОбластьТелоДоговора.Параметры.СтоимостьРабот = ДанныеЗаполнения.ДанныеДокумента.СуммаДокумента;
        Если ДанныеЗаполнения.ДанныеДокумента.ДокументБезНДС = Ложь Тогда
            ОбластьТелоДоговора.Параметры.СуммаНДС = ДанныеЗаполнения.ТоварыДокумента.Итог("СуммаНДС");
            ОбластьТелоДоговора.Параметры.ВариантНДС = ", в т. ч. НДС";
        Иначе
            ОбластьТелоДоговора.Параметры.ВариантНДС = "";
        КонецЕсли;
        ОбластьТелоДоговора.Параметры.РаботыДоговора = ПолучитьПредставлениеСпискаТоваров(ДанныеЗаполнения.ТоварыДокумента);

        ОбластьТелоДоговора.Параметры.ПредоплатаПредставление = ДанныеЗаполнения.ДанныеДокумента.ГП_Предоплата;

        ТабличныйДокумент.Вывести(ОбластьТелоДоговора);

        // Заполнение подвала договора
        ОбластьПодвал.Параметры.Организация = ДанныеЗаполнения.СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
        Если РуководительФИО <> Неопределено Тогда
            ОбластьПодвал.Параметры.ИОФДиректора = РуководительФИО.ФамилияИО;
        КонецЕсли;

        // Реквизиты организации
        ОбластьПодвал.Параметры.ЮридическийАдрес = ДанныеЗаполнения.СведенияОбОрганизации.ЮридическийАдрес;
        ОбластьПодвал.Параметры.Телефоны = "70-06-08, 70-13-19";
        ОбластьПодвал.Параметры.НомерСчета = ДанныеЗаполнения.СведенияОбОрганизации.НомерСчета;
        ОбластьПодвал.Параметры.Банк = ДанныеЗаполнения.СведенияОбОрганизации.Банк;
        ОбластьПодвал.Параметры.КоррСчет = ДанныеЗаполнения.СведенияОбОрганизации.КоррСчет;
        ОбластьПодвал.Параметры.ИНН = ДанныеЗаполнения.СведенияОбОрганизации.ИНН;
        ОбластьПодвал.Параметры.БИК = ДанныеЗаполнения.СведенияОбОрганизации.БИК;

        ТабличныйДокумент.Вывести(ОбластьПодвал);

        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
    КонецЦикла;

    ТабличныйДокумент.АвтоМасштаб = Истина;

    Если ПривилегированныйРежим И ПривилегированныйРежим() Тогда
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли;

    Возврат ТабличныйДокумент;
КонецФункции

// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка.КВП_НачислениеУслуг
//  ОбъектыПечати
//  Макет - ТабличныйДокумент, Неопределено
//  ПривилегированныйРежим - Булево
Функция СформироватьПечатнуюФормуАктаПриемкиВыполненныхРаботДоговора(
        Знач МассивОбъектов, Знач ОбъектыПечати, Знач Макет = Неопределено, ПривилегированныйРежим = Истина) Экспорт

    Если ПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплатуПокупателю_ГП_АктПриемкиВыполненныхРаботДоговора";
    ТабличныйДокумент.Защита = Ложь;

    Макет = ?(Макет = Неопределено, ПолучитьМакет("ГП_ПФ_АктПриемкиВыполненныхРаботДоговора"), Макет);
    ПервыйДокумент = Истина;

    Для Каждого ДокументСсылка Из МассивОбъектов Цикл
        Если НЕ ПервыйДокумент Тогда
            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

        ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
        ОбластьТелоДоговора = Макет.ПолучитьОбласть("Тело");
        ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

        ДанныеЗаполнения = ПоучитьДанныеЗаполненияДоговораПодряда(ДокументСсылка);

        // Данные руководителя организации
        РуководительФИО = Неопределено;
        Если ДанныеЗаполнения.ДанныеДокумента.Руководитель <> Неопределено Тогда
            РуководительФИО = УчетЗарплаты.ПредставлениеФизическогоЛица(
                    ДанныеЗаполнения.ДанныеДокумента.Руководитель, ДанныеЗаполнения.ДанныеДокумента.Дата);
        Иначе
            РуководительФИО = ДанныеЗаполнения.СведенияОбОрганизации.РуководительФИО;
        КонецЕсли;

        // Заполнение шапки договора
        ОбластьШапка.Параметры.НомерДокумента = СтрЗаменитьПоРегулярномуВыражению(ДанныеЗаполнения.ДанныеДокумента.Номер, "(?i)^[0-9а-яa-z]+\-0*", "");
        ОбластьШапка.Параметры.Дата = Формат(ДанныеЗаполнения.ДанныеДокумента.Дата, "ДФ='дд ММММ гггг'") + " г.";
        Если ОбластьШапка.Параметры.Дата = " г." Тогда
            ОбластьШапка.Параметры.Дата = СтрШаблон("""__"" ______ ____%1", ОбластьШапка.Параметры.Дата);
        КонецЕсли;

        ТабличныйДокумент.Вывести(ОбластьШапка);

        // Заполнение тела договора
        ОбластьТелоДоговора.Параметры.Заказчик = ДанныеЗаполнения.ДанныеДокумента.Контрагент;
        ОбластьТелоДоговора.Параметры.ПредставлениеЗаказчика = ДанныеЗаполнения.СведенияОКонтрагенте.ПолноеНаименование;

        ОбластьТелоДоговора.Параметры.НаименованиеОрганизации = ДанныеЗаполнения.СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
        Если РуководительФИО <> Неопределено Тогда
            Попытка
                ОбластьТелоДоговора.Параметры.ФИОДиректора =
                    СклонениеПредставленийОбъектов.ПросклонятьФИО(РуководительФИО.ФамилияИО, 2);
            Исключение
                ОбщегоНазначения.СообщитьПользователю("Не удалось выполнить склонение ФИО руководителя.");
            КонецПопытки;
        КонецЕсли;

        ОбластьТелоДоговора.Параметры.ДолжностьФИОЗаказчика = ?(ПустаяСтрока(ДанныеЗаполнения.СведенияОКонтрагенте.РуководительФИО) = Ложь,
                ДанныеЗаполнения.СведенияОКонтрагенте.РуководительФИО,
                ДанныеЗаполнения.СведенияОКонтрагенте.НаименованиеДляПечатныхФорм);
        Попытка
            ОбластьТелоДоговора.Параметры.ДолжностьФИОЗаказчика =
                СклонениеПредставленийОбъектов.ПросклонятьФИО(ПодготовитьПредставлениеКонтрагентаДляСклонения(
                        ОбластьТелоДоговора.Параметры.ДолжностьФИОЗаказчика), 2);
        Исключение
            ОбщегоНазначения.СообщитьПользователю("Не удалось выполнить склонение ФИО представителя заказчика.");
        КонецПопытки;

        ОбластьТелоДоговора.Параметры.СтоимостьРабот = ДанныеЗаполнения.ДанныеДокумента.СуммаДокумента;
        Если ДанныеЗаполнения.ДанныеДокумента.ДокументБезНДС = Ложь Тогда
            ОбластьТелоДоговора.Параметры.СуммаНДС = ДанныеЗаполнения.ТоварыДокумента.Итог("СуммаНДС");
            ОбластьТелоДоговора.Параметры.ВариантНДС = ", в т. ч. НДС";
        Иначе
            ОбластьТелоДоговора.Параметры.ВариантНДС = "";
        КонецЕсли;
        ОбластьТелоДоговора.Параметры.КоличествоТоваров = ДанныеЗаполнения.ТоварыДокумента.Количество();
        ОбластьТелоДоговора.Параметры.РаботыДоговора = ПолучитьПредставлениеСпискаТоваров(ДанныеЗаполнения.ТоварыДокумента);

        ТабличныйДокумент.Вывести(ОбластьТелоДоговора);

        // Заполнение подвала договора
        Если РуководительФИО <> Неопределено Тогда
            ОбластьПодвал.Параметры.ИОФДиректора = РуководительФИО.ФамилияИО;
        КонецЕсли;

        ТабличныйДокумент.Вывести(ОбластьПодвал);

        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
    КонецЦикла;

    ТабличныйДокумент.АвтоМасштаб = Истина;

    Если ПривилегированныйРежим И ПривилегированныйРежим() Тогда
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли;

    Возврат ТабличныйДокумент;
КонецФункции

Функция ПоучитьДанныеЗаполненияДоговораПодряда(Знач ДокументСчетаНаОплатуПокупателю)
    РезультатФункции = Новый Структура("ДанныеДокумента, ТоварыДокумента, СведенияОбОрганизации, СведенияОКонтрагенте");

    ДанныеДокумента = ПолучитьОбщиеДанныеДокументаСчетНаОплатуПокупателю(ДокументСчетаНаОплатуПокупателю);
    Если ДокументСчетаНаОплатуПокупателю = Неопределено Тогда
        ВызватьИсключение("Не удалось получить данные документа Счет на оплату покупателю.");
    КонецЕсли;
    РезультатФункции.ДанныеДокумента = ДанныеДокумента;

    // Данные участников
    РезультатФункции.СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
            ДанныеДокумента.Организация, ДанныеДокумента.Дата);

    РезультатФункции.СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
            ДанныеДокумента.Контрагент, ДанныеДокумента.Дата);

    РезультатФункции.ТоварыДокумента = ПолучитьТоварыДокументаСчетНаОплатуПокупателю(ДокументСчетаНаОплатуПокупателю);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 11.12.2024 [F00231508] Создание ПФ "Договор подряда" и "Акт выполненных работ к договору подряда" --

// Гарант+ Килипенко 11.12.2024 [F00231508] Создание ПФ "Договор подряда" и "Акт выполненных работ к договору подряда" ++
#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ДокументСчетНаОплатуПокупателю - ДокументСсылка.СчетНаОплатуПокупателю
// Возвращаемое значение:
//  - Структура, Неопределено
Функция ПолучитьОбщиеДанныеДокументаСчетНаОплатуПокупателю(Знач ДокументСчетНаОплатуПокупателю)
    РезультатФункции = Неопределено;

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
        |	СчетНаОплатуПокупателю.Номер КАК Номер,
        |	СчетНаОплатуПокупателю.Дата КАК Дата,
        |	СчетНаОплатуПокупателю.Организация КАК Организация,
        |	СчетНаОплатуПокупателю.Склад КАК Склад,
        |	СчетНаОплатуПокупателю.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
        |	СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
        |	СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	СчетНаОплатуПокупателю.АдресДоставки КАК АдресДоставки,
        |	СчетНаОплатуПокупателю.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
        |	СчетНаОплатуПокупателю.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
        |	СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента,
        |	СчетНаОплатуПокупателю.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
        |	СчетНаОплатуПокупателю.СуммаСкидки КАК СуммаСкидки,
        |	СчетНаОплатуПокупателю.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
        |	СчетНаОплатуПокупателю.СуммаВключаетНДС КАК СуммаВключаетНДС,
        |	СчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента,
        |	СчетНаОплатуПокупателю.ТипЦен КАК ТипЦен,
        |	СчетНаОплатуПокупателю.Руководитель КАК Руководитель,
        |	СчетНаОплатуПокупателю.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
        |	СчетНаОплатуПокупателю.ДокументБезНДС КАК ДокументБезНДС,
        |	СчетНаОплатуПокупателю.ДополнительныеУсловия КАК ДополнительныеУсловия,
        |	СчетНаОплатуПокупателю.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
        |	СчетНаОплатуПокупателю.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
        |	СчетНаОплатуПокупателю.СсылочныйИдентификатор КАК СсылочныйИдентификатор,
        |	СчетНаОплатуПокупателю.СпособДоставки КАК СпособДоставки,
        |	СчетНаОплатуПокупателю.ВидОперации КАК ВидОперации,
        |	СчетНаОплатуПокупателю.ДокументОснование КАК ДокументОснование,
        |	СчетНаОплатуПокупателю.ГП_ВидОснованияКонтрагента КАК ГП_ВидОснованияКонтрагента,
        |	СчетНаОплатуПокупателю.ГП_НачалоПериодаРабот КАК ГП_НачалоПериодаРабот,
        |	СчетНаОплатуПокупателю.ГП_КонецПериодаРабот КАК ГП_КонецПериодаРабот,
        |	СчетНаОплатуПокупателю.ГП_Предоплата КАК ГП_Предоплата
        |ИЗ
        |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
        |ГДЕ
        |	СчетНаОплатуПокупателю.Ссылка = &ДокументСчетНаОплатуПокупателю
        |";

    Запрос.УстановитьПараметр("ДокументСчетНаОплатуПокупателю", ДокументСчетНаОплатуПокупателю);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанныхПодготовка = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанныхПодготовка.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    РезультатФункции = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаДанныхПодготовка[0]);
    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьТоварыДокументаСчетНаОплатуПокупателю(Знач ДокументСчетНаОплатуПокупателю)
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ТоварыДокумента.Ссылка КАК СчетНаОплатуПокупателю,
        |	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
        |	ТоварыДокумента.Номенклатура КАК Номенклатура,
        |	ТоварыДокумента.Содержание КАК Содержание,
        |	ТоварыДокумента.Количество КАК Количество,
        |	ТоварыДокумента.Цена КАК Цена,
        |	ТоварыДокумента.Сумма КАК Сумма,
        |	ТоварыДокумента.ПроцентСкидки КАК ПроцентСкидки,
        |	ТоварыДокумента.СуммаСкидки КАК СуммаСкидки,
        |	ТоварыДокумента.СтавкаНДС КАК СтавкаНДС,
        |	ТоварыДокумента.СуммаНДС КАК СуммаНДС,
        |	ТоварыДокумента.КлючКалькуляцииРасходов КАК КлючКалькуляцииРасходов
        |ИЗ
        |	Документ.СчетНаОплатуПокупателю.Товары КАК ТоварыДокумента
        |ГДЕ
        |	ТоварыДокумента.Ссылка = &ДокументСчетНаОплатуПокупателю;
        |";

    Запрос.УстановитьПараметр("ДокументСчетНаОплатуПокупателю", ДокументСчетНаОплатуПокупателю);
    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Должность - Строка
//  Организация - СправочникСсылка.Организации
//  ДатаАктуальности - Дата
// Возвращаемое значение:
//  - Строка
Функция ПолучитьФИОПредставителя(Знач Должность, Знач Организация, Знач ДатаАктуальности)
    РезультатФункции = "";

    ОтветственныеЛицаОрганизации = ОтветственныеЛицаБППовтИсп.ОтветственныеЛица(Организация, ДатаАктуальности);

    ИмяПоляПредставления = Должность + "ФИО";
    Если ОтветственныеЛицаОрганизации.Свойство(ИмяПоляПредставления) Тогда
        РезультатФункции = ОтветственныеЛицаОрганизации[ИмяПоляПредставления].Представление;
    КонецЕсли;

    Если ПустаяСтрока(РезультатФункции) Тогда
        Если Должность = "ГлавныйБухгалтер" Тогда
            РезультатФункции = "Антипова О.А.";
        ИначеЕсли Должность = "Директор" Тогда
            РезультатФункции = "Машошин О.Л.";
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьПредставлениеСпискаТоваров(Знач ТаблицаТоваров)
    РезультатФункции = "";

    Для Каждого СтрокаДанных Из ТаблицаТоваров Цикл
        РезультатФункции = СтрШаблон("%1; %2", РезультатФункции, Строка(СтрокаДанных.Номенклатура));
    КонецЦикла;

    Если СтрДлина(РезультатФункции) > 0 Тогда
        РезультатФункции = Сред(РезультатФункции, 3);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция ПодготовитьПредставлениеКонтрагентаДляСклонения(Знач Представление)
    Представление = СокрП(СтрЗаменитьПоРегулярномуВыражению(СокрЛП(Представление),
                "(?i)^((?:\s*ИП\s+)?)([а-я]{2,})\s+([а-я]{2,})\s+((?:[а-я]{2,})?)\s*$", "$2 $3 $4"));

    Если СтрПодобнаПоРегулярномуВыражению(Представление, "(?i)^([а-я]{2,})\s+([а-я]{2,})\s+((?:[а-я]{2,})?)$") = Ложь Тогда
        Представление = ""; // Не является ФИО
    КонецЕсли;
    Возврат Представление;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 11.12.2024 [F00231508] Создание ПФ "Договор подряда" и "Акт выполненных работ к договору подряда" --
