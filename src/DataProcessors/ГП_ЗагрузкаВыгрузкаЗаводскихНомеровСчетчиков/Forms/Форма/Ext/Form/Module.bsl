#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ВыгрузитьJSON(Команда)
    ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
    ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
    ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'JSON'; en = 'JSON'") + "(*.json)|*.json";
    ДиалогСохраненияФайла.Заголовок = "Выберите (укажите) файл для сохранения";

    РезультатДиалога = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();
    Если РезультатДиалога = Неопределено ИЛИ РезультатДиалога.Количество() = 0 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Файл для сохранения не указан");
        Возврат;
    КонецЕсли;

    ИмяФайлаДляСохранения = РезультатДиалога[0];

    // Заполнение документа
    ДанныеJSON = ПолучитьСтруктуруДанныхJSONНаСервере();
    ДанныеJSON = ЗаписатьЗначениеJSON(ДанныеJSON);

    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    ТекстовыйДокумент.ДобавитьСтроку(ДанныеJSON);

    РезультатЗаписи = Неопределено;
    Попытка
        РезультатЗаписи = Ждать ТекстовыйДокумент.ЗаписатьАсинх(ИмяФайлаДляСохранения, КодировкаТекста.ANSI);
    Исключение
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "Ошибка при записи файла.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
    КонецПопытки;

    Если РезультатЗаписи <> Истина Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Запись не выполнена");
        Возврат;
    КонецЕсли;

    ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("Данные соответствий записаны в файл: %1", ИмяФайлаДляСохранения));
КонецПроцедуры

// Загружает данные заводских номеров счетчиков из файла
&НаКлиенте
Асинх Процедура ЗагрузитьJSON(Команда)
    РезультатДиалога = Ждать ГП_ОбщегоНазначенияКлиент.СпроситьПользователяОГотовностиВыполнятьОперациюАсинх(
            "Будет выполнена процедура загрузки заводских номеров счетчиков в табличную часть.");
    Если РезультатДиалога = Ложь Тогда
        Возврат;
    КонецЕсли;

    ОткрытьФайлJSONДляЧтения("ЗагрузитьДанныеСчетчиковJSON");
КонецПроцедуры

&НаКлиенте
Асинх Процедура Заполнить(Команда)
    РезультатДиалога = Ждать ВопросАсинх(
        СтрШаблон(
            "Таблица счетчиков будет%1 заполнена.
            |Продолжить?",
            " очищена и"), РежимДиалогаВопрос.ДаНет, , , "Внимание!");
    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;

    ЗаполнитьТаблицуНаСервере();
КонецПроцедуры

// Сохраняет значения номеров счетчиков в ИБ (обновление заводских номеров счетчиков)
&НаКлиенте
Асинх Процедура ЗаписатьЗначенияНомеров(Команда)
    // Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьТаблицуНаСервере()
    ЭтотОбъект.Объект.ДанныеОбмена.Очистить();

    ПараметрыЗаполненияТаблицы = Новый Структура("ТолькоБезПометкиУдаления, ТолькоЗаполненныеНомера", Истина, Ложь);

    ДанныеЗаполнения =
        ГП_ПриборыУчета.ПолучитьТаблицуЗаводскихНомеровСчетчиков(ПараметрыЗаполненияТаблицы);

    Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
        Если ПустаяСтрока(СтрокаДанных.ГП_ИдентификаторБП77) Тогда
            Если ПустаяСтрока(СтрокаДанных.ЗаводскойНомер) = Ложь Тогда
                ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                    "ВНИМАНИЕ! Для счетчика: ""%1"" не заполнен идентификатор БП77 - строка игнорируется.", Строка(СтрокаДанных.Счетчик)));
            КонецЕсли;
            Продолжить; // Нет идентификатора
        КонецЕсли;

        НоваяСтрокаСоответствий = ЭтотОбъект.Объект.ДанныеОбмена.Добавить();
        НоваяСтрокаСоответствий.Счетчик = СтрокаДанных.Счетчик;
        НоваяСтрокаСоответствий.ЗаводскойНомер = СтрокаДанных.ЗаводскойНомер;
        НоваяСтрокаСоответствий.ГП_ИдентификаторБП77 = СтрокаДанных.ГП_ИдентификаторБП77;
        НоваяСтрокаСоответствий.Наименование = СтрокаДанных.Наименование;
    КонецЦикла;

    Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлJSONДляЧтения(Знач КомандаОбработки)
    ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
    ПараметрыЗагрузкиФайла.Диалог.Заголовок = НСтр("ru = 'Выберите файл JSON для загрузки'");
    ПараметрыЗагрузкиФайла.Диалог.Фильтр = НСтр("ru = 'Файлы JSON (*.json)|*.json'");
    ПараметрыЗагрузкиФайла.ИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
    ФайловаяСистемаКлиент.ЗагрузитьФайлы(Новый ОписаниеОповещения("ЗагрузкаФайлаЗавершение",
            ЭтотОбъект, Новый Структура("КомандаОбработки", КомандаОбработки)), ПараметрыЗагрузкиФайла);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеСчетчиковJSON(Знач СтруктураФайла)
    //РезультатЗагрузки = ЗагрузитьДанныеСчетчиковJSONНаСервере(СтруктураФайла.Хранение);

    //ТекстСообщенияРезультатОперации = "";
    //Если РезультатЗагрузки.Успех = Ложь Тогда
    //    ТекстСообщенияРезультатОперации = СтрШаблон("Загрузка данных соответствий не выполнена.
    //            |Подробная информация: %1", РезультатЗагрузки.ТекстСообщения);
    //Иначе
    //    ЗаполнитьДокументИзВнешнихДанныхНаСервере(РезультатЗагрузки.ДанныеДокумента);

    //    ТекстСообщенияРезультатОперации = СтрШаблон("Загрузка данных соответствий выполнена успешно");
    //КонецЕсли;

    //ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияРезультатОперации);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьДанныеСчетчиковJSONНаСервере(Знач АдресФайла, Знач КодировкаФайла = Неопределено)
    РезультатФункции = Новый Структура("Успех, Счетчики, ТекстСообщения", Истина);

    КодировкаФайла = ?(КодировкаФайла = Неопределено, "UTF-8", КодировкаФайла);

    ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
    Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = НСтр("ru = 'Не удалось получить данные для загрузки'");

        Возврат РезультатФункции;
    КонецЕсли;

    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
    ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла, КодировкаФайла);
    ДанныеДокумента = ПрочитатьJSON(ЧтениеJSON);

    // Удаляем временный файл
    Попытка
        УдалитьФайлы(ИмяВременногоФайла);
    Исключение
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Загрузка данных счетчиков из JSON'"),
            УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Если ТипЗнч(ДанныеДокумента) <> Тип("Структура") ИЛИ ДанныеДокумента.Свойство("Счетчики") = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных документа";

        Возврат РезультатФункции;
    КонецЕсли;

    РезультатФункции.Счетчики = ДанныеДокумента.Счетчики;
    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхJSONНаСервере()
    СтруктураРезультатаJSON = Новый Структура("Счетчики");
    СтруктураРезультатаJSON.Счетчики = Новый Массив;

    Для Каждого СтрокаДанных Из ЭтотОбъект.Объект.ДанныеОбмена Цикл
        НовыйЭлементСчетчика = Новый Структура("Наименование, ЗаводскойНомер, ГП_ИдентификаторБП77, ГП_Комментарий", "", "", "", "");
        ЗаполнитьЗначенияСвойств(НовыйЭлементСчетчика, СтрокаДанных);
        СтруктураРезультатаJSON.Счетчики.Добавить(НовыйЭлементСчетчика);
    КонецЦикла;

    Возврат СтруктураРезультатаJSON;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ФоновыеОперацииИнфраструктура

&НаКлиенте
Процедура ЗагрузкаФайлаЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
    Если ТипЗнч(ПомещенныеФайлы) <> Тип("Массив") Тогда
        Возврат;
    КонецЕсли;

    Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
        И ДополнительныеПараметры.Свойство("КомандаОбработки")
        И ДополнительныеПараметры.КомандаОбработки = "ЗагрузитьДанныеСчетчиковJSON" Тогда

        ЗагрузитьДанныеСчетчиковJSON(ПомещенныеФайлы[0]);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ФоновыеОперацииИнфраструктура
