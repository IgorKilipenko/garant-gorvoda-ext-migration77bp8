#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ВыгрузитьJSON(Команда)
    ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
    ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
    ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'JSON'; en = 'JSON'") + "(*.json)|*.json";
    ДиалогСохраненияФайла.Заголовок = "Выберите (укажите) файл для сохранения";

    РезультатДиалога = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();
    Если РезультатДиалога = Неопределено ИЛИ РезультатДиалога.Количество() = 0 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Файл для сохранения не указан");
        Возврат;
    КонецЕсли;

    ИмяФайлаДляСохранения = РезультатДиалога[0];

    // Заполнение документа
    ДанныеJSON = ПолучитьСтруктуруДанныхJSONНаСервере();
    ДанныеJSON = ЗаписатьЗначениеJSON(ДанныеJSON);

    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    ТекстовыйДокумент.ДобавитьСтроку(ДанныеJSON);

    РезультатЗаписи = Неопределено;
    Попытка
        РезультатЗаписи = Ждать ТекстовыйДокумент.ЗаписатьАсинх(ИмяФайлаДляСохранения, КодировкаТекста.UTF8);
    Исключение
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "Ошибка при записи файла.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
    КонецПопытки;

    Если РезультатЗаписи <> Истина Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Запись не выполнена");
        Возврат;
    КонецЕсли;

    ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("Данные соответствий записаны в файл: %1", ИмяФайлаДляСохранения));
КонецПроцедуры

// Загружает данные заводских номеров счетчиков из файла
&НаКлиенте
Асинх Процедура ЗагрузитьJSON(Команда)
    РезультатДиалога = Ждать ГП_ОбщегоНазначенияКлиент.СпроситьПользователяОГотовностиВыполнятьОперациюАсинх(
            "Будет выполнена процедура загрузки заводских номеров счетчиков в табличную часть.");
    Если РезультатДиалога = Ложь Тогда
        Возврат;
    КонецЕсли;

    ОткрытьФайлJSONДляЧтения("ЗагрузитьДанныеСчетчиковJSON");
КонецПроцедуры

&НаКлиенте
Асинх Процедура Заполнить(Команда)
    РезультатДиалога = Ждать ВопросАсинх(
            СтрШаблон(
                "Таблица счетчиков будет%1 заполнена.
                |Продолжить?",
                " очищена и"), РежимДиалогаВопрос.ДаНет, , , "Внимание!");
    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;

    ЗаполнитьТаблицуНаСервере();
КонецПроцедуры

// Сохраняет значения номеров счетчиков в ИБ (обновление заводских номеров счетчиков)
&НаКлиенте
Асинх Процедура ЗаписатьЗначенияНомеров(Команда)
    РезультатДиалога = Ждать ВопросАсинх(
            СтрШаблон(
                "Значения заводских номеров будут перезаписаны из табличной части счетчиков.
                |Продолжить?"), РежимДиалогаВопрос.ДаНет, , , "Внимание!");
    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;

    РезультатЗаписи = ПерезаписатьЗначенияЗаводскихНомеровНаСервере();
    Если РезультатЗаписи.Успех = Ложь Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗаписи.ТекстСообщения);
    Иначе
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "Успех! Перезаписано ""%1"" элементов счетчиков", РезультатЗаписи.ИзмененныеСчетчики.Количество()));
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПерезаписатьЗначенияЗаводскихНомеровНаСервере()
    РезультатФункции = Новый Структура("Успех, ИзмененныеСчетчики, ТекстСообщения", Истина, Новый Массив);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ДанныеОбмена.Счетчик КАК Счетчик,
        |   ДанныеОбмена.ЗаводскойНомер КАК ЗаводскойНомер,
        |   ДанныеОбмена.Наименование КАК Наименование,
        |   ДанныеОбмена.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77
        |ПОМЕСТИТЬ ВТ_ДанныеОбмена
        |ИЗ
        |   &ДанныеОбмена КАК ДанныеОбмена
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Счетчики.Ссылка КАК Счетчик,
        |   Счетчики.Наименование КАК Наименование,
        |   Счетчики.ЗаводскойНомер КАК ЗаводскойНомер,
        |   Счетчики.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВТ_ДанныеОбмена.ЗаводскойНомер КАК ЗаводскойНомерЗамены
        |ИЗ
        |   Справочник.КВП_Счетчики КАК Счетчики
        |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеОбмена КАК ВТ_ДанныеОбмена
        |   ПО Счетчики.ГП_ИдентификаторБП77 = ВТ_ДанныеОбмена.ГП_ИдентификаторБП77
        |       И Счетчики.ГП_ИдентификаторБП77 <> """"
        |       И Счетчики.Наименование = ВТ_ДанныеОбмена.Наименование
        |       И Счетчики.ЗаводскойНомер <> ВТ_ДанныеОбмена.ЗаводскойНомер
        |       И ВЫБОР
        |           КОГДА (ВТ_ДанныеОбмена.Счетчик ЕСТЬ NULL)
        |               ТОГДА Счетчики.Ссылка = ВТ_ДанныеОбмена.Счетчик
        |           ИНАЧЕ ИСТИНА
        |       КОНЕЦ
        |";

    Запрос.УстановитьПараметр("ДанныеОбмена", ЭтотОбъект.Объект.ДанныеОбмена.Выгрузить());

    РезультатЗапроса = Запрос.Выполнить();
    ДанныеЗаполнения = РезультатЗапроса.Выгрузить();

    НачатьТранзакцию();
    Попытка
        Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
            Если СтрокаДанных.ЗаводскойНомер = СтрокаДанных.ЗаводскойНомерЗамены Тогда
                Продолжить;
            КонецЕсли;

            СчетчикОбъект = СтрокаДанных.Счетчик.ПолучитьОбъект();
            СчетчикОбъект.ЗаводскойНомер = СтрокаДанных.ЗаводскойНомерЗамены;
            СчетчикОбъект.Записать();
            РезультатФункции.ИзмененныеСчетчики.Добавить(СчетчикОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ИзмененныеСчетчики.Очистить();
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка при изменении заводских номеров.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуНаСервере()
    ЭтотОбъект.Объект.ДанныеОбмена.Очистить();

    ПараметрыЗаполненияТаблицы = Новый Структура("ТолькоБезПометкиУдаления, ТолькоЗаполненныеНомера", Истина, Ложь);

    ДанныеЗаполнения =
        ГП_ПриборыУчета.ПолучитьТаблицуЗаводскихНомеровСчетчиков(ПараметрыЗаполненияТаблицы);

    Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
        Если ПустаяСтрока(СтрокаДанных.ГП_ИдентификаторБП77) Тогда
            Если ПустаяСтрока(СтрокаДанных.ЗаводскойНомер) = Ложь Тогда
                ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                        "ВНИМАНИЕ! Для счетчика: ""%1"" не заполнен идентификатор БП77 - строка игнорируется.",
                        Строка(СтрокаДанных.Счетчик)));
            КонецЕсли;
            Продолжить; // Нет идентификатора
        КонецЕсли;

        НоваяСтрокаСоответствий = ЭтотОбъект.Объект.ДанныеОбмена.Добавить();
        НоваяСтрокаСоответствий.Счетчик = СтрокаДанных.Счетчик;
        НоваяСтрокаСоответствий.ЗаводскойНомер = СтрокаДанных.ЗаводскойНомер;
        НоваяСтрокаСоответствий.ГП_ИдентификаторБП77 = СтрокаДанных.ГП_ИдентификаторБП77;
        НоваяСтрокаСоответствий.Наименование = СтрокаДанных.Наименование;
    КонецЦикла;

    Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлJSONДляЧтения(Знач КомандаОбработки)
    ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
    ПараметрыЗагрузкиФайла.Диалог.Заголовок = НСтр("ru = 'Выберите файл JSON для загрузки'");
    ПараметрыЗагрузкиФайла.Диалог.Фильтр = НСтр("ru = 'Файлы JSON (*.json)|*.json'");
    ПараметрыЗагрузкиФайла.ИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
    ФайловаяСистемаКлиент.ЗагрузитьФайлы(Новый ОписаниеОповещения("ЗагрузкаФайлаЗавершение",
            ЭтотОбъект, Новый Структура("КомандаОбработки", КомандаОбработки)), ПараметрыЗагрузкиФайла);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеСчетчиковJSON(Знач СтруктураФайла)
    РезультатЗагрузки = ЗагрузитьДанныеСчетчиковJSONНаСервере(СтруктураФайла.Хранение);

    ТекстСообщенияРезультатОперации = "";
    Если РезультатЗагрузки.Успех = Ложь Тогда
        ТекстСообщенияРезультатОперации = СтрШаблон("Загрузка данных счетчиков не выполнена.
                |Подробная информация: %1", РезультатЗагрузки.ТекстСообщения);
    Иначе
        ЗаполнитьДанныеОбменаИзВнешнихДанныхНаСервере(РезультатЗагрузки.Счетчики);

        ТекстСообщенияРезультатОперации = СтрШаблон("Загрузка данных счетчиков выполнена успешно");
    КонецЕсли;

    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияРезультатОперации);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьДанныеСчетчиковJSONНаСервере(Знач АдресФайла, Знач КодировкаФайла = Неопределено)
    РезультатФункции = Новый Структура("Успех, Счетчики, ТекстСообщения", Истина);

    КодировкаФайла = ?(КодировкаФайла = Неопределено, "UTF-8", КодировкаФайла);

    ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
    Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = НСтр("ru = 'Не удалось получить данные для загрузки'");

        Возврат РезультатФункции;
    КонецЕсли;

    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
    ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла, КодировкаФайла);
    ДанныеДокумента = ПрочитатьJSON(ЧтениеJSON);

    // Удаляем временный файл
    Попытка
        УдалитьФайлы(ИмяВременногоФайла);
    Исключение
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Загрузка данных счетчиков из JSON'"),
            УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Если ТипЗнч(ДанныеДокумента) <> Тип("Структура") ИЛИ ДанныеДокумента.Свойство("Счетчики") = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных документа";

        Возврат РезультатФункции;
    КонецЕсли;

    РезультатФункции.Счетчики = ДанныеДокумента.Счетчики;
    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхJSONНаСервере()
    СтруктураРезультатаJSON = Новый Структура("Счетчики");
    СтруктураРезультатаJSON.Счетчики = Новый Массив;

    Для Каждого СтрокаДанных Из ЭтотОбъект.Объект.ДанныеОбмена Цикл
        НовыйЭлементСчетчика = Новый Структура("Наименование, ЗаводскойНомер, ГП_ИдентификаторБП77, ГП_Комментарий", "", "", "", "");
        ЗаполнитьЗначенияСвойств(НовыйЭлементСчетчика, СтрокаДанных);
        СтруктураРезультатаJSON.Счетчики.Добавить(НовыйЭлементСчетчика);
    КонецЦикла;

    Возврат СтруктураРезультатаJSON;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьМассивСтруктурСчетчиковВТаблицуНаСервере(Знач МассивСтруктурСчетчиков)
    РезультатФункции = НовыйТаблицаСчетчиков();

    Для Каждого СтрокаДанных Из МассивСтруктурСчетчиков Цикл
        НоваяСтрока = РезультатФункции.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

&НаСервереБезКонтекста
Функция НовыйТаблицаСчетчиков()
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("НаименованиеУслуги", ОбщегоНазначения.ОписаниеТипаСтрока(150));
    РезультатФункции.Колонки.Добавить("ЗаводскойНомер", ОбщегоНазначения.ОписаниеТипаСтрока(50));
    РезультатФункции.Колонки.Добавить("ГП_ИдентификаторБП77", ОбщегоНазначения.ОписаниеТипаСтрока(32));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("ГП_Комментарий", ОбщегоНазначения.ОписаниеТипаСтрока(500));

    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ЗаполнитьДанныеОбменаИзВнешнихДанныхНаСервере(Знач ИсходныеДанныеЗаполнения)
    ИсходныеДанныеЗаполнения = ПреобразоватьМассивСтруктурСчетчиковВТаблицуНаСервере(ИсходныеДанныеЗаполнения);

    МВТ = Новый МенеджерВременныхТаблиц;
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ПОМЕСТИТЬ ВТ_ИсходныеДанныеЗаполнения
        |ИЗ
        |   &ИсходныеДанныеЗаполнения КАК ИсходныеДанныеЗаполнения
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Счетчики.Ссылка КАК Счетчик,
        |   ВТ_ИсходныеДанныеЗаполнения.Наименование КАК Наименование,
        |   ВТ_ИсходныеДанныеЗаполнения.ЗаводскойНомер КАК ЗаводскойНомер,
        |   ВТ_ИсходныеДанныеЗаполнения.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВТ_ИсходныеДанныеЗаполнения.ГП_Комментарий КАК ГП_Комментарий
        |ПОМЕСТИТЬ ВТ_ВсеДанныеСчетчиков
        |ИЗ
        |   ВТ_ИсходныеДанныеЗаполнения КАК ВТ_ИсходныеДанныеЗаполнения
        |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Счетчики КАК Счетчики
        |   ПО Счетчики.ЭтоГруппа = ЛОЖЬ
        |       И Счетчики.ГП_ИдентификаторБП77 <> """"
        |       И Счетчики.Наименование = ВТ_ИсходныеДанныеЗаполнения.Наименование
        |       И Счетчики.ГП_ИдентификаторБП77 = ВТ_ИсходныеДанныеЗаполнения.ГП_ИдентификаторБП77
        |;
        |";
    Запрос.УстановитьПараметр("ИсходныеДанныеЗаполнения", ИсходныеДанныеЗаполнения);
    РезультатЗапроса = Запрос.Выполнить();

    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    Запрос.Текст =
        "///////////////////////////////////////
        |// Результат [0]
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_ВсеДанныеСчетчиков.Счетчик КАК Счетчик,
        |   ВТ_ВсеДанныеСчетчиков.Наименование КАК Наименование,
        |   ВТ_ВсеДанныеСчетчиков.ЗаводскойНомер КАК ЗаводскойНомер,
        |   ВТ_ВсеДанныеСчетчиков.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВТ_ВсеДанныеСчетчиков.ГП_Комментарий КАК ГП_Комментарий
        |ИЗ
        |   ВТ_ВсеДанныеСчетчиков КАК ВТ_ВсеДанныеСчетчиков
        |ГДЕ
        |   НЕ ВТ_ВсеДанныеСчетчиков.Счетчик ЕСТЬ NULL
        |;
        |
        |///////////////////////////////////////
        |// Результат [1] Не найденные соответствия
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_ВсеДанныеСчетчиков.Наименование КАК Наименование,
        |   ВТ_ВсеДанныеСчетчиков.ЗаводскойНомер КАК ЗаводскойНомер,
        |   ВТ_ВсеДанныеСчетчиков.ГП_ИдентификаторБП77 КАК ГП_ИдентификаторБП77,
        |   ВТ_ВсеДанныеСчетчиков.ГП_Комментарий КАК ГП_Комментарий
        |ИЗ
        |   ВТ_ВсеДанныеСчетчиков КАК ВТ_ВсеДанныеСчетчиков
        |ГДЕ
        |   ВТ_ВсеДанныеСчетчиков.Счетчик ЕСТЬ NULL
        |;
        |";

    РезультатЗапроса = Запрос.ВыполнитьПакет();

    ИсходныеДанныеЗаполнения = Неопределено;
    ДанныеЗаполнения = РезультатЗапроса[0].Выгрузить();
    НенайденныеСоответствия = РезультатЗапроса[1].Выгрузить();

    // Вывод сообщений о ненайденных соответствиях для установки номеров счетчиков
    Для Каждого СтрокаДанных Из НенайденныеСоответствия Цикл
        ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                "ВНИМАНИЕ! Не найдено соответствие счетчика: ""%1"", ид: ""%2""",
                СтрокаДанных.Наименование, СтрокаДанных.ГП_ИдентификаторБП77));
    КонецЦикла;

    // Заполнение таблицы счетчиков
    Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
        НоваяСтрока = ЭтотОбъект.Объект.ДанныеОбмена.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
    КонецЦикла;

    Возврат Истина;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ФоновыеОперацииИнфраструктура

&НаКлиенте
Процедура ЗагрузкаФайлаЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
    Если ТипЗнч(ПомещенныеФайлы) <> Тип("Массив") Тогда
        Возврат;
    КонецЕсли;

    Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
        И ДополнительныеПараметры.Свойство("КомандаОбработки")
        И ДополнительныеПараметры.КомандаОбработки = "ЗагрузитьДанныеСчетчиковJSON" Тогда

        ЗагрузитьДанныеСчетчиковJSON(ПомещенныеФайлы[0]);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ФоновыеОперацииИнфраструктура
