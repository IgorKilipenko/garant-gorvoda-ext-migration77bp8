// Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область ПрограммныйИнтерфейс

// Выполняет запись данных счетчиков БП77 (из файла XML) в регистр сведений ГП_СчетчикиБП77
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено - Если указан адрес, результат будет помещен в хранилище
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено - Если АдресХранилища = Неопределено
Функция ЗагрузитьДанныеСчетчиковВРегистр(Знач ПараметрыЗагрузки, Знач АдресХранилища = Неопределено) Экспорт
    Возврат ГП_МиграцияПриборовУчета.ЗагрузитьДанныеСчетчиковВРегистр(ПараметрыЗагрузки, АдресХранилища);
КонецФункции

// Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
//
// Выполняет запись периодических показаний счетчиков БП77 (из файла XML) в регистр сведений
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено - Если указан адрес, результат будет помещен в хранилище
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхПоказаний - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено - Если АдресХранилища = Неопределено
Функция ЗагрузитьПоказанияСчетчиковВРегистр(Знач ПараметрыЗагрузки, Знач АдресХранилища = Неопределено) Экспорт
    Возврат ГП_МиграцияПриборовУчета.ЗагрузитьПоказанияСчетчиковВРегистр(ПараметрыЗагрузки, АдресХранилища);
КонецФункции // Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --

// Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
//
// Выполняет запись периодических показаний счетчиков БП77 (из файла XML) в регистр сведений
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено - Если указан адрес, результат будет помещен в хранилище
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхСпособовРегистрации - Число
//      * КоличествоЗаписанныхАктивностей - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено - Если АдресХранилища = Неопределено
Функция ЗагрузитьИсториюДанныхСчетчиковВРегистры(Знач ПараметрыЗагрузки, Знач АдресХранилища = Неопределено) Экспорт
    Возврат ГП_МиграцияПриборовУчета.ЗагрузитьИсториюДанныхСчетчиковВРегистры(ПараметрыЗагрузки, АдресХранилища);
КонецФункции // Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --

// Выполняет создание и обновление счетчиков по данным записей в регистре ГП_СчетчикиБП77.
//  Для записей в регистре устанавливаются соответствия для созданных и обновленных счетчиков (заполняется измерение Счетчик)
// Параметры:
//  ПараметрыОбновления - Структура
//      * СоздаватьНовые - Булево - Если Истина, в случае отсутствия счетчика в ИБ будет создаваться новый
//          счетчик по данным записи в регистре
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * НовыеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * КоличествоСопоставленных - Число
//  - Неопределено - Если результат помещен в хранилище
Функция ОбновитьСчетчикиИзРегистра(Знач ПараметрыОбновления, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеСчетчики, НовыеСчетчики, КоличествоСопоставленных, ТекстСообщения",
            Истина, Новый Массив, Новый Массив, 0, "");

    СоздаватьНовыеСчетчики = Истина;
    Если ПараметрыОбновления.Свойство("СоздаватьНовые") И ПараметрыОбновления.СоздаватьНовые <> Неопределено Тогда
        СоздаватьНовыеСчетчики = ПараметрыОбновления.СоздаватьНовые;
    КонецЕсли;

    // Получение данных счетчиков БП77 из регистра
    ТаблицаСчетчиковБП77 = ПолучитьДанныеСчетчиковИзРегистра(Ложь);

    НачатьТранзакцию();
    Попытка
        // Обновление данных счетчиков / создание новых счетчиков
        Для Каждого СчетчикБП77 Из ТаблицаСчетчиковБП77 Цикл
            СчетчикСсылка = Неопределено;
            Если ЗначениеЗаполнено(СчетчикБП77.Счетчик) = Ложь И СоздаватьНовыеСчетчики Тогда
                // Создание заполнение и запись нового элемента счетчика
                СчетчикСсылка = СоздатьИЗаполнитьНовыйСчетчик(СчетчикБП77).ПолучитьОбъект();
                РезультатФункции.НовыеСчетчики.Добавить(СчетчикСсылка);
            Иначе
                // Обновление данных счетчика
                СчетчикОбъект = СчетчикБП77.Счетчик.ПолучитьОбъект();
                ЗаполнитьДанныеСчетчика(СчетчикОбъект, СчетчикБП77, Ложь);
                СчетчикОбъект.Записать();
                РезультатФункции.ОбновленныеСчетчики.Добавить(СчетчикОбъект.Ссылка);
            КонецЕсли;

            // Заполнение ссылки на счетчик для процедуры сопоставления счетчиков
            Если СчетчикСсылка <> Неопределено Тогда
                СчетчикБП77.Счетчик = СчетчикСсылка;
            КонецЕсли;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании (обновлении) данных счетчиков.";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.ОбновленныеСчетчики.Очистить();
        РезультатФункции.НовыеСчетчики.Очистить();
    КонецПопытки;

    Если РезультатФункции.Успех Тогда
        РезультатСопоставления = УстановитьСоответствияСчетчиковРегистраСОбъектамиИБ(ТаблицаСчетчиковБП77, Истина);
        РезультатФункции.КоличествоСопоставленных = РезультатСопоставления.ОбновленныеСчетчики.Количество();
    КонецЕсли;

    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(РезультатФункции, АдресХранилища);
        Возврат Неопределено;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Получает все записи из регистра ГП_СчетчикиБП77
// Параметры:
//  ТолькоДляСоздания - Булево - Если Истина, возвращает только записи где поле Счетчик не заполнено
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьДанныеСчетчиковИзРегистра(Знач ТолькоДляСоздания = Ложь) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   *
        |ИЗ
        |   РегистрСведений.ГП_СчетчикиБП77 КАК ГП_СчетчикиБП77
        |";

    УсловиеЗапроса =
        "ГДЕ
        |   ГП_СчетчикиБП77.Счетчик <> &ПустойСчетчик
        |";

    Если ТолькоДляСоздания = Ложь Тогда
        УсловиеЗапроса = "";
    Иначе
        Запрос.УстановитьПараметр("ПустойСчетчик", Справочники.КВП_Счетчики.ПустаяСсылка());
    КонецЕсли;

    Запрос.Текст = СтрШаблон("%1%2", Запрос.Текст, УсловиеЗапроса);

    РезультатЗапроса = Запрос.Выполнить();
    Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Устанавливает соответствие счетчиков БП77 из регистра с Счетчиками ИБ (записывает ссылку на счетчик в поле регистра Счетчик)
// Параметры:
//  ТаблицаСчетчиковРегистра - ТаблицаЗначений
//  ВыполнятьПоискПоИдентификатору - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * ТекстСообщения - Строка
Функция УстановитьСоответствияСчетчиковРегистраСОбъектамиИБ(
        Знач ТаблицаСчетчиковРегистра, Знач ВыполнятьПоискПоИдентификатору = Истина) Экспорт

    РезультатФункции = Новый Структура("Успех, ОбновленныеСчетчики, ТекстСообщения", Истина, Новый Массив, "");

    НачатьТранзакцию();
    Попытка
        Для Каждого СчетчикБП77 Из ТаблицаСчетчиковРегистра Цикл
            Если ТипЗнч(СчетчикБП77.Счетчик) <> Тип("СправочникСсылка.КВП_Счетчики") ИЛИ ЗначениеЗаполнено(СчетчикБП77.Счетчик) = Ложь Тогда
                Если ВыполнятьПоискПоИдентификатору = Ложь Тогда
                    Продолжить; // Не записываем пустые значения
                КонецЕсли;

                НайденныйСчетчик = НайтиСчетчикПоИдентификаторуБП77(СчетчикБП77, Ложь);
                Если НайденныйСчетчик <> Неопределено Тогда
                    СчетчикБП77.Счетчик = НайденныйСчетчик;
                Иначе
                    Продолжить; // Не записываем пустые значения
                КонецЕсли;
            КонецЕсли;

            НаборЗаписейСчетчиков = СоздатьНаборЗаписейСчетчикаБП77(СчетчикБП77);
            НоваяЗапись = НаборЗаписейСчетчиков.Добавить();

            ЗаполнитьЗначенияСвойств(НоваяЗапись, СчетчикБП77, , "Счетчик");
            НоваяЗапись.Счетчик = СчетчикБП77.Счетчик;
            НаборЗаписейСчетчиков.Записать(Истина);
            РезультатФункции.ОбновленныеСчетчики.Добавить(НоваяЗапись.Счетчик);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при записи соответствий счетчиков в регистр ""ГП_СчетчикиБП77"".";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.ОбновленныеСчетчики.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Удаляет (помечает на удаление) все созданные счетчики созданные на основании данных БП77
// Возвращаемое значение:
//  - Число - Количество удаленных счетчиков
Функция УдалитьВсеСчетчикиБП77() Экспорт
    РезультатФункции = 0;

    ТаблицаСчетчиков = ПолучитьВсеСозданныеСчетчики();
    Для Каждого Счетчик Из ТаблицаСчетчиков Цикл
        СчетчикОбъект = Счетчик.Ссылка.ПолучитьОбъект();
        СчетчикОбъект.ПометкаУдаления = Истина;
        СчетчикОбъект.Записать();
        РезультатФункции = РезультатФункции + 1;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
//  СчетчикКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx-xxx (КонтрагентКод{8}-ОбъектАбонентаКод{4}-СчетчикКод{3})
Функция СформироватьИдентификаторСчетчикаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод, Знач СчетчикКод) Экспорт
    Возврат ГП_МиграцияПриборовУчета.СформироватьСоставнойКодСчетчикаБП77(КонтрагентКод, ОбъектАбонентаКод, СчетчикКод);
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --

// Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область СлужебныеПроцедурыИФункции

#Область СозданиеСчетчиковИЗаполнениеДанных
#Область ОсновныеДанныеСчетчиков
// Выполняет запись исходных данных счетчиков в регистр ГП_СчетчикиБП77 (по данным из БП77)
// Параметры:
//  ИсходныеДанныеСчетчиков - СписокXDTO, Массив из Структура
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеСчетчиковВРегистр(Знач ИсходныеДанныеСчетчиков)
    Возврат ГП_МиграцияПриборовУчета.ЗаписатьДанныеСчетчиковВРегистр(ИсходныеДанныеСчетчиков);
КонецФункции

// Параметры:
//  СчетчикБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_УслугиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейСчетчикаБП77(Знач СчетчикБП77)
    Возврат ГП_МиграцияПриборовУчета.СоздатьНаборЗаписейСчетчикаБП77(СчетчикБП77);
КонецФункции

// Выполняет создание нового элемента счетчика и заполнение данных, созданный элемент записывается в ИБ
// Параметры:
//  ДанныеДляЗаполнения - Структура, СтрокаТаблицыЗначений
//  ДопЧислоДляГенерацииИдентификаторов - Число, Неопределено
// Возвращаемое значение:
//  СправочникСсылка.КВП_Счетчики - Ссылка на созданный элемент
Функция СоздатьИЗаполнитьНовыйСчетчик(Знач ДанныеДляЗаполнения, Знач ДопЧислоДляГенерацииИдентификаторов = Неопределено)
    ДопЧислоДляГенерацииИдентификаторов = ?(ДопЧислоДляГенерацииИдентификаторов = Неопределено, 0, ДопЧислоДляГенерацииИдентификаторов);

    НовыйСчетчик = Справочники.КВП_Счетчики.СоздатьЭлемент();
    ЗаполнитьДанныеСчетчика(НовыйСчетчик, ДанныеДляЗаполнения, Ложь, ДопЧислоДляГенерацииИдентификаторов);
    НовыйСчетчик.Записать();

    Возврат НовыйСчетчик.Ссылка;
КонецФункции

// Параметры:
//  СчетчикОбъект - СправочникОбъект.КВП_Справочники
//  ДанныеДляЗаполнения - Структура, СтрокаТаблицыЗначений - Данные из регистра ГП_СчетчикиБП77
//  Записать - Булево
//  ДопЧислоДляГенерацииИдентификаторов - Число, Неопределено
Процедура ЗаполнитьДанныеСчетчика(
        Знач СчетчикОбъект, Знач ДанныеДляЗаполнения, Знач Записать = Ложь, ДопЧислоДляГенерацииИдентификаторов = Неопределено)

    // Идентификатор БП77
    СчетчикОбъект.ГП_ИдентификаторБП77 = СформироватьИдентификаторСчетчикаБП77(
            ДанныеДляЗаполнения.КонтрагентКод, ДанныеДляЗаполнения.ОбъектАбонентаКод, ДанныеДляЗаполнения.СчетчикКод);

    СчетчикОбъект.Наименование = ДанныеДляЗаполнения.СчетчикНаименование;
    // Гарант+ Килипенко 10-09-2024 [hotfix] Установка разрядности счетчика по умолчанию ++
    СчетчикОбъект.Разрядность = ГП_МиграцияПриборовУчета.ПолучитьРазрядностьСчетчикаПоМаксимальномуПоказателю(
            ДанныеДляЗаполнения.МаксимальныйПоказатель);
    // Гарант+ Килипенко 10-09-2024 [hotfix] Установка разрядности счетчика по умолчанию --
    СчетчикОбъект.Коэффициент = ДанныеДляЗаполнения.КоэффициентПересчета;
    СчетчикОбъект.ДатаПервойПоверки = ДанныеДляЗаполнения.ДатаУстановки;
    СчетчикОбъект.ГП_ДатаУстановки = ДанныеДляЗаполнения.ДатаУстановки;
    СчетчикОбъект.ГП_Комментарий = ДанныеДляЗаполнения.Комментарий;
    СчетчикОбъект.ГП_СозданАвтоматически = Истина;

    // Тарифность (по умолчанию 1-тарифный)
    СчетчикОбъект.Тарифность = ПолучитьТарифностьПоУмолчанию();

    // Гарант+ Килипенко 10-09-2024 [hotfix] Принудительная установка Способа регистрации - НарастающимИтогом ++
    //
    // Способ регистрации показаний
    // Если ДанныеДляЗаполнения.ЗначенияПоказаний = "ЗаПериод" Тогда
    //     СчетчикОбъект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета;
    // Иначе
    //     СчетчикОбъект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом;
    // КонецЕсли;

    СчетчикОбъект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом;
    // Гарант+ Килипенко 10-09-2024 [hotfix] Принудительная установка Способа регистрации - НарастающимИтогом --

    // Вид услуги
    СоответствиеКодовУслуг = ПолучитьСоответствиеКодовУслугСчетчиковБП77();
    НайденныйКодУслуги = Неопределено;

    Если ДанныеДляЗаполнения.СчетчикНаименование <> "Счетчик ХВ (Подогрев)"
        И ЭтоСчетчикПодогреваВоды(ДанныеДляЗаполнения.СчетчикНаименование) Тогда

        // Дополнение к ТЗ подогрев по наименованию (если в наименовании счетчика встречается слово
        //  подогрев - безусловно установка в "Счетчик ХВ (Подогрев)")
        НайденныйКодУслуги = СоответствиеКодовУслуг.Получить("Счетчик ХВ (Подогрев)");
    ИначеЕсли ДанныеДляЗаполнения.ТолькоДляКанализации И ДанныеДляЗаполнения.ВидСчетчика = "ХолоднаяВода" Тогда
        // Дополнение к ТЗ для ХВ с признаком ТолькоДляКанализации
        НайденныйКодУслуги = СоответствиеКодовУслуг.Получить(ДанныеДляЗаполнения.ВидСчетчика + "Водоотвод");
    Иначе
        НайденныйКодУслуги = СоответствиеКодовУслуг.Получить(ДанныеДляЗаполнения.ВидСчетчика);
    КонецЕсли;

    Если НайденныйКодУслуги <> Неопределено Тогда
        СчетчикОбъект.ВидУслуги = Справочники.КВП_Услуги.НайтиПоКоду(НайденныйКодУслуги);
    Иначе
        ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                "ВНИМАНИЕ!!! Не не найдена услуга для вида счетчика: %1", ДанныеДляЗаполнения.ВидСчетчика));
    КонецЕсли;

    // Межпроверочный интервал
    МежпроверочныйИнтервал = ПолучитьМежпроверочныйИнтервалПериодичности(ДанныеДляЗаполнения.ПериодичностьПоверки);
    Если МежпроверочныйИнтервал <> Неопределено Тогда
        СчетчикОбъект.МежпроверочныйИнтервал = МежпроверочныйИнтервал;
    КонецЕсли;

    // Модель счетчика
    РезультатПоиска = НайтиМодельПрибораУчетаДляСчетчикаБП77(
            ДанныеДляЗаполнения.ТипСчетчикаКод, ДанныеДляЗаполнения.ТипСчетчикаНаименование);
    СчетчикОбъект.Модель = РезультатПоиска.МодельПрибораУчета;

    // Идентификатор
    ДопЧислоДляГенерацииИдентификаторов = ?(ДопЧислоДляГенерацииИдентификаторов = Неопределено, 0, ДопЧислоДляГенерацииИдентификаторов);
    Если ЗначениеЗаполнено(СчетчикОбъект.Идентификатор) = Ложь Тогда
        СчетчикОбъект.Идентификатор = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторСчетчика( ,
                СчетчикОбъект.Код, ДопЧислоДляГенерацииИдентификаторов, Истина);
    КонецЕсли;

    // Заполнение признака ТолькоДляКанализации
    СчетчикОбъект.ГП_ТолькоДляКанализации = ДанныеДляЗаполнения.ТолькоДляКанализации;

    // Расшифровка заводского номера
    СтруктураНомера = ГП_МиграцияПриборовУчета.ПолучитьЗаводскойНомерИзКомментарияБП77(ДанныеДляЗаполнения.Комментарий);
    Если СтруктураНомера.Успех = Истина Тогда
        СчетчикОбъект.ЗаводскойНомер = СтруктураНомера.Номер;
    КонецЕсли;

    Если Записать Тогда
        СчетчикОбъект.Записать();
    КонецЕсли;
КонецПроцедуры
#КонецОбласти // ОсновныеДанныеСчетчиков

// Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
#Область ИсторияДанныхИПоказанийСчетчиков
// Выполняет запись исходных данных показаний счетчиков в регистр (по данным из БП77).
//  Внимание! Если ПерезаписатьСуществующие = Истина - Все ранее сделанные записи в регистр
//  по соответствующим наборам измерений будут перезаписаны.
// Параметры:
//  ДанныеПоказанийСчетчиков - СписокXDTO, Массив из Структура
//  ПерезаписатьСуществующие - Булево - Если Истина Все ранее сделанные записи по соответствующим наборам измерений будут перезаписаны
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхПоказаний - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеПоказанийСчетчиковВРегистр(Знач ДанныеПоказанийСчетчиков, Знач ПерезаписатьСуществующие = Истина)
    Возврат ГП_МиграцияПриборовУчета.ЗаписатьДанныеПоказанийСчетчиковВРегистр(ДанныеПоказанийСчетчиков, ПерезаписатьСуществующие);
КонецФункции

// Устарела. Требует рефакторинг
//
// Выполняет запись периодических данных счетчиков в регистры сведений (по данным из БП77).
//  Внимание! Если ПерезаписатьСуществующие = Истина - Все ранее сделанные записи в регистр
//  по соответствующим наборам измерений будут перезаписаны.
// Параметры:
//  ДанныеИсторииСчетчиков - СписокXDTO, Массив из Структура
//  ПерезаписатьСуществующие - Булево - Если Истина Все ранее сделанные записи по соответствующим наборам измерений будут перезаписаны
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСпособовРегистрации - Число
//      * КоличествоЗаписанныхАктивностей - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьИсториюДанныеСчетчиковВРегистры(Знач ДанныеИсторииСчетчиков, Знач ПерезаписатьСуществующие = Истина)
    Возврат ГП_МиграцияПриборовУчета.ЗаписатьИсториюДанныеСчетчиковВРегистры(ДанныеИсторииСчетчиков, ПерезаписатьСуществующие);
КонецФункции

// Параметры:
//  СчетчикаБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
//  Период - Дата, Неопределено
// Возвращаемое значение:
//  - РегистрСведений.ГП_СчетчикиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейПоказанийСчетчикаБП77(Знач СчетчикаБП77, Знач Период = Неопределено)
    Возврат ГП_МиграцияПриборовУчета.СоздатьНаборЗаписейПоказанийСчетчикаБП77(СчетчикаБП77, Период);
КонецФункции

// Параметры:
//  ТипИсторииДанных - Строка
//  СчетчикаБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
//  Период - Дата, Неопределено
// Возвращаемое значение:
//  - РегистрСведений.ГП_СчетчикиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейИсторииДанныхСчетчикаБП77(Знач ТипИсторииДанных, Знач СчетчикаБП77, Знач Период = Неопределено)
    Возврат ГП_МиграцияПриборовУчета.СоздатьНаборЗаписейИсторииДанныхСчетчикаБП77(ТипИсторииДанных, СчетчикаБП77, Период);
КонецФункции

// Устарела. После изменения формата файла данных - исправить
//
// Возвращаемое значение:
//  - Число
Функция РазобратьСписокПериодическихЗначений(
        Знач СтруктураПоказанийСчетчикаБП77, Знач НаборЗаписей, Знач ПерезаписатьСуществующие, Знач ПараметрыКонтейнера)

    Возврат ГП_МиграцияПриборовУчета.РазобратьСписокПериодическихЗначений(
        СтруктураПоказанийСчетчикаБП77, НаборЗаписей, ПерезаписатьСуществующие, ПараметрыКонтейнера);
КонецФункции

// Устарела. После изменения формата файла данных - исправить
//
// Параметры:
//  СписокПоказаний - СписокXDTO, Структура
//      * Дата_0..n - Строка - Где 0..n это индекс
//      * Значение_0..n - Строка - Где 0..n это индекс
//  Индекс - Число
//  ТипЗначения - Тип
// Возвращаемое значение:
//  - Структура
//      * Дата - Дата
//      * Значение - Произвольный
Функция РазобратьЭлементПереодическогоЗначения(Знач СписокПоказаний, Знач Индекс, Знач ТипЗначения)
    Возврат ГП_МиграцияПриборовУчета.РазобратьЭлементПереодическогоЗначения(СписокПоказаний, Индекс, ТипЗначения);
КонецФункции
#КонецОбласти // ИсторияДанныхИПоказанийСчетчиков
// Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --
#КонецОбласти // ЗаполнениеДанныхСчетчиков

#Область ПолучениеДанныхСчетчиков
// Получает таблицу ссылок всех созданных счетчиков по данным БП77.
//  Критерием отбора служит наличие заполненного реквизита ГП_ИдентификаторБП77 по маске "________-____-___".
// Параметры:
//  СтрогоПоМаске - Булево - Если Истина, отбор выполняется строго по маске, иначе по факту заполненности реквизита ГП_ИдентификаторБП77
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьВсеСозданныеСчетчики(Знач СтрогоПоМаске = Истина)
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |	КВП_Счетчики.Ссылка КАК Ссылка
        |ИЗ
        |	Справочник.КВП_Счетчики КАК КВП_Счетчики
        |ГДЕ
        |	КВП_Счетчики.ГП_ИдентификаторБП77 ПОДОБНО &МаскаИдентификатора
        |";

    Если СтрогоПоМаске Тогда
        Запрос.УстановитьПараметр("МаскаИдентификатора", ПолучитьМаскуИдентификатораСчетчикаДляПодобно());
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,
                "КВП_Счетчики.ГП_ИдентификаторБП77 ПОДОБНО &МаскаИдентификатора", "КВП_Счетчики.ГП_ИдентификаторБП77 <> """"");
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Выполняет поиск КВП_Счетчика по составному коду БП77 (идентификатору)
// Параметры:
//  ИдентификаторБП77 - Строка, Структура
//      * КонтрагентКод - Строка - Код контрагента в БП77
//      * ОбъектАбонентаКод - Строка - Код объекта абонента в БП77
//      * СчетчикКод - Строка - Код счетчика в БП77
//  ВсеНайденные - Булево - Если Истина, будут возвращены все найденные счетчики соответствующие идентификатору, иначе только один
// Возвращаемое значение:
//  - ТаблицаЗначений
//  - СправочникСсылка.КВП_Счетчики, Неопределено
Функция НайтиСчетчикПоИдентификаторуБП77(Знач ИдентификаторБП77, Знач ВсеНайденные = Истина)
    Если ТипЗнч(ИдентификаторБП77) <> Тип("Строка") Тогда
        ИдентификаторБП77 = СформироватьИдентификаторСчетчикаБП77(
                ИдентификаторБП77.КонтрагентКод, ИдентификаторБП77.ОбъектАбонентаКод, ИдентификаторБП77.СчетчикКод);
    КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   КВП_Счетчики.Ссылка КАК Ссылка,
        |   КВП_Счетчики.ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.КВП_Счетчики КАК КВП_Счетчики
        |ГДЕ
        |   КВП_Счетчики.ГП_ИдентификаторБП77 = &ИдентификаторБП77
        |
        |УПОРЯДОЧИТЬ ПО
        |   КВП_Счетчики.ПометкаУдаления УБЫВ,
        |   КВП_Счетчики.Ссылка
        |";
    Запрос.УстановитьПараметр("ИдентификаторБП77", ИдентификаторБП77);

    РезультатЗапроса = Запрос.Выполнить();

    Если ВсеНайденные = Ложь Тогда
        Если РезультатЗапроса.Пустой() Тогда
            Возврат Неопределено;
        КонецЕсли;

        Выборка = РезультатЗапроса.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Ссылка;
    Иначе
        Возврат РезультатЗапроса.Выгрузить();
    КонецЕсли;
КонецФункции

// Параметры:
//  Код - Строка - Код счетчика в БП77
//  Наименование - Строка - Наименование счетчика в БП77
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * МодельПрибораУчета - СправочникСсылка.УПЖКХ_МоделиПриборовУчета
Функция НайтиМодельПрибораУчетаДляСчетчикаБП77(Знач Код, Знач Наименование)
    РезультатФункции = Новый Структура("Успех, МодельПрибораУчета", Ложь, Справочники.УПЖКХ_МоделиПриборовУчета.ПустаяСсылка());

    АргументыЗаполнены = (ТипЗнч(Код) = Тип("Строка") И ТипЗнч(Наименование) = Тип("Строка"))
        И (ЗначениеЗаполнено(Код) ИЛИ ЗначениеЗаполнено(Наименование));

    Если АргументыЗаполнены = Ложь Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    Если ЗначениеЗаполнено(Код) Тогда
        РезультатФункции.МодельПрибораУчета = Справочники.УПЖКХ_МоделиПриборовУчета.НайтиПоКоду(Код);
    КонецЕсли;

    Если РезультатФункции.МодельПрибораУчета = Справочники.УПЖКХ_МоделиПриборовУчета.ПустаяСсылка() И ЗначениеЗаполнено(Наименование) Тогда
        РезультатФункции.МодельПрибораУчета = Справочники.УПЖКХ_МоделиПриборовУчета.НайтиПоНаименованию(Наименование, Истина);
    КонецЕсли;

    РезультатФункции.Успех = РезультатФункции.МодельПрибораУчета <> Справочники.УПЖКХ_МоделиПриборовУчета.ПустаяСсылка();

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // ПолучениеДанныхСчетчиков

#Область ВспомогательныеФункцииЗаполнения
// Параметры:
//  КоличествоМесяцев - Число
// Возвращаемое значение:
//  - ПеречислениеСсылка.УПЖКХ_МежпроверочныеИнтервалыСчетчиков, Неопределено
Функция ПолучитьМежпроверочныйИнтервалПериодичности(Знач КоличествоМесяцев)
    Возврат ГП_МиграцияПриборовУчета.ПолучитьМежпроверочныйИнтервалПериодичности(КоличествоМесяцев);
КонецФункции

// Параметры:
//  НаименованиеСчетчика - Строка
// Возвращаемое значение:
//  - Булево
Функция ЭтоСчетчикПодогреваВоды(Знач НаименованиеСчетчика)
    Если ТипЗнч(НаименованиеСчетчика) <> Тип("Строка") ИЛИ ПустаяСтрока(НаименованиеСчетчика) Тогда
        Возврат Ложь;
    КонецЕсли;

    РезультатФункции = СтрПодобнаПоРегулярномуВыражению(НаименованиеСчетчика, "(?i)(?:.+[\s0-9(]+|^)[\s(]*подогрев.*");
    Возврат РезультатФункции;
КонецФункции

// Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
//
// Служебная функция. Помещает результат во временное хранилище или выполняет возврат результата
// Параметры:
//  Результат - Произвольный
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПоместитьВХранилищеИВернуть(Знач Результат, Знач АдресХранилища = Неопределено)
    Возврат ГП_МиграцияОбщегоНазначения.ПоместитьВХранилищеИВернуть(Результат, АдресХранилища);
КонецФункции // Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --
#КонецОбласти // ВспомогательныеФункцииЗаполнения

#Область КонстантыСчетчиков
// Возвращаемое значение:
//  - Строка
Функция ПолучитьМаскуИдентификатораСчетчикаДляПодобно()
    Возврат ГП_МиграцияПриборовУчета.ПолучитьМаскуСоставногоКодаСчетчикаДляПодобно();
КонецФункции

// Возвращаемое значение:
//  - Соответствие
Функция ПолучитьСоответствиеКодовУслугСчетчиковБП77()
    Возврат ГП_МиграцияПриборовУчета.ПолучитьСоответствиеКодовУслугСчетчиковБП77();
КонецФункции

// Устарела. Использовать ГП_МиграцияПриборовУчета.ПолучитьТарифностьСчетчикаПоУмолчанию
//
// Возвращаемое значение:
//  - ПеречислениеСсылка.КВП_ТарифностьСчетчиков - По умолчанию Однотарифный (1-тарифный)
Функция ПолучитьТарифностьПоУмолчанию()
    Возврат ГП_МиграцияПриборовУчета.ПолучитьТарифностьСчетчикаПоУмолчанию();
КонецФункции
#КонецОбласти // КонстантыСчетчиков

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --
