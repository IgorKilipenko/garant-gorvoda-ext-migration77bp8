// ++ Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область ПрограммныйИнтерфейс

// Выполняет чтение данных счетчиков (из ИБ БП 7.7) и записывает данные в регистр ГП_СчетчикиБП77 для последующего
//  добавления / обновления счетчиков БП 8
// Параметры:
//  ПараметрыВыгрузки - Структура
//  АдресХранилища - Строка
Процедура ЗагрузитьДанныеВИБ(ПараметрыВыгрузки, АдресХранилища) Экспорт
    РезультатВыполнения = Новый Структура("Успех, КоличествоЗаписанныхСчетчиков, ТекстСообщения", Ложь, 0);

    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
    ДвоичныеДанныеФайла = ПараметрыВыгрузки.ДвоичныеДанныеФайла;
    ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

    ЧтениеXML = Новый ЧтениеXML();
    ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);

    СправочникиБП77 = Неопределено;
    Попытка
        // Выполняем разбор файла xml
        СправочникиБП77 = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    Исключение
        // Ошибка разбора файла xml
        РезультатВыполнения.ТекстСообщения = НСтр("ru = 'Ошибка анализа файла xml.'");
        РезультатВыполнения.ТекстСообщения = СтрШаблон(
            "%1
            |Описание ошибки: %2" ,
            РезультатВыполнения.ТекстСообщения,
            ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

        ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
        Возврат;    // Ошибка разбора файла
    КонецПопытки;

    // Проверка валидности данных счетчиков
    ЭтоДопустимыйОбъект = (ТипЗнч(СправочникиБП77) = Тип("ОбъектXDTO") И СправочникиБП77.Свойства().Получить("Счетчик") <> Неопределено);
    Если ЭтоДопустимыйОбъект = Ложь Тогда
        РезультатВыполнения.ТекстСообщения = НСтр("ru = 'Данные счетчиков не обнаружены.'");

        ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
        Возврат;    // Нет данных счетчиков или данные недопустимой структуры
    КонецЕсли;

    // Запись данных счетчиков в регистр
    РезультатЗаписи = ЗаписатьДанныеСчетчиковВРегистр(СправочникиБП77.Счетчик);

    // Запись результата во временное хранилище
    РезультатВыполнения.Успех = РезультатЗаписи.Успех;
    РезультатВыполнения.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатВыполнения.КоличествоЗаписанныхСчетчиков = РезультатЗаписи.КоличествоЗаписанныхСчетчиков;
    ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
КонецПроцедуры

// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
//  СчетчикКод - Строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьИдентификаторСчетчикаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод, Знач СчетчикКод) Экспорт
    НаправлениеДополнения = "Слева";
    СимволДополнения = "0";

    Возврат СтрШаблон("%1-%2-%3",
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КонтрагентКод, 8, СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОбъектАбонентаКод, 4, СимволДополнения, НаправлениеДополнения),
        СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СчетчикКод, 3, СимволДополнения, НаправлениеДополнения));
КонецФункции

// Выполняет запись данных счетчиков в регистр ГП_СчетчикиБП77
// Параметры:
//  ИсходныеДанныеСчетчиков - Массив из Структура
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеСчетчиковВРегистр(Знач ИсходныеДанныеСчетчиков) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхСчетчиков, СообщениеОбОшибке", Истина, 0);

    Если ИсходныеДанныеСчетчиков = Неопределено ИЛИ ИсходныеДанныеСчетчиков.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиДатСчетчика = "ДатаУстановки,ДатаПоверки,ДатаПоказаний,ДатаБудущейПоверки";
    КлючиУсловийСчетчика = "ТолькоДляКанализации";
    КлючиЧиселСчетчика = "ПериодичностьПоверки,КоэффициентПересчета,МаксимальныйПоказатель";

    // Транзакция записи счетчиков в регистр ГП_СчетчикиБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого СчетчикБП77 Из ИсходныеДанныеСчетчиков Цикл
            НаборЗаписейСчетчиков = РегистрыСведений.ГП_СчетчикиБП77.СоздатьНаборЗаписей();
            НаборЗаписейСчетчиков.Отбор.КонтрагентКод.Установить(СчетчикБП77.КонтрагентКод);
            НаборЗаписейСчетчиков.Отбор.ОбъектАбонентаКод.Установить(СчетчикБП77.ОбъектАбонентаКод);
            НаборЗаписейСчетчиков.Отбор.СчетчикКод.Установить(СчетчикБП77.СчетчикКод);

            НоваяЗапись = НаборЗаписейСчетчиков.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяЗапись, СчетчикБП77, ,
                СтрШаблон("%1,%2,%3", КлючиДатСчетчика, КлючиУсловийСчетчика, КлючиЧиселСчетчика));

            Для каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиДатСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВДату(СчетчикБП77[Ключ], ЧастиДаты.Дата);
            КонецЦикла;
            Для каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(СчетчикБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СчетчикБП77[Ключ]);
            КонецЦикла;

            НаборЗаписейСчетчиков.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхСчетчиков = РезультатФункции.КоличествоЗаписанныхСчетчиков + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных счетчиков в регистр ""ГП_СчетчикиБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхСчетчиков = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ПараметрыОбновления - Структура
//      * СоздаватьНовые - Булево - Если Истина, в случае отсутствия счетчика в ИБ будет создаваться новый
//          счетчик по данным записи в регистре
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * ОбновленныеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * НовыеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//  - Неопределено - Если результат помещен в хранилище
Функция ОбновитьСчетчикиИзРегистра(Знач ПараметрыОбновления, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеСчетчики, НовыеСчетчики, ТекстСообщения", Истина, Новый Массив, Новый Массив, "");

    СоздаватьНовыеСчетчики = Истина;
    Если ПараметрыОбновления.Свойство("СоздаватьНовые") И ПараметрыОбновления.СоздаватьНовые <> Неопределено Тогда
        СоздаватьНовыеСчетчики = ПараметрыОбновления.СоздаватьНовые;
    КонецЕсли;

    // Получение данных счетчиков БП77 из регистра
    ТаблицаСчетчиковБП77 = ПолучитьДанныеСчетчиковИзРегистра(Ложь);

    НачатьТранзакцию();
    Попытка
        // Обновление данных счетчиков / создание новых счетчиков
        Для Каждого СчетчикБП77 Из ТаблицаСчетчиковБП77 Цикл
            Если ЗначениеЗаполнено(СчетчикБП77.Счетчик) = Ложь И СоздаватьНовыеСчетчики Тогда
                // Создание нового счетчика
                СозданныйСчетчикСсылка = СоздатьНовыйСчетчик(СчетчикБП77).ПолучитьОбъект();
                РезультатФункции.НовыеСчетчики.Добавить(СозданныйСчетчикСсылка);
            Иначе
                // Обновление данных счетчика
                СчетчикОбъект = СчетчикБП77.Счетчик.ПолучитьОбъект();
                ЗаполнитьДанныеСчетчика(СчетчикОбъект, СчетчикБП77);
                РезультатФункции.ОбновленныеСчетчики.Добавить(СчетчикОбъект.Ссылка);
            КонецЕсли;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании (обновлении) данных счетчиков.";
            ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
                ОбщаяЧастьСообщения,
                УровеньЖурналаРегистрации.Ошибка, , ,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.ОбновленныеСчетчики.Очистить();
        РезультатФункции.НовыеСчетчики.Очистить();
    КонецПопытки;

    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(РезультатФункции, АдресХранилища);
        Возврат Неопределено;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТолькоДляСоздания - Булево - Если Истина, возвращает только записи где поле Счетчик не заполнено
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьДанныеСчетчиковИзРегистра(Знач ТолькоДляСоздания = Ложь) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   *
        |ИЗ
        |   РегистрСведений.ГП_СчетчикиБП77 КАК ГП_СчетчикиБП77
        |";

    УсловиеЗапроса =
        "ГДЕ
        |   ГП_СчетчикиБП77.Счетчик <> &ПустойСчетчик
        |";

    Если ТолькоДляСоздания = Ложь Тогда
        УсловиеЗапроса = "";
    Иначе
        Запрос.УстановитьПараметр("ПустойСчетчик", Справочники.КВП_Счетчики.ПустаяСсылка());
    КонецЕсли;

    Запрос.Текст = СтрШаблон("%1%2", Запрос.Текст, УсловиеЗапроса);

    РезультатЗапроса = Запрос.Выполнить();
    Возврат РезультатЗапроса.Выгрузить();
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// -- Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --

// ++ Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область СлужебныеПроцедурыИФункции

Функция СоздатьНовыйСчетчик(Знач ДанныеДляЗаполнения)
    НовыйСчетчик = Справочники.КВП_Счетчики.СоздатьЭлемент();
    ЗаполнитьДанныеСчетчика(НовыйСчетчик, ДанныеДляЗаполнения);
    НовыйСчетчик.Записать();

    Возврат НовыйСчетчик.Ссылка;
КонецФункции

Процедура ЗаполнитьДанныеСчетчика(Знач СчетчикОбъект, Знач ДанныеДляЗаполнения)
    СчетчикОбъект.ГП_ИдентификаторБП77 = СформироватьИдентификаторСчетчикаБП77(
            ДанныеДляЗаполнения.КонтрагентКод, ДанныеДляЗаполнения.ОбъектАбонентаКод, ДанныеДляЗаполнения.СчетчикКод);
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
// -- Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --
