// ++ Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область ПрограммныйИнтерфейс

// Выполняет запись данных счетчиков БП77 (из файла XML) в регистр сведений ГП_СчетчикиБП77
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено - Если указан адрес, результат будет помещен в хранилище
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено - Если АдресХранилища = Неопределено
Функция ЗагрузитьДанныеСчетчиковВРегистр(Знач ПараметрыЗагрузки, Знач АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхСчетчиков, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияПриборовУчета.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "Счетчик");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных счетчиков.";
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных счетчиков в регистр
    СчетчикиБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеСчетчиковВРегистр(СчетчикиБП77);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхСчетчиков = РезультатЗаписи.КоличествоЗаписанныхСчетчиков;

    Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// ++ Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
//
// Выполняет запись периодических показаний счетчиков БП77 (из файла XML) в регистр сведений
// Параметры:
//  ПараметрыЗагрузки - Структура
//      * ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено - Если указан адрес, результат будет помещен в хранилище
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхПоказаний - Число
//      * ТекстСообщения - Строка, Неопределено
//  - Неопределено - Если АдресХранилища = Неопределено
Функция ЗагрузитьПоказанияСчетчиковВРегистр(Знач ПараметрыЗагрузки, Знач АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхПоказаний, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияПриборовУчета.ПрочитатьДанныеИзФайлаXML(ПараметрыЗагрузки.ДвоичныеДанныеФайла, "ПоказанияСчетчик");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных показаний счетчиков.";
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных счетчиков в регистр
    ПоказанияСчетчиковБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеПоказанийСчетчиковВРегистр(ПоказанияСчетчиковБП77);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.КоличествоЗаписанныхПоказаний = РезультатЗаписи.КоличествоЗаписанныхПоказаний;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;

    Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции // -- Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --

// Выполняет создание и обновление счетчиков по данным записей в регистре ГП_СчетчикиБП77.
//  Для записей в регистре устанавливаются соответствия для созданных и обновленных счетчиков (заполняется измерение Счетчик)
// Параметры:
//  ПараметрыОбновления - Структура
//      * СоздаватьНовые - Булево - Если Истина, в случае отсутствия счетчика в ИБ будет создаваться новый
//          счетчик по данным записи в регистре
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * НовыеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * КоличествоСопоставленных - Число
//  - Неопределено - Если результат помещен в хранилище
Функция ОбновитьСчетчикиИзРегистра(Знач ПараметрыОбновления, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеСчетчики, НовыеСчетчики, КоличествоСопоставленных, ТекстСообщения",
            Истина, Новый Массив, Новый Массив, 0, "");

    СоздаватьНовыеСчетчики = Истина;
    Если ПараметрыОбновления.Свойство("СоздаватьНовые") И ПараметрыОбновления.СоздаватьНовые <> Неопределено Тогда
        СоздаватьНовыеСчетчики = ПараметрыОбновления.СоздаватьНовые;
    КонецЕсли;

    // Получение данных счетчиков БП77 из регистра
    ТаблицаСчетчиковБП77 = ПолучитьДанныеСчетчиковИзРегистра(Ложь);

    НачатьТранзакцию();
    Попытка
        // Обновление данных счетчиков / создание новых счетчиков
        Для Каждого СчетчикБП77 Из ТаблицаСчетчиковБП77 Цикл
            СчетчикСсылка = Неопределено;
            Если ЗначениеЗаполнено(СчетчикБП77.Счетчик) = Ложь И СоздаватьНовыеСчетчики Тогда
                // Создание заполнение и запись нового элемента счетчика
                СчетчикСсылка = СоздатьИЗаполнитьНовыйСчетчик(СчетчикБП77).ПолучитьОбъект();
                РезультатФункции.НовыеСчетчики.Добавить(СчетчикСсылка);
            Иначе
                // Обновление данных счетчика
                СчетчикОбъект = СчетчикБП77.Счетчик.ПолучитьОбъект();
                ЗаполнитьДанныеСчетчика(СчетчикОбъект, СчетчикБП77, Ложь);
                СчетчикОбъект.Записать();
                РезультатФункции.ОбновленныеСчетчики.Добавить(СчетчикОбъект.Ссылка);
            КонецЕсли;

            // Заполнение ссылки на счетчик для процедуры сопоставления счетчиков
            Если СчетчикСсылка <> Неопределено Тогда
                СчетчикБП77.Счетчик = СчетчикСсылка;
            КонецЕсли;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при создании (обновлении) данных счетчиков.";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.ОбновленныеСчетчики.Очистить();
        РезультатФункции.НовыеСчетчики.Очистить();
    КонецПопытки;

    Если РезультатФункции.Успех Тогда
        РезультатСопоставления = УстановитьСоответствияСчетчиковРегистраСОбъектамиИБ(ТаблицаСчетчиковБП77, Истина);
        РезультатФункции.КоличествоСопоставленных = РезультатСопоставления.ОбновленныеСчетчики.Количество();
    КонецЕсли;

    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(РезультатФункции, АдресХранилища);
        Возврат Неопределено;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Получает все записи из регистра ГП_СчетчикиБП77
// Параметры:
//  ТолькоДляСоздания - Булево - Если Истина, возвращает только записи где поле Счетчик не заполнено
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьДанныеСчетчиковИзРегистра(Знач ТолькоДляСоздания = Ложь) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   *
        |ИЗ
        |   РегистрСведений.ГП_СчетчикиБП77 КАК ГП_СчетчикиБП77
        |";

    УсловиеЗапроса =
        "ГДЕ
        |   ГП_СчетчикиБП77.Счетчик <> &ПустойСчетчик
        |";

    Если ТолькоДляСоздания = Ложь Тогда
        УсловиеЗапроса = "";
    Иначе
        Запрос.УстановитьПараметр("ПустойСчетчик", Справочники.КВП_Счетчики.ПустаяСсылка());
    КонецЕсли;

    Запрос.Текст = СтрШаблон("%1%2", Запрос.Текст, УсловиеЗапроса);

    РезультатЗапроса = Запрос.Выполнить();
    Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Устанавливает соответствие счетчиков БП77 из регистра с Счетчиками ИБ (записывает ссылку на счетчик в поле регистра Счетчик)
// Параметры:
//  ТаблицаСчетчиковРегистра - ТаблицаЗначений
//  ВыполнятьПоискПоИдентификатору - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеСчетчики - Массив из СправочникСсылка.КВП_Счетчики
//      * ТекстСообщения - Строка
Функция УстановитьСоответствияСчетчиковРегистраСОбъектамиИБ(
        Знач ТаблицаСчетчиковРегистра, Знач ВыполнятьПоискПоИдентификатору = Истина) Экспорт

    РезультатФункции = Новый Структура("Успех, ОбновленныеСчетчики, ТекстСообщения", Истина, Новый Массив, "");

    НачатьТранзакцию();
    Попытка
        Для Каждого СчетчикБП77 Из ТаблицаСчетчиковРегистра Цикл
            Если ТипЗнч(СчетчикБП77.Счетчик) <> Тип("СправочникСсылка.КВП_Счетчики") ИЛИ ЗначениеЗаполнено(СчетчикБП77.Счетчик) = Ложь Тогда
                Если ВыполнятьПоискПоИдентификатору = Ложь Тогда
                    Продолжить; // Не записываем пустые значения
                КонецЕсли;

                НайденныйСчетчик = НайтиСчетчикПоИдентификаторуБП77(СчетчикБП77, Ложь);
                Если НайденныйСчетчик <> Неопределено Тогда
                    СчетчикБП77.Счетчик = НайденныйСчетчик;
                Иначе
                    Продолжить; // Не записываем пустые значения
                КонецЕсли;
            КонецЕсли;

            НаборЗаписейСчетчиков = СоздатьНаборЗаписейСчетчикаБП77(СчетчикБП77);
            НоваяЗапись = НаборЗаписейСчетчиков.Добавить();

            ЗаполнитьЗначенияСвойств(НоваяЗапись, СчетчикБП77, , "Счетчик");
            НоваяЗапись.Счетчик = СчетчикБП77.Счетчик;
            НаборЗаписейСчетчиков.Записать(Истина);
            РезультатФункции.ОбновленныеСчетчики.Добавить(НоваяЗапись.Счетчик);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при записи соответствий счетчиков в регистр ""ГП_СчетчикиБП77"".";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.ОбновленныеСчетчики.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Удаляет (помечает на удаление) все созданные счетчики созданные на основании данных БП77
// Возвращаемое значение:
//  - Число - Количество удаленных счетчиков
Функция УдалитьВсеСчетчикиБП77() Экспорт
    РезультатФункции = 0;

    ТаблицаСчетчиков = ПолучитьВсеСозданныеСчетчики();
    Для Каждого Счетчик Из ТаблицаСчетчиков Цикл
        СчетчикОбъект = Счетчик.Ссылка.ПолучитьОбъект();
        СчетчикОбъект.ПометкаУдаления = Истина;
        СчетчикОбъект.Записать();
        РезультатФункции = РезультатФункции + 1;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  МассивВидовУслугБП77 - Массив из Строка
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено
//  ДатаСоздания - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * СообщенияОбОшибках - Массив из Строка
//      * ТекстСообщения - Строка - Текст сообщения об ошибке при выполнении транзакции записи документов
//      * СозданныеДокументыУправленияУслугами - Массив из ДокументСсылка.КВП_УправлениеУслугами
Функция СоздатьДокументыУправлениеУслугамиПоДаннымРегистраСчетчиковБП77(
        Знач МассивВидовУслугБП77, Знач ОрганизацияСсылка = Неопределено, ДатаСоздания = Неопределено) Экспорт

    РезультатФункции = Новый Структура(
            "Успех, СообщенияОбОшибках, ТекстСообщения, СозданныеДокументыУправленияУслугами",
            Истина, Новый Массив, "", Новый Массив);

    ДатаНачалаДействияПоУмолчанию = Дата(2024, 1, 1); // Константа по условиям ТЗ

    // Сбор данных для заполнения
    ДанныеДляЗаполнения = ГП_МиграцияПриборовУчета.ПолучитьДанныеЗаполненияНазначенийУслугПоДаннымРегистраСчетчиковБП77();
    Если ДанныеДляЗаполнения.Успех = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Отсутствуют данные для заполнения
    КонецЕсли;

    // Соответствие для определения кода услуги
    КодыСоответствияУслуг = ГП_МиграцияПриборовУчета.ПолучитьСоответствиеКодовУслугСчетчиковБП77();

    ОрганизацияСсылка = ?(ОрганизацияСсылка = Неопределено,
            УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), ОрганизацияСсылка);
    ДатаСоздания = ?(ДатаСоздания = Неопределено, ТекущаяДатаСеанса(), ДатаСоздания);

    // Создание и заполнение документа для указанных услуг
    НачатьТранзакцию();

    Попытка
        Для Каждого ВидУслуги Из МассивВидовУслугБП77 Цикл
            Если ДанныеДляЗаполнения.Свойство(ВидУслуги) = Ложь Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон("Вид услуги имеет неправильное значение: ""%1"".", ВидУслуги));
                Продолжить; // Виду услуги указан не правильно
            КонецЕсли;

            Если ДанныеДляЗаполнения[ВидУслуги].Количество() = 0 Тогда
                Продолжить; // Нет данных для заполнения
            КонецЕсли;

            КодТекущейУслуги = КодыСоответствияУслуг[ВидУслуги];
            Если КодТекущейУслуги = Неопределено Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон("Не найдено соответствие для услуги: ""%1"".", ВидУслуги));
                Продолжить; // Не найдено соответствие для вида услуги
            КонецЕсли;
            //! Уточнить! Замена услуги `Водоотведения` на `Канализацию`
            //  (По ТЗ F00225713 назначался код 00-004, по ТЗ F00226285 код: "00-008")
            Если КодТекущейУслуги = "00-004" Тогда
                КодТекущейУслуги = "00-008"; //! Уточнить
            КонецЕсли;

            ТекущаяУслугаСсылка = Справочники.КВП_Услуги.НайтиПоКоду(КодТекущейУслуги);
            Если ТекущаяУслугаСсылка = Неопределено ИЛИ ЗначениеЗаполнено(ТекущаяУслугаСсылка) = Ложь Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон("Не найдена услуга с кодом: ""%1"".", КодТекущейУслуги));
                Продолжить; // Не найдена услуга по коду
            КонецЕсли;

            // Создаем новый элемент документа
            НовыйДокументУУОбъект = Документы.КВП_УправлениеУслугами.СоздатьДокумент();
            НовыйДокументУУОбъект.Дата = ТекущаяДатаСеанса();
            НовыйДокументУУОбъект.Организация = ОрганизацияСсылка;
            НовыйДокументУУОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета;
            НовыйДокументУУОбъект.Ответственный = Пользователи.ТекущийПользователь();
            НовыйДокументУУОбъект.Комментарий = СтрШаблон("#создан автоматически для вида услуги БП 7.7: ""%1"". (ГарантПлюс)", ВидУслуги);

            // Заполняем услугу документа
            НоваяСтрокаУслуги = НовыйДокументУУОбъект.Услуги.Добавить();
            НоваяСтрокаУслуги.Услуга = ТекущаяУслугаСсылка;

            // Заполняем объекты документа
            Для Каждого ДанныеДляТекущейУслуги Из ДанныеДляЗаполнения[ВидУслуги] Цикл
                Если ТипЗнч(ДанныеДляТекущейУслуги.ЛицевойСчет) <> Тип("СправочникСсылка.КВП_ЛицевыеСчета")
                    ИЛИ ДанныеДляТекущейУслуги.ЛицевойСчет.Пустая() Тогда
                    Продолжить;
                КонецЕсли;

                НоваяСтрокаОбъекты = НовыйДокументУУОбъект.Объекты.Добавить();
                НоваяСтрокаОбъекты.Объект = ДанныеДляТекущейУслуги.ЛицевойСчет;
                НоваяСтрокаОбъекты.ДатаНачала = ДатаНачалаДействияПоУмолчанию;
            КонецЦикла;

            // Записываем документ
            НовыйДокументУУОбъект.Записать(РежимЗаписиДокумента.Запись);
            РезультатФункции.СозданныеДокументыУправленияУслугами.Добавить(НовыйДокументУУОбъект.Ссылка);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при записи документов УправлениеУслугами.";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.СозданныеДокументыУправленияУслугами.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Формирует составной код справочника по данным счетчика из БП77
// Параметры:
//  КонтрагентКод - Строка
//  ОбъектАбонентаКод - Строка
//  СчетчикКод - Строка
// Возвращаемое значение:
//  - Строка - Составной код вида: xxxxxxxx-xxxx-xxx (КонтрагентКод{8}-ОбъектАбонентаКод{4}-СчетчикКод{3})
Функция СформироватьИдентификаторСчетчикаБП77(Знач КонтрагентКод, Знач ОбъектАбонентаКод, Знач СчетчикКод) Экспорт
    Возврат ГП_МиграцияПриборовУчета.СформироватьСоставнойКодСчетчикаБП77(КонтрагентКод, ОбъектАбонентаКод, СчетчикКод);
КонецФункции

// ++ Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг ++
#Область ЗагрузкаУслуг
// Выполняет чтение данных счетчиков (из ИБ БП 7.7) из файла и записывает данные в регистр ГП_СчетчикиБП77 для последующего
//  добавления / обновления счетчиков в УУК 3.0
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * КоличествоЗаписанныхУслуг - Число
//      * ТекстСообщения - Строка
//  - Неопределено
Функция ЗагрузитьДанныеУслугВРегистр(ДвоичныеДанныеФайла, АдресХранилища = Неопределено) Экспорт
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхУслуг, ТекстСообщения", Ложь, 0);

    // Чтение данных из файла XML
    РезультатЧтенияДанных = ГП_МиграцияПриборовУчета.ПрочитатьДанныеИзФайлаXML(ДвоичныеДанныеФайла, "Услуга");
    Если РезультатЧтенияДанных.Успех = Ложь Тогда
        РезультатФункции.ТекстСообщения = РезультатЧтенияДанных.ТекстСообщения;
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Проверка структуры данных
    Если ТипЗнч(РезультатЧтенияДанных.Данные) <> Тип("СписокXDTO") Тогда
        РезультатФункции.ТекстСообщения = "Ошибка структуры данных услуг.";
        Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
    КонецЕсли;

    // Запись данных услуг в регистр
    УслугиБП77 = РезультатЧтенияДанных.Данные;
    РезультатЗаписи = ЗаписатьДанныеУслугВРегистр(УслугиБП77);

    // Формирование результата
    РезультатФункции.Успех = РезультатЗаписи.Успех;
    РезультатФункции.ТекстСообщения = РезультатЗаписи.СообщениеОбОшибке;
    РезультатФункции.КоличествоЗаписанныхУслуг = РезультатЗаписи.КоличествоЗаписанныхУслуг;

    Возврат ПоместитьВХранилищеИВернуть(РезультатФункции, АдресХранилища);
КонецФункции

// Устанавливает соответствие услуг (объектов абонентов) БП77 из регистра с Счетчиками ИБ
//  (записывает ссылку на лицевой счет в поле регистра Лицевой счет)
// Параметры:
//  ЗаписыватьПустые - Булево
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ОбновленныеУслуги - Массив из СправочникСсылка.КВП_Счетчики
//      * ТекстСообщения - Строка
Функция УстановитьСоответствияУслугСЛицевымиСчетами(Знач ЗаписыватьПустые = Истина) Экспорт
    РезультатФункции = Новый Структура("Успех, ОбновленныеУслуги, ТекстСообщения", Истина, Новый Массив, "");

    ТаблицаСоответствияУслуг = ГП_МиграцияПриборовУчета.ПолучитьЛицевыеСчетаОбъектовАбонентовДляСопоставления();

    НачатьТранзакцию();
    Попытка
        Для Каждого УслугаБП77 Из ТаблицаСоответствияУслуг Цикл
            Если УслугаБП77.ЛицевойСчет = УслугаБП77.ЛицевойСчетСопоставление Тогда
                Продолжить; // Лицевой счет не изменился
            КонецЕсли;

            Если ТипЗнч(УслугаБП77.ЛицевойСчет) <> Тип("СправочникСсылка.КВП_ЛицевыеСчета")
                ИЛИ ЗначениеЗаполнено(УслугаБП77.ЛицевойСчет) = Ложь Тогда

                Если ЗаписыватьПустые Тогда
                    УслугаБП77.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
                Иначе
                    Продолжить;
                КонецЕсли;
            КонецЕсли;

            НаборЗаписейУслуг = СоздатьНаборЗаписейУслугиБП77(УслугаБП77);
            НоваяЗапись = НаборЗаписейУслуг.Добавить();

            ЗаполнитьЗначенияСвойств(НоваяЗапись, УслугаБП77, , "ЛицевойСчет");
            НоваяЗапись.ЛицевойСчет = УслугаБП77.ЛицевойСчетСопоставление;
            НаборЗаписейУслуг.Записать(Истина);
            РезультатФункции.ОбновленныеУслуги.Добавить(НоваяЗапись.ЛицевойСчет);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ОбщаяЧастьСообщения = "Ошибка при записи соответствий услуг в регистр ""ГП_УслугиБП77"".";
        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            ОбщаяЧастьСообщения,
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "%1
                |Информация об ошибке: %2",
                ОбщаяЧастьСообщения,
                ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.ОбновленныеУслуги.Очистить();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // ЗагрузкаУслуг
// -- Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг --

#КонецОбласти // ПрограммныйИнтерфейс
// -- Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --

// ++ Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область СлужебныеПроцедурыИФункции

#Область СозданиеСчетчиковИЗаполнениеДанных
// Выполняет запись исходных данных счетчиков в регистр ГП_СчетчикиБП77 (по данным из БП77)
// Параметры:
//  ИсходныеДанныеСчетчиков - СписокXDTO, Массив из Структура
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеСчетчиковВРегистр(Знач ИсходныеДанныеСчетчиков)
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхСчетчиков, СообщениеОбОшибке", Истина, 0);

    Если ИсходныеДанныеСчетчиков = Неопределено ИЛИ ИсходныеДанныеСчетчиков.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиДатСчетчика = "ДатаУстановки,ДатаПоверки,ДатаПоказаний,ДатаБудущейПоверки";
    КлючиУсловийСчетчика = "ТолькоДляКанализации";
    КлючиЧиселСчетчика = "ПериодичностьПоверки,КоэффициентПересчета,МаксимальныйПоказатель";

    // Транзакция записи счетчиков в регистр ГП_СчетчикиБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого СчетчикБП77 Из ИсходныеДанныеСчетчиков Цикл
            НаборЗаписейСчетчиков = СоздатьНаборЗаписейСчетчикаБП77(СчетчикБП77);
            НоваяЗапись = НаборЗаписейСчетчиков.Добавить();

            ЗаполнитьЗначенияСвойств(НоваяЗапись, СчетчикБП77, ,
                СтрШаблон("%1,%2,%3", КлючиДатСчетчика, КлючиУсловийСчетчика, КлючиЧиселСчетчика));

            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиДатСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВДату(СчетчикБП77[Ключ], ЧастиДаты.Дата);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(СчетчикБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СчетчикБП77[Ключ]);
            КонецЦикла;

            НаборЗаписейСчетчиков.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхСчетчиков = РезультатФункции.КоличествоЗаписанныхСчетчиков + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных счетчиков в регистр ""ГП_СчетчикиБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхСчетчиков = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// ++ Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
//
// Выполняет запись исходных данных показаний счетчиков в регистр (по данным из БП77).
//  Внимание! Если ПерезаписатьСуществующие = Истина - Все ранее сделанные записи в регистр
//  по соответствующим наборам измерений будут перезаписаны.
// Параметры:
//  ДанныеПоказанийСчетчиков - СписокXDTO, Массив из Структура
//  ПерезаписатьСуществующие - Булево - Если Истина Все ранее сделанные записи по соответствующим наборам измерений будут перезаписаны
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхПоказаний - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеПоказанийСчетчиковВРегистр(Знач ДанныеПоказанийСчетчиков, Знач ПерезаписатьСуществующие = Истина)
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхПоказаний, СообщениеОбОшибке", Истина, 0);

    Если ДанныеПоказанийСчетчиков = Неопределено ИЛИ ДанныеПоказанийСчетчиков.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Транзакция записи счетчиков в регистр ГП_СчетчикиБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого СтруктураПоказанийСчетчикаБП77 Из ДанныеПоказанийСчетчиков Цикл
            НаборЗаписейПоказаний = СоздатьНаборЗаписейПоказанийСчетчикаБП77(СтруктураПоказанийСчетчикаБП77);
            Если ПерезаписатьСуществующие = Ложь Тогда
                НаборЗаписейПоказаний.Прочитать();
            КонецЕсли;

            // Разбор показаний счетчиков
            Для Счетчик = 0 По Цел(СтруктураПоказанийСчетчикаБП77.СписокПоказаний.Свойства().Количество() / 2) - 1 Цикл
                // Получение значений показаний из объекта вида {ДатаПоказания_0..n, Показание_0..n, ...}
                ДатаПоказания = СтруктураПоказанийСчетчикаБП77.СписокПоказаний[СтрШаблон("ДатаПоказания_%1", Счетчик)];
                ДатаПоказания = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаПоказания, ЧастиДаты.Дата);
                Если ЗначениеЗаполнено(ДатаПоказания) = Ложь Тогда
                    ВызватьИсключение("Значение периода должно быть заполнено для всех показаний счетчиков.");
                КонецЕсли;
                ЗначениеПоказания = СтруктураПоказанийСчетчикаБП77.СписокПоказаний[СтрШаблон("Показание_%1", Счетчик)];
                ЗначениеПоказания = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеПоказания);

                // Если режим только добавление
                Если ПерезаписатьСуществующие = Ложь И НаборЗаписейПоказаний.Найти(ДатаПоказания) Тогда
                    Продолжить;
                КонецЕсли;

                // Создание новой записи
                НоваяЗапись = НаборЗаписейПоказаний.Добавить();
                ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураПоказанийСчетчикаБП77);
                НоваяЗапись.Период = ДатаПоказания;
                НоваяЗапись.Показание = ЗначениеПоказания;

                РезультатФункции.КоличествоЗаписанныхПоказаний = РезультатФункции.КоличествоЗаписанныхПоказаний + 1;
            КонецЦикла;

            // Запись набора в регистр
            НаборЗаписейПоказаний.Записать(Истина);
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных показаний счетчиков в регистр.",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхПоказаний = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции // -- Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --

// Выполняет создание нового элемента счетчика и заполнение данных, созданный элемент записывается в ИБ
// Параметры:
//  ДанныеДляЗаполнения - Структура, СтрокаТаблицыЗначений
// Возвращаемое значение:
//  СправочникСсылка.КВП_Счетчики - Ссылка на созданный элемент
Функция СоздатьИЗаполнитьНовыйСчетчик(Знач ДанныеДляЗаполнения)
    НовыйСчетчик = Справочники.КВП_Счетчики.СоздатьЭлемент();
    ЗаполнитьДанныеСчетчика(НовыйСчетчик, ДанныеДляЗаполнения);
    НовыйСчетчик.Записать();

    Возврат НовыйСчетчик.Ссылка;
КонецФункции

// Параметры:
//  СчетчикОбъект - СправочникОбъект.КВП_Справочники
//  ДанныеДляЗаполнения - Структура, СтрокаТаблицыЗначений - Данные из регистра ГП_СчетчикиБП77
//  Записать - Булево
Процедура ЗаполнитьДанныеСчетчика(Знач СчетчикОбъект, Знач ДанныеДляЗаполнения, Знач Записать = Ложь)
    // Идентификатор БП77
    СчетчикОбъект.ГП_ИдентификаторБП77 = СформироватьИдентификаторСчетчикаБП77(
            ДанныеДляЗаполнения.КонтрагентКод, ДанныеДляЗаполнения.ОбъектАбонентаКод, ДанныеДляЗаполнения.СчетчикКод);

    СчетчикОбъект.Наименование = ДанныеДляЗаполнения.СчетчикНаименование;
    СчетчикОбъект.Разрядность = СтрДлина(СокрЛП(ДанныеДляЗаполнения.МаксимальныйПоказатель));
    СчетчикОбъект.Коэффициент = ДанныеДляЗаполнения.КоэффициентПересчета;
    СчетчикОбъект.ДатаПервойПоверки = ДанныеДляЗаполнения.ДатаУстановки;
    СчетчикОбъект.ГП_ДатаУстановки = ДанныеДляЗаполнения.ДатаУстановки;
    СчетчикОбъект.ГП_Комментарий = ДанныеДляЗаполнения.Комментарий;

    // Тарифность (по умолчанию 1-тарифный)
    СчетчикОбъект.Тарифность = ПолучитьТарифностьПоУмолчанию();

    // Способ регистрации показаний
    Если ДанныеДляЗаполнения.ЗначенияПоказаний = "ЗаПериод" Тогда
        СчетчикОбъект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета;
    Иначе
        СчетчикОбъект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом;
    КонецЕсли;

    // Вид услуги
    СоответствиеКодовУслуг = ПолучитьСоответствиеКодовУслугСчетчиковБП77();
    НайденныйКодУслуги = Неопределено;

    Если ДанныеДляЗаполнения.СчетчикНаименование <> "Счетчик ХВ (Подогрев)"
        И ЭтоСчетчикПодогреваВоды(ДанныеДляЗаполнения.СчетчикНаименование) Тогда

        // Дополнение к ТЗ подогрев по наименованию (если в наименовании счетчика встречается слово
        //  подогрев - безусловно установка в "Счетчик ХВ (Подогрев)")
        НайденныйКодУслуги = СоответствиеКодовУслуг.Получить("Счетчик ХВ (Подогрев)");
    ИначеЕсли ДанныеДляЗаполнения.ТолькоДляКанализации И ДанныеДляЗаполнения.ВидСчетчика = "ХолоднаяВода" Тогда
        // Дополнение к ТЗ для ХВ с признаком ТолькоДляКанализации
        НайденныйКодУслуги = СоответствиеКодовУслуг.Получить(ДанныеДляЗаполнения.ВидСчетчика + "Водоотвод");
    Иначе
        НайденныйКодУслуги = СоответствиеКодовУслуг.Получить(ДанныеДляЗаполнения.ВидСчетчика);
    КонецЕсли;
    Если НайденныйКодУслуги <> Неопределено Тогда
        СчетчикОбъект.ВидУслуги = Справочники.КВП_Услуги.НайтиПоКоду(НайденныйКодУслуги);
    КонецЕсли;

    // Межпроверочный интервал
    МежпроверочныйИнтервал = ПолучитьМежпроверочныйИнтервалПериодичности(ДанныеДляЗаполнения.ПериодичностьПоверки);
    Если МежпроверочныйИнтервал <> Неопределено Тогда
        СчетчикОбъект.МежпроверочныйИнтервал = МежпроверочныйИнтервал;
    КонецЕсли;

    // Модель счетчика
    РезультатПоиска = НайтиМодельПрибораУчетаДляСчетчикаБП77(
            ДанныеДляЗаполнения.ТипСчетчикаКод, ДанныеДляЗаполнения.ТипСчетчикаНаименование);
    СчетчикОбъект.Модель = РезультатПоиска.МодельПрибораУчета;

    // Идентификатор
    Если ЗначениеЗаполнено(СчетчикОбъект.Идентификатор) = Ложь И ЗначениеЗаполнено(СчетчикОбъект.Код) Тогда
        СчетчикОбъект.Идентификатор = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторСчетчика( , СчетчикОбъект.Код, , Истина);
    КонецЕсли;

    Если Записать Тогда
        СчетчикОбъект.Записать();
    КонецЕсли;
КонецПроцедуры

// Параметры:
//  СчетчикБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_СчетчикиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейСчетчикаБП77(Знач СчетчикБП77)
    НаборЗаписейСчетчиков = РегистрыСведений.ГП_СчетчикиБП77.СоздатьНаборЗаписей();
    НаборЗаписейСчетчиков.Отбор.КонтрагентКод.Установить(СчетчикБП77.КонтрагентКод);
    НаборЗаписейСчетчиков.Отбор.ОбъектАбонентаКод.Установить(СчетчикБП77.ОбъектАбонентаКод);
    НаборЗаписейСчетчиков.Отбор.СчетчикКод.Установить(СчетчикБП77.СчетчикКод);

    Возврат НаборЗаписейСчетчиков;
КонецФункции

// ++ Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
// Параметры:
//  СчетчикаБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
//      * СчетчикКод - Строка
//  Период - Дата, Неопределено
// Возвращаемое значение:
//  - РегистрСведений.ГП_СчетчикиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейПоказанийСчетчикаБП77(Знач СчетчикаБП77, Знач Период = Неопределено)
    НаборЗаписейПоказаний = РегистрыСведений.ГП_ПоказанияСчетчиковБП77.СоздатьНаборЗаписей();
    Если Период <> Неопределено Тогда
        НаборЗаписейПоказаний.Отбор.Период.Установить(СчетчикаБП77.Период);
    КонецЕсли;
    НаборЗаписейПоказаний.Отбор.КонтрагентКод.Установить(СчетчикаБП77.КонтрагентКод);
    НаборЗаписейПоказаний.Отбор.ОбъектАбонентаКод.Установить(СчетчикаБП77.ОбъектАбонентаКод);
    НаборЗаписейПоказаний.Отбор.СчетчикКод.Установить(СчетчикаБП77.СчетчикКод);

    Возврат НаборЗаписейПоказаний;
КонецФункции // -- Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --
#КонецОбласти // ЗаполнениеДанныхСчетчиков

// ++ Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг ++
#Область СозданиеУслугИЗаполнениеДанных
// Выполняет запись исходных данных услуг в регистр ГП_УслугиП77 (по данным из БП77)
// Параметры:
//  ИсходныеДанныеУслуг - Массив из Структура
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево
//      * КоличествоЗаписанныхСчетчиков - Число
//      * СообщениеОбОшибке - Строка, Неопределено
Функция ЗаписатьДанныеУслугВРегистр(Знач ИсходныеДанныеУслуг)
    РезультатФункции = Новый Структура("Успех, КоличествоЗаписанныхУслуг, СообщениеОбОшибке", Истина, 0);

    Если ИсходныеДанныеУслуг = Неопределено ИЛИ ИсходныеДанныеУслуг.Количество() = 0 Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    // Поля для предобработки (приведения типов)
    КлючиУсловийСчетчика = "ТолькоДляКанализации";
    КлючиЧиселСчетчика = "ПроцентХВ,ПроцентГВ";

    // Транзакция записи счетчиков в регистр ГП_СчетчикиБП77
    НачатьТранзакцию();
    Попытка

        Для Каждого УслугаБП77 Из ИсходныеДанныеУслуг Цикл
            НаборЗаписейУслуг = СоздатьНаборЗаписейУслугиБП77(УслугаБП77);
            НоваяЗапись = НаборЗаписейУслуг.Добавить();

            ЗаполнитьЗначенияСвойств(НоваяЗапись, УслугаБП77, ,
                СтрШаблон("%1,%2", КлючиУсловийСчетчика, КлючиЧиселСчетчика));

            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиУсловийСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = ?(УслугаБП77[Ключ] = "1", Истина, Ложь);
            КонецЦикла;
            Для Каждого Ключ Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиЧиселСчетчика, ",", Ложь, Истина) Цикл
                НоваяЗапись[Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(УслугаБП77[Ключ]);
            КонецЦикла;

            НаборЗаписейУслуг.Записать(Истина);
            РезультатФункции.КоличествоЗаписанныхУслуг = РезультатФункции.КоличествоЗаписанныхУслуг + 1;
        КонецЦикла;

        ЗафиксироватьТранзакцию(); // Записано успешно
    Исключение
        ОтменитьТранзакцию();

        ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
            "Ошибка при загрузке данных услуг в регистр ""ГП_УслугиБП77"".",
            УровеньЖурналаРегистрации.Ошибка, , ,
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        РезультатФункции.КоличествоЗаписанныхУслуг = 0;
        РезультатФункции.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        РезультатФункции.Успех = Ложь;
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  УслугаБП77 - Структура
//      * КонтрагентКод - Строка
//      * ОбъектАбонентаКод - Строка
// Возвращаемое значение:
//  - РегистрСведений.ГП_СчетчикиБП77.НаборЗаписей
Функция СоздатьНаборЗаписейУслугиБП77(Знач УслугаБП77)
    НаборЗаписейУслуг = РегистрыСведений.ГП_УслугиБП77.СоздатьНаборЗаписей();
    НаборЗаписейУслуг.Отбор.КонтрагентКод.Установить(УслугаБП77.КонтрагентКод);
    НаборЗаписейУслуг.Отбор.ОбъектАбонентаКод.Установить(УслугаБП77.ОбъектАбонентаКод);

    Возврат НаборЗаписейУслуг;
КонецФункции
#КонецОбласти // СозданиеУслугИЗаполнениеДанных
// -- Гарант+ Килипенко 24.07.2024 [F00226318] заполнение регистра сведений Зависимость услуг --

#Область ПолучениеДанныхСчетчиков
// Получает таблицу ссылок всех созданных счетчиков по данным БП77.
//  Критерием отбора служит наличие заполненного реквизита ГП_ИдентификаторБП77 по маске "________-____-___".
// Параметры:
//  СтрогоПоМаске - Булево - Если Истина, отбор выполняется строго по маске, иначе по факту заполненности реквизита ГП_ИдентификаторБП77
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьВсеСозданныеСчетчики(Знач СтрогоПоМаске = Истина)
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |	КВП_Счетчики.Ссылка КАК Ссылка
        |ИЗ
        |	Справочник.КВП_Счетчики КАК КВП_Счетчики
        |ГДЕ
        |	КВП_Счетчики.ГП_ИдентификаторБП77 ПОДОБНО &МаскаИдентификатора
        |";

    Если СтрогоПоМаске Тогда
        Запрос.УстановитьПараметр("МаскаИдентификатора", ПолучитьМаскуИдентификатораСчетчикаДляПодобно());
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,
                "КВП_Счетчики.ГП_ИдентификаторБП77 ПОДОБНО &МаскаИдентификатора", "КВП_Счетчики.ГП_ИдентификаторБП77 <> """"");
    КонецЕсли;

    РезультатЗапроса = Запрос.Выполнить();
    Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Выполняет поиск КВП_Счетчика по составному коду БП77 (идентификатору)
// Параметры:
//  ИдентификаторБП77 - Строка, Структура
//      * КонтрагентКод - Строка - Код контрагента в БП77
//      * ОбъектАбонентаКод - Строка - Код объекта абонента в БП77
//      * СчетчикКод - Строка - Код счетчика в БП77
//  ВсеНайденные - Булево - Если Истина, будут возвращены все найденные счетчики соответствующие идентификатору, иначе только один
// Возвращаемое значение:
//  - ТаблицаЗначений
//  - СправочникСсылка.КВП_Счетчики, Неопределено
Функция НайтиСчетчикПоИдентификаторуБП77(Знач ИдентификаторБП77, Знач ВсеНайденные = Истина)
    Если ТипЗнч(ИдентификаторБП77) <> Тип("Строка") Тогда
        ИдентификаторБП77 = СформироватьИдентификаторСчетчикаБП77(
                ИдентификаторБП77.КонтрагентКод, ИдентификаторБП77.ОбъектАбонентаКод, ИдентификаторБП77.СчетчикКод);
    КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   КВП_Счетчики.Ссылка КАК Ссылка,
        |   КВП_Счетчики.ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.КВП_Счетчики КАК КВП_Счетчики
        |ГДЕ
        |   КВП_Счетчики.ГП_ИдентификаторБП77 = &ИдентификаторБП77
        |
        |УПОРЯДОЧИТЬ ПО
        |   КВП_Счетчики.ПометкаУдаления УБЫВ,
        |   КВП_Счетчики.Ссылка
        |";
    Запрос.УстановитьПараметр("ИдентификаторБП77", ИдентификаторБП77);

    РезультатЗапроса = Запрос.Выполнить();

    Если ВсеНайденные = Ложь Тогда
        Если РезультатЗапроса.Пустой() Тогда
            Возврат Неопределено;
        КонецЕсли;

        Выборка = РезультатЗапроса.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Ссылка;
    Иначе
        Возврат РезультатЗапроса.Выгрузить();
    КонецЕсли;
КонецФункции

// Параметры:
//  Код - Строка - Код счетчика в БП77
//  Наименование - Строка - Наименование счетчика в БП77
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * МодельПрибораУчета - СправочникСсылка.УПЖКХ_МоделиПриборовУчета
Функция НайтиМодельПрибораУчетаДляСчетчикаБП77(Знач Код, Знач Наименование)
    РезультатФункции = Новый Структура("Успех, МодельПрибораУчета", Ложь, Справочники.УПЖКХ_МоделиПриборовУчета.ПустаяСсылка());

    АргументыЗаполнены = (ТипЗнч(Код) = Тип("Строка") И ТипЗнч(Наименование) = Тип("Строка"))
        И (ЗначениеЗаполнено(Код) ИЛИ ЗначениеЗаполнено(Наименование));

    Если АргументыЗаполнены = Ложь Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    Если ЗначениеЗаполнено(Код) Тогда
        РезультатФункции.МодельПрибораУчета = Справочники.УПЖКХ_МоделиПриборовУчета.НайтиПоКоду(Код);
    КонецЕсли;

    Если РезультатФункции.МодельПрибораУчета = Справочники.УПЖКХ_МоделиПриборовУчета.ПустаяСсылка() И ЗначениеЗаполнено(Наименование) Тогда
        РезультатФункции.МодельПрибораУчета = Справочники.УПЖКХ_МоделиПриборовУчета.НайтиПоНаименованию(Наименование, Истина);
    КонецЕсли;

    РезультатФункции.Успех = РезультатФункции.МодельПрибораУчета <> Справочники.УПЖКХ_МоделиПриборовУчета.ПустаяСсылка();

    Возврат РезультатФункции;
КонецФункции
#КонецОбласти // ПолучениеДанныхСчетчиков

#Область ВспомогательныеФункцииЗаполнения
// Параметры:
//  КоличествоМесяцев - Число
// Возвращаемое значение:
//  - ПеречислениеСсылка.УПЖКХ_МежпроверочныеИнтервалыСчетчиков, Неопределено
Функция ПолучитьМежпроверочныйИнтервалПериодичности(Знач КоличествоМесяцев)
    Возврат ГП_МиграцияПриборовУчета.ПолучитьМежпроверочныйИнтервалПериодичности(КоличествоМесяцев);
КонецФункции

// Параметры:
//  НаименованиеСчетчика - Строка
// Возвращаемое значение:
//  - Булево
Функция ЭтоСчетчикПодогреваВоды(Знач НаименованиеСчетчика)
    Если ТипЗнч(НаименованиеСчетчика) <> Тип("Строка") ИЛИ ПустаяСтрока(НаименованиеСчетчика) Тогда
        Возврат Ложь;
    КонецЕсли;

    РезультатФункции = СтрПодобнаПоРегулярномуВыражению(НаименованиеСчетчика, "(?i)(?:.+[\s0-9(]+|^)[\s(]*подогрев.*");
    Возврат РезультатФункции;
КонецФункции

// ++ Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика ++
//
// Служебная функция. Помещает результат во временное хранилище или выполняет возврат результата
// Параметры:
//  Результат - Произвольный
//  АдресХранилища - Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПоместитьВХранилищеИВернуть(Знач Результат, Знач АдресХранилища = Неопределено)
    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
        Возврат Неопределено;
    Иначе
        Возврат Результат;
    КонецЕсли;
КонецФункции // -- Гарант+ Килипенко 25.07.2024 [F00226454] заполнение документов Установка счетчика --
#КонецОбласти // ВспомогательныеФункцииЗаполнения

#Область КонстантыСчетчиков
// Возвращаемое значение:
//  - Строка
Функция ПолучитьМаскуИдентификатораСчетчикаДляПодобно()
    Возврат ГП_МиграцияПриборовУчета.ПолучитьМаскуСоставногоКодаСчетчикаДляПодобно();
КонецФункции

// Возвращаемое значение:
//  - Соответствие
Функция ПолучитьСоответствиеКодовУслугСчетчиковБП77()
    Возврат ГП_МиграцияПриборовУчета.ПолучитьСоответствиеКодовУслугСчетчиковБП77();
КонецФункции

// Возвращаемое значение:
//  - ПеречислениеСсылка.КВП_ТарифностьСчетчиков - По умолчанию Однотарифный (1-тарифный)
Функция ПолучитьТарифностьПоУмолчанию()
    Возврат Перечисления.КВП_ТарифностьСчетчиков.Однотарифный;
КонецФункции
#КонецОбласти // КонстантыСчетчиков

#КонецОбласти // СлужебныеПроцедурыИФункции
// -- Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --
