// ++ Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти // ОписаниеПеременных
// -- Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --

// ++ Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайлДляЧтения(Команда)
    ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
    ПараметрыЗагрузкиФайла.Диалог.Заголовок = НСтр("ru = 'Выберите файл XML для загрузки счетчиков'");
    ПараметрыЗагрузкиФайла.Диалог.Фильтр = НСтр("ru = 'Файлы XML (*.xml)|*.xml'");
    ПараметрыЗагрузкиФайла.ИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
    ФайловаяСистемаКлиент.ЗагрузитьФайлы(Новый ОписаниеОповещения("ЗагрузкаФайлаЗавершение", ЭтотОбъект), ПараметрыЗагрузкиФайла);
КонецПроцедуры

// Выполняет загрузку данных счетчиков в регистр
&НаКлиенте
Процедура ЗагрузитьСчетчики(Команда)
    Если ЭтотОбъект.ИнформацияОЗагруженныхФайлах.Количество() = 0 Тогда
        ОткрытьФайлДляЧтения(Неопределено);
    КонецЕсли;

    Если ЭтотОбъект.ИнформацияОЗагруженныхФайлах.Количество() = 0 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбран файл для загрузки.");
        Возврат;
    КонецЕсли;

    ВыполнитьОперациюЗагрузкиДанныхСчетчиков(ЭтотОбъект.ИнформацияОЗагруженныхФайлах[0].Хранение);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчикиИзРегистра(Команда)
    ВыполнитьОперациюОбновленияСчетчиков();
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьВсеСчетчикиБП77(Команда)
    РезультатДиалога = Ждать ВопросАсинх(
        "Все счетчики созданные из БП 7.7 будут помечены на удаление. Продолжить?", РежимДиалогаВопрос.ДаНет, , , "Внимание!");
    Если РезультатДиалога <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;

    КоличествоУдаленныхСчетчиков = УдалитьВсеСчетчикиБП77НаСервере();
    ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("Удалено %1 счетчиков", КоличествоУдаленныхСчетчиков));
КонецПроцедуры
#КонецОбласти // ОбработчикиКомандФормы
// -- Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --

// ++ Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики ++
#Область СлужебныеПроцедурыИФункции

#Область ФоновыеОперацииВыполнение
// Выполняет операцию загрузки данных счетчиков в регистр
// Параметры:
//  АдресФайла - Строка
&НаКлиенте
Процедура ВыполнитьОперациюЗагрузкиДанныхСчетчиков(Знач АдресФайла)
    ЭтотОбъект.АдресХранилищаРезультатаОперации = "";
    ЭтотОбъект.ТекстСообщенияРезультатОперации = "";

    Если АдресФайла = Неопределено Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось получить данные для загрузки'"));
        Возврат;
    КонецЕсли;

    Результат = ЗагрузитьДанныеСчетчиковВФонеНаСервере(АдресФайла);

    Если НЕ Результат.ЗаданиеВыполнено Тогда
        ИдентификаторЗадания = Результат.ИдентификаторЗадания;

        ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
        ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
        ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
    КонецЕсли;
КонецПроцедуры

// Выполняет операцию обновления и создания счетчиков (КВП_Счетчик) по данным счетчиков из БП77 (из регистра)
&НаКлиенте
Процедура ВыполнитьОперациюОбновленияСчетчиков()
    ЭтотОбъект.АдресХранилищаРезультатаОперации = "";
    ЭтотОбъект.ТекстСообщенияРезультатОперации = "";

    Результат = ОбновитьСчетчикиИзРегистраВФонеНаСервере();

    Если НЕ Результат.ЗаданиеВыполнено Тогда
        ИдентификаторЗадания = Результат.ИдентификаторЗадания;

        ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
        ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
        ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
    КонецЕсли;
КонецПроцедуры
#КонецОбласти // ФоновыеОперацииВыполнение

#Область ФоновыеОперацииИнфраструктура
// Выполняет фоновую операцию чтение данных счетчиков из файла с последующей загрузкой в регистр
// Параметры:
//  АдресФайла - Строка
// Возвращаемое значение:
//  - Структура
//      * ЗаданиеВыполнено - Булево
//      * ИдентификаторЗадания - Строка
//      * АдресХранилища - Строка
//      * Задание - Строка - Имя задания (Устарела. Не используется)
//      * НаименованиеЗадания - Строка - Наименование задания (Устарела. Не используется)
&НаСервере
Функция ЗагрузитьДанныеСчетчиковВФонеНаСервере(Знач АдресФайла)
    НаименованиеЗадания = НСтр("ru = 'Загрузка данных счетчиков'");
    РезультатВыполненияОперации = Новый Структура(
            "Задание, НаименованиеЗадания, ЗаданиеВыполнено, ИдентификаторЗадания, АдресХранилища",
            "ЗагрузкаДанныхСчетчиков", НаименованиеЗадания, Ложь);

    ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);

    ПараметрыВыгрузки = Новый Структура;
    ПараметрыВыгрузки.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);

    Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
        ЭтотОбъект.АдресХранилищаРезультатаОперации = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
        Обработки.ГП_ЗагрузкаСчетчиковБП77.ЗагрузитьДанныеВИБ(ПараметрыВыгрузки, ЭтотОбъект.АдресХранилищаРезультатаОперации);
        РезультатВыполненияОперации.ЗаданиеВыполнено = Истина;
    Иначе
        РезультатВыполненияОперации = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
                ЭтотОбъект.УникальныйИдентификатор,
                "Обработки.ГП_ЗагрузкаСчетчиковБП77.ЗагрузитьДанныеВИБ",
                ПараметрыВыгрузки,
                НаименованиеЗадания);

        ЭтотОбъект.АдресХранилищаРезультатаОперации = РезультатВыполненияОперации.АдресХранилища;
    КонецЕсли;

    Если РезультатВыполненияОперации.ЗаданиеВыполнено Тогда
        ЗагрузитьРезультатНаСервере();
    КонецЕсли;

    Возврат РезультатВыполненияОперации;
КонецФункции

// Выполняет фоновую операцию обновления и создания счетчиков (КВП_Счетчик) по данным счетчиков из БП77 (из регистра)
// Возвращаемое значение:
//  - Структура
//      * ЗаданиеВыполнено - Булево
//      * ИдентификаторЗадания - Строка
//      * АдресХранилища - Строка
//      * Задание - Строка - Имя задания (Устарела. Не используется)
//      * НаименованиеЗадания - Строка - Наименование задания (Устарела. Не используется)
&НаСервере
Функция ОбновитьСчетчикиИзРегистраВФонеНаСервере()
    НаименованиеЗадания = НСтр("ru = 'Обновление счетчиков'");
    РезультатВыполненияОперации = Новый Структура(
            "Задание, НаименованиеЗадания, ЗаданиеВыполнено, ИдентификаторЗадания, АдресХранилища",
            "ОбновлениеСчетчиков", НаименованиеЗадания, Ложь);

    ПараметрыОбновления = Новый Структура("СоздаватьНовые", Истина);
    Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
        ЭтотОбъект.АдресХранилищаРезультатаОперации = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
        Обработки.ГП_ЗагрузкаСчетчиковБП77.ОбновитьСчетчикиИзРегистра(ПараметрыОбновления, ЭтотОбъект.АдресХранилищаРезультатаОперации);
        РезультатВыполненияОперации.ЗаданиеВыполнено = Истина;
    Иначе
        РезультатВыполненияОперации = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
                ЭтотОбъект.УникальныйИдентификатор,
                "Обработки.ГП_ЗагрузкаСчетчиковБП77.ОбновитьСчетчикиИзРегистра",
                ПараметрыОбновления,
                НаименованиеЗадания);

        ЭтотОбъект.АдресХранилищаРезультатаОперации = РезультатВыполненияОперации.АдресХранилища;
    КонецЕсли;

    Если РезультатВыполненияОперации.ЗаданиеВыполнено Тогда
        ЗагрузитьРезультатНаСервере();
    КонецЕсли;

    Возврат РезультатВыполненияОперации;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
    Попытка
        Если ФормаДлительнойОперации.Открыта()
            И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
            Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
                ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
                ЗагрузитьРезультатНаСервере();
            Иначе
                ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
                ПодключитьОбработчикОжидания(
                    "Подключаемый_ПроверитьВыполнениеЗадания",
                    ПараметрыОбработчикаОжидания.ТекущийИнтервал,
                    Истина);
            КонецЕсли;
        КонецЕсли;
    Исключение
        ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
        ВызватьИсключение;
    КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
    Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатНаСервере()
    ЗавершенаУспешно = Ложь;
    Результат = ПолучитьИзВременногоХранилища(ЭтотОбъект.АдресХранилищаРезультатаОперации);

    Если ТипЗнч(Результат) = Тип("Структура")
        И Результат.Свойство("ТекстСообщения") Тогда
        ЭтотОбъект.ТекстСообщенияРезультатОперации = Результат.ТекстСообщения;

        Если Результат.Свойство("Успех") Тогда
            ЗавершенаУспешно = Результат.Успех;
        КонецЕсли;

        Если Результат.Свойство("КоличествоЗаписанныхСчетчиков") Тогда
            ЭтотОбъект.ТекстСообщенияРезультатОперации = СтрШаблон("Записано / обновлено %1 записей счетчиков.",
                    Результат.КоличествоЗаписанныхСчетчиков);
        ИначеЕсли Результат.Свойство("ОбновленныеСчетчики") И Результат.Свойство("НовыеСчетчики") Тогда
            ЭтотОбъект.ТекстСообщенияРезультатОперации = СтрШаблон("Создано %1 счетчиков, обновлено %2 счетчиков.",
                    Результат.НовыеСчетчики.Количество(), Результат.ОбновленныеСчетчики.Количество());
        КонецЕсли;
    Иначе
        ЭтотОбъект.ТекстСообщенияРезультатОперации = "Завершено.";
    КонецЕсли;

    Если ЗавершенаУспешно Тогда
        ЭтотОбъект.ТекстСообщенияРезультатОперации = СтрШаблон(
                "Операция выполнена успешно.
                |Информация о результате выполнения: %1", ЭтотОбъект.ТекстСообщенияРезультатОперации);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаФайлаЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
    Если ТипЗнч(ПомещенныеФайлы) <> Тип("Массив") Тогда
        Возврат;
    КонецЕсли;

    ЭтотОбъект.ИнформацияОЗагруженныхФайлах.Очистить();
    ЭтотОбъект.ИмяВыбранногоФайла = "";
    Для Каждого Файл Из ПомещенныеФайлы Цикл
        НоваяСтрокаИнформации = ЭтотОбъект.ИнформацияОЗагруженныхФайлах.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрокаИнформации, Файл);
    КонецЦикла;

    Если ЭтотОбъект.ИнформацияОЗагруженныхФайлах.Количество() > 0 Тогда
        ЭтотОбъект.ИмяВыбранногоФайла = ЭтотОбъект.ИнформацияОЗагруженныхФайлах[0].ПолноеИмя;
    КонецЕсли;

КонецПроцедуры
#КонецОбласти // ФоновыеОперацииИнфраструктура

Функция УдалитьВсеСчетчикиБП77НаСервере()
    Возврат Обработки.ГП_ЗагрузкаСчетчиковБП77.УдалитьВсеСчетчикиБП77();
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// -- Гарант+ Килипенко 15.07.2024 [F00225713] Перенос из БП 7.7 в БП3 справочника Счетчики --
