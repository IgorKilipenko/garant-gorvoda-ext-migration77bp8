&НаСервере
Перем ОбщийСписокЛицевыхСчетов;

&НаКлиенте
Функция Получитьtoken()

    // Проверим "протух" ли токен, срок "протухания" 23 часа.
    ФайлДатаВремяТокена = Новый Файл(Объект.КаталогДляВременныхФайлов + "/ДатаВремяПолученияtoken.txt");
    Если ФайлДатаВремяТокена.Существует() Тогда

        ТекстФайла = Новый ТекстовыйДокумент;
        ТекстФайла.Прочитать(Объект.КаталогДляВременныхФайлов + "/ДатаВремяПолученияtoken.txt");
        Попытка
            Объект.ДатаВремяПолученияtoken = Дата(ТекстФайла.ПолучитьСтроку(1));
        Исключение
            Объект.ДатаВремяПолученияtoken = Дата(1, 1, 1, 1, 1, 1);
        КонецПопытки;

        Если ТекущаяДата() - Объект.ДатаВремяПолученияtoken > 60 * 60 * 23 Тогда
            ПолучатьТокен = Истина;
        Иначе
            ПолучатьТокен = Ложь;
        КонецЕсли;

    Иначе
        ПолучатьТокен = Истина;
    КонецЕсли;

    Если СокрЛП(Объект.token) = "" Тогда
        ПолучатьТокен = Истина;
    КонецЕсли;

    Если ПолучатьТокен = Истина Тогда
        ЗаписьJSON = Новый ЗаписьJSON;
        тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
        ЗаписьJSON.УстановитьСтроку(тПараметрыJSON);

        СтруктураДанныхJSON = Новый Структура;

        СтруктураДанныхJSON.Вставить("login", СокрЛП(Объект.login));
        СтруктураДанныхJSON.Вставить("password", СокрЛП(Объект.password));

        ЗаписатьJSON(ЗаписьJSON, СтруктураДанныхJSON);

        СтрокаJS = ЗаписьJSON.Закрыть();

        ФайлОтвета = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\answer_token.txt";

        HTTPСоединение = Новый HTTPСоединение("online.schetmash.com", , , , , 5, Новый ЗащищенноеСоединениеOpenSSL);

        ЗапросPOST = Новый HTTPЗапрос("/lk/api/v1/token");
        ЗапросPOST.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
        ЗапросPOST.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.Системная, ИспользованиеByteOrderMark.НеИспользовать);

        HTTPСоединение.ОтправитьДляОбработки(ЗапросPOST, ФайлОтвета);

        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.ОткрытьФайл(СокрЛП(Объект.КаталогДляВременныхФайлов) + "\answer_token.txt");

        Пока ЧтениеJSON.Прочитать() Цикл
            ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
            Если ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
                ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
            КонецЕсли;
            Если (ИмяСвойства = "token") И ТипJSON = ТипЗначенияJSON.Строка Тогда
                token = ЧтениеJSON.ТекущееЗначение;
            КонецЕсли;

        КонецЦикла;

        Объект.token = token;
        Объект.ДатаВремяПолученияtoken = ТекущаяДата();

        Текст = Новый ТекстовыйДокумент;

        Текст.ДобавитьСтроку(Объект.ДатаВремяПолученияtoken);
        Текст.Записать(Объект.КаталогДляВременныхФайлов + "/ДатаВремяПолученияtoken.txt");

        Сообщить("Токен обновлен");

    КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыборПериода(Команда)

    ВыбранныйПериод = Новый СтандартныйПериод;
    ВыбранныйПериод.ДатаНачала = Объект.ДатаНач;
    ВыбранныйПериод.ДатаОкончания = Объект.ДатаКон;

    Диалог = Новый ДиалогРедактированияСтандартногоПериода();
    Диалог.Период = ВыбранныйПериод;

    Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметы) Экспорт

    Диалог = ДополнительныеПараметы.Диалог;

    Если ЗначениеЗаполнено(Период) Тогда
        ВыбранныйПериод = Диалог.Период;
        Объект.ДатаНач = ВыбранныйПериод.ДатаНачала;
        Объект.ДатаКон = ВыбранныйПериод.ДатаОкончания;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокиРегистрацииОплатПриАктивизацииСтроки(Элемент)

    СтандартнаяОбработка = Ложь;

    Если Элементы.СтрокиРегистрацииОплат.ТекущиеДанные <> Неопределено Тогда

        ЭтотОбъект.Объект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

        ПП = Новый Структура;
        ПП.Вставить("ДокРегистрацияОплаты", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.ДокРегистрацияОплаты);
        ПП.Вставить("Лицевойсчет", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Лицевойсчет);
        ПП.Вставить("external_id", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.external_id);

        ТЧЧека = Объект.РасшифровкаСтрокРегистрациОплат.НайтиСтроки(ПП);

        Для Каждого СтрокаТЧ Из ТЧЧека Цикл

            НоваяСтрокаДляОтображения = ЭтотОбъект.Объект.РасшифровкаСтрокиРегистрацииОплат.Добавить();
            НоваяСтрокаДляОтображения.ДокРегистрацияОплаты = СтрокаТЧ.ДокРегистрацияОплаты;
            НоваяСтрокаДляОтображения.Лицевойсчет = СтрокаТЧ.Лицевойсчет;
            НоваяСтрокаДляОтображения.Сумма = СтрокаТЧ.Сумма;
            НоваяСтрокаДляОтображения.Услуга = СтрокаТЧ.Услуга;
            НоваяСтрокаДляОтображения.МесяцНачисления = СтрокаТЧ.МесяцНачисления;
            НоваяСтрокаДляОтображения.Пени = СтрокаТЧ.Пени;
            НоваяСтрокаДляОтображения.items_type = СтрокаТЧ.items_type;
            НоваяСтрокаДляОтображения.items_mode = СтрокаТЧ.items_mode;
            НоваяСтрокаДляОтображения.Аванс = СтрокаТЧ.Аванс;

        КонецЦикла;

    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УникальныйНомерДокумента(ДатаН, НомерН, ЛицСчет)

    Год = Сред(ДатаН, 7, 4);
    Месяц = Сред(ДатаН, 4, 2);
    День = Сред(ДатаН, 1, 2);

    ЛицСч = СтрЗаменить(ЛицСчет, "л/с №", "");

    Возврат СокрЛП(Объект.ПрефикНомера) + Год + Месяц + День + "_" + СокрЛП(НомерН) + "_" + СокрЛП(ЛицСч);

КонецФункции

#Область ЗаполнитьТЧ

&НаКлиенте
Процедура Заполнить(Команда)

    ЗапомнитьДокумент = Неопределено;

    Если Объект.СтрокиРегистрацииОплат.Количество() > 0 Тогда
        Объект.СтрокиРегистрацииОплат.Очистить();
    КонецЕсли;

    Если Объект.РасшифровкаСтрокРегистрациОплат.Количество() > 0 Тогда
        Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
    КонецЕсли;

    ЭтотОбъект.Объект.РасшифровкаСтрокиРегистрацииОплат.Очистить();

    // Гарант+ Килипенко ++
    // //////////////////////////////////////////////////
    // Логин_ = "СчетМаш";
    // Пароль_ = "55555";
    // //////////////////////////////////////////////////

    Если БазаДанных = "BUH_1C8" Тогда
        Состояние("Сбор данных из BUH_1C8...");
        ЗаполненоУспешно = ЗаполнитьНаСервере();

        Если НЕ ЗаполненоУспешно Тогда

            Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
            Объект.СтрокиРегистрацииОплат.Очистить();
            ПоказатьПредупреждение( , "Прервано! Исправьте ошибки.", , "Ошибка при заполнении");
            Возврат;

        КонецЕсли;
    Иначе
        ОбщегоНазначенияКлиент.СообщениеПользователю("ОШИБКА! Текущая реализация обработки поддерживает только базу ""BUH_1C8""");
        Возврат; // ОШИБКА! Только для текущей базы
    КонецЕсли;

    // Если БазаДанных = "ALL" Тогда
    //
    //     Состояние("Сбор данных из MKD1C8...");
    //     ЗаполненоУспешно = ЗаполнитьНаСервере();
    //
    //     Если НЕ ЗаполненоУспешно Тогда
    //
    //         Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
    //         Объект.СтрокиРегистрацииОплат.Очистить();
    //         ПоказатьПредупреждение( , "Прервано! Исправьте ошибки.", , "Ошибка при заполнении");
    //         Возврат;
    //
    //     КонецЕсли;
    //
    //     Удалить_ПолучитьДанные1С7(Логин_, Пароль_, "D:\CHSEK2018-19", "CHSEK");
    //     Удалить_ПолучитьДанныеBUH(Логин_, Пароль_, "D:\buh2022-23", "BUH");
    //
    // ИначеЕсли БазаДанных = "MKD_1C8" Тогда
    //
    //     Состояние("Сбор данных из ИГС1C8...");
    //     ЗаполненоУспешно = ЗаполнитьНаСервере();
    //
    //     Если НЕ ЗаполненоУспешно Тогда
    //
    //         Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
    //         Объект.СтрокиРегистрацииОплат.Очистить();
    //         ПоказатьПредупреждение( , "Прервано! Исправьте ошибки.", , "Ошибка при заполнении");
    //         Возврат;
    //
    //     КонецЕсли;
    //
    // ИначеЕсли БазаДанных = "CHESEK" Тогда
    //
    //     Удалить_ПолучитьДанные1С7(Логин_, Пароль_, "D:\CHSEK2018-19", "CHSEK");
    //
    // ИначеЕсли БазаДанных = "BUH" Тогда
    //
    //     Удалить_ПолучитьДанныеBUH(Логин_, Пароль_, "D:\BUH2022-23", "BUH");
    //
    // Иначе
    //
    //     Сообщить("Ошибка. Не выбрана база данных.");
    //
    // КонецЕсли;
    // Гарант+ Килипенко --

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнение()

    // Проверим равенство Суммы сумме расшифровки,
    // отрицательные суммы и посчитаем общую сумму и количество
    ИндО = 0;
    ОбщаяИндО = Объект.СтрокиРегистрацииОплат.Количество();

    ОбщаяСуммаМКД8 = 0;
    ОбщаяСуммаМКД7 = 0;
    ОбщаяСуммаЧС = 0;
    ОбщаяСуммаБУХ = 0;
    ОбщаяСуммаВсего = 0;

    ОбщееКоличествоМКД8 = 0;
    ОбщееКоличествоМКД7 = 0;
    ОбщееКоличествоЧС = 0;
    ОбщееКоличествоБУХ = 0;
    ОбщееКоличествоВсего = 0;

    Для Каждого ТСДок Из Объект.СтрокиРегистрацииОплат Цикл

        ИндО = ИндО + 1;
        Состояние("Пожалуйста подождите... Выполняется проверка данных", ИндО * 100 / ОбщаяИндО);

        // Гарант+ Килипенко ++
        Если ТСДок.База = "BUH_1C8" Тогда
            ОбщаяСуммаМКД8 = ОбщаяСуммаМКД8 + ТСДок.Сумма;
            ОбщееКоличествоМКД8 = ОбщееКоличествоМКД8 + 1;
        Иначе
            ОбщегоНазначенияКлиент.СообщитьПользователю("ОШИБКА! Поддерживается только база ""BUH_1C8""");
            Возврат;
        КонецЕсли;

        // УДАЛИТЬ БЛОК:
        // Если ТСДок.База = "MKD1C8" Тогда
        //
        //     ОбщаяСуммаМКД8 = ОбщаяСуммаМКД8 + ТСДок.Сумма;
        //     ОбщееКоличествоМКД8 = ОбщееКоличествоМКД8 + 1;
        //
        // ИначеЕсли ТСДок.База = "MKD1С7" Тогда
        //
        //     ОбщаяСуммаМКД7 = ОбщаяСуммаМКД7 + ТСДок.Сумма;
        //     ОбщееКоличествоМКД7 = ОбщееКоличествоМКД7 + 1;
        //
        // ИначеЕсли ТСДок.База = "CHSEK" Тогда
        //
        //     ОбщаяСуммаЧС = ОбщаяСуммаЧС + ТСДок.Сумма;
        //     ОбщееКоличествоЧС = ОбщееКоличествоЧС + 1;
        //
        // ИначеЕсли ТСДок.База = "BUH" Тогда
        //
        //     ОбщаяСуммаБУХ = ОбщаяСуммаБУХ + ТСДок.Сумма;
        //     ОбщееКоличествоБУХ = ОбщееКоличествоБУХ + 1;
        //
        // Иначе
        //
        //     Сообщить("В строке №" + ТСДок.НомерСтроки + " неопределен источник оплаты.");
        //
        // КонецЕсли;
        // Гарант+ Килипенко --

        СуммаРасш = 0;

        СтруктураДляПоиска = Новый Структура;
        СтруктураДляПоиска.Вставить("ДокРегистрацияОплаты", ТСДок.ДокРегистрацияОплаты);
        СтруктураДляПоиска.Вставить("ЛицевойСчет", ТСДок.ЛицевойСчет);

        ПоискРасш = Объект.РасшифровкаСтрокРегистрациОплат.НайтиСтроки(СтруктураДляПоиска);

        ЕстьОшибки = Ложь;
        Если ПоискРасш.Количество() > 0 Тогда

            Для Каждого ТСРасш Из ПоискРасш Цикл

                Если ТСРасш.Сумма < 0 Тогда

                    Сообщить("В строке №" + ТСДок.НомерСтроки + " отрицательная сумма расшифровки.");
                    ЕстьОшибки = Истина;

                КонецЕсли;

                Если (ТСДок.ДокРегистрацияОплаты = ТСРасш.ДокРегистрацияОплаты) И (ТСДок.ЛицевойСчет = ТСРасш.ЛицевойСчет) Тогда

                    СуммаРасш = СуммаРасш + ТСРасш.Сумма + ТСРасш.Пени;

                КонецЕсли;

            КонецЦикла;

            Если СуммаРасш <> ТСДок.Сумма Тогда

                Сообщить("В строке №" + ТСДок.НомерСтроки + " сумма: " + ТСДок.Сумма + " не равна сумме расшифровки: " + СуммаРасш + ". Если в документе есть два платежа по одному и тому же лицевому счету, рекомендуется эти оплаты разнести в разные документы ""Регистрация оплат""");
                ЕстьОшибки = Истина;

            КонецЕсли;

        Иначе

            Сообщить("В строке №" + ТСДок.НомерСтроки + " не найдены расшифровки ");
            ЕстьОшибки = Истина;

        КонецЕсли;

    КонецЦикла;

    // Гарант+ Килипенко ++

    Элементы.ОбщаяИнформацияМКД8.Заголовок = "BUH_1C8: " + ОбщееКоличествоМКД8 + " чеков, на сумму: " + ОбщаяСуммаМКД8;

    // Элементы.ОбщаяИнформацияМКД8.Заголовок = "МKD1C8: " + ОбщееКоличествоМКД8 + " чеков, на сумму: " + ОбщаяСуммаМКД8;
    // Элементы.ОбщаяИнформацияМКД7.Заголовок = "МKD1C7: " + ОбщееКоличествоМКД7 + " чеков, на сумму: " + ОбщаяСуммаМКД7;
    // Элементы.ОбщаяИнформацияЧС.Заголовок = "CHSEK: " + ОбщееКоличествоЧС + " чеков, на сумму: " + ОбщаяСуммаЧС;
    // Элементы.ОбщаяИнформацияБух.Заголовок = "BUH: " + ОбщееКоличествоБУХ + " чеков, на сумму: " + ОбщаяСуммаБУХ;

    // Гарант+ Килипенко --

    ОбщееКоличествоВсего = ОбщееКоличествоМКД8 + ОбщееКоличествоМКД7 + ОбщееКоличествоЧС + ОбщееКоличествоБУХ;
    ОбщаяСуммаВсего = ОбщаяСуммаМКД8 + ОбщаяСуммаМКД7 + ОбщаяСуммаЧС + ОбщаяСуммаБУХ;

    Элементы.ОбщаяИнформацияВсего.Заголовок = "ВСЕГО: " + ОбщееКоличествоВсего + " чеков, на сумму: " + ОбщаяСуммаВсего;

    Если Объект.СтрокиРегистрацииОплат.Количество() > 0 Тогда

        Если НЕ ЕстьОшибки Тогда

            ПоказатьПредупреждение( , "Данные успешно заполнены!");

        Иначе

            ПоказатьПредупреждение( , "Найдены ошибки при проверки данных. Исправьте и повторите.", , "Найдены ошибки при проверки");

        КонецЕсли;

    Иначе

        ПоказатьПредупреждение( , "Данные для отправики в ОФД не найдены.", , "Не заполнено");

    КонецЕсли;

КонецПроцедуры

// Устарела. Гарант+ Килипенко - Будет удалена
&НаКлиенте
Процедура Удалить_ПолучитьДанные1С7(Логин, Пароль, Путь, ИмяБазы, Подключение = Неопределено)

    Если Подключение = Неопределено Тогда
        Попытка

            Удалить_ПолучениеБазы1С7(Логин, Пароль, Путь, ИмяБазы);
            Возврат;

        Исключение

            Сообщить("Ошибка при выполнении - " + Путь
                + "|" + ОписаниеОшибки());
            //База.ExecuteBatch("ЗавершитьРаботуСистемы(0)");
            //База = "";
            Возврат;

        КонецПопытки;
    Иначе
        База = Подключение;
    КонецЕсли;

    Если База = Неопределено Тогда

        Сообщить("Ошибка подключения к базе - " + Путь +
            " Попробуйте перезапустить обработку!");
        База = "";

        Возврат;

    КонецЕсли;

    СпрК = База.CreateObject("Справочник.Контрагенты");
    Док = База.CreateObject("Документ.ВыпискаШ");

    Ит = База.CreateObject("БухгалтерскиеИтоги");
    Ит.ИспользоватьСубконто(База.EvalExpr("ВидыСубконто.Договоры"), "", 1);

    // Очищаем таблица перед заполнением
    Если ЭтотОбъект.Объект.ТЗ.Количество() > 0 Тогда

        ЭтотОбъект.Объект.ТЗ.Очистить();

    КонецЕсли;

    Док.ВыбратьДокументы(Объект.ДатаНач, КонецДня(Объект.ДатаКон));
    ИндВыписки = 0;
    Пока Док.ПолучитьДокумент() > 0 Цикл

        ИндВыписки = ИндВыписки + 1;
        Если (Док.ПометкаУдаления() = 1) ИЛИ (Док.Проведен() = 0) Тогда

            Продолжить;

        КонецЕсли;

        ТекДок = Док.ТекущийДокумент();

        //Исключаем выписки Почты, АтомЭергоСбыта (платежных агентов) и оплаты в кассе чарез пост-терминал.
        //Они должны по договоренности содержать в строке комментария символ #
        //По умолчанию вначале строки, но это непринципиально
        Если Найти(ТекДок.Комментарий, "#") <> 0 Тогда

            Продолжить;

        КонецЕсли;

        ТекДок.ВыбратьСтроки();
        ИндСтрокиВыписки = 0;
        ВсегоСтрокВВыписке = ТекДок.КоличествоСтрок();
        Пока ТекДок.ПолучитьСтроку() = 1 Цикл

            ИндСтрокиВыписки = ИндСтрокиВыписки + 1;
            Состояние("Сбор данных из " + ИмяБазы + "... " + Символы.ПС + "Выписка №" + ТекДок.НомерДок + " строка: " + ИндСтрокиВыписки, ИндСтрокиВыписки * 100 / ВсегоСтрокВВыписке);

            Если СокрЛП(Строка(ТекДок.Субконто1.Наименование)) = "999999" Тогда

                Продолжить;

            КонецЕсли;

            //Если СокрЛП(ТекДок.Субконто1.ЛицевойСчет) = "00002149" ИЛИ СокрЛП(ТекДок.Субконто1.ЛицевойСчет) = "00599856" Тогда
            //    Сообщить("Хай");
            //КонецЕсли;

            НоваяСтрока = ЭтотОбъект.Объект.ТЗ.Добавить();
            НоваяСтрока.ДатаВыписки = ТекДок.ДатаДок;
            НоваяСтрока.НомерВыписки = ТекДок.НомерДок;
            НоваяСтрока.ЛицевойСчет = ТекДок.Субконто1.Наименование + "(" + ТекДок.Субконто1.ЛицевойСчет + ")";
            НоваяСтрока.ЛицевойСчетНомер = ТекДок.Субконто1.ЛицевойСчет;
            НоваяСтрока.Контрагент = ТекДок.Субконто1.Наименование;
            НоваяСтрока.Адрес = СокрЛП(ТекДок.Субконто1.Адрес1);

            НоваяСтрока.ОплаченоВсего = ТекДок.Приход;

            Если База.ЗначениеВСтроку(ТекДок.КоррСчет) <> База.ЗначениеВСтроку(База.EvalExpr("СчетПоКоду(""76.2"")")) Тогда

                НоваяСтрока.ЧастичнаяОплата = 0;
                НоваяСтрока.ПолнаяОплата = ТекДок.Приход;
                НоваяСтрока.Аванс = 0;
                НоваяСтрока.Пени = 0;

                Ит.ИспользоватьСубконто(База.EvalExpr("ВидыСубконто.Контрагенты"), ТекДок.Субконто1, 1);
                Ит.ВыполнитьЗапрос(Объект.ДатаНач, КонецДня(Объект.ДатаКон), "62.1,62.2", "", "", 1, "Проводка", "S");

                Если (Ит.СКД() - Ит.СКК() < 0) И (ТекДок.Приход + (Ит.СКД() - Ит.СКК()) > 0) Тогда

                    НоваяСтрока.Аванс = -(Ит.СКД() - Ит.СКК());
                    НоваяСтрока.ПолнаяОплата = НоваяСтрока.ПолнаяОплата + (Ит.СКД() - Ит.СКК());

                ИначеЕсли (Ит.СКД() - Ит.СКК() < 0) И (ТекДок.Приход + (Ит.СКД() - Ит.СКК()) < 0) Тогда

                    НоваяСтрока.Аванс = НоваяСтрока.ПолнаяОплата;
                    НоваяСтрока.ПолнаяОплата = 0;

                ИначеЕсли Ит.СКД() - Ит.СКК() > 0 Тогда

                    НоваяСтрока.ЧастичнаяОплата = НоваяСтрока.ПолнаяОплата;
                    НоваяСтрока.ПолнаяОплата = 0;
                    НоваяСтрока.Аванс = 0

                    КонецЕсли;

            ИначеЕсли База.ЗначениеВСтроку(ТекДок.КоррСчет) = База.ЗначениеВСтроку(База.EvalExpr("СчетПоКоду(""76.2"")")) Тогда

                НоваяСтрока.ПолнаяОплата = 0;
                НоваяСтрока.Аванс = 0;
                НоваяСтрока.Пени = ТекДок.Приход;
                НоваяСтрока.ЧастичнаяОплата = 0

                КонецЕсли;

            //ТЗ.Комментарий = СокрЛП(Строка(ТекДок.Комментарий));

        КонецЦикла

    КонецЦикла;

    // Закрываем базу
    База.ExecuteBatch("ЗавершитьРаботуСистемы(0)");
    База = "";

    // Сварачиваем таблицу
    СвернутьВременуюТаблицу();

    ВсегоВТЗ = ЭтотОбъект.Объект.ТЗ.Количество();
    ИндВТЗ = 0;
    Для Каждого СтрокаОплаты Из ЭтотОбъект.Объект.ТЗ Цикл

        ИндВТЗ = ИндВТЗ + 1;
        Состояние("Сбор данных из " + ИмяБазы + ". Пожалуйста подождите...", ИндВТЗ * 100 / ВсегоВТЗ);

        НоваяСтрока = Объект.СтрокиРегистрацииОплат.Добавить();
        НоваяСтрока.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
        НоваяСтрока.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
        НоваяСтрока.Сумма = СтрокаОплаты.ОплаченоВсего;
        НоваяСтрока.timestamp = СтрокаОплаты.ДатаВыписки;

        // УИД
        Годx = Сред(СтрокаОплаты.ДатаВыписки, 7, 4);
        Месяцx = Сред(СтрокаОплаты.ДатаВыписки, 4, 2);
        Деньx = Сред(СтрокаОплаты.ДатаВыписки, 1, 2);
        НоваяСтрока.external_id = СокрЛП(Объект.ПрефикНомера) + Годx + Месяцx + Деньx + "_" + СтрокаОплаты.НомерВыписки + "_" + СтрокаОплаты.ЛицевойСчетНомер;;

        НоваяСтрока.База = ИмяБазы;

        НоваяСтрока.phone = "";
        НоваяСтрока.email = "";
        НоваяСтрока.total = СтрокаОплаты.ОплаченоВсего;
        НоваяСтрока.type = Объект.ПоУмолчанию_type; // 1 - электронный  2 - аванс 3 - кредит

        Если СтрокаОплаты.ПолнаяОплата <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = "Водоснабжение и водоотведение";
            НоваяСтрокаД.Сумма = СтрокаОплаты.ПолнаяОплата;
            НоваяСтрокаД.Пени = 0;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 4;
            НоваяСтрокаД.items_mode = 4;

        КонецЕсли;

        Если СтрокаОплаты.ЧастичнаяОплата <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = "Водоснабжение и водоотведение";
            НоваяСтрокаД.Сумма = СтрокаОплаты.ЧастичнаяОплата;
            НоваяСтрокаД.Пени = 0;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 4;
            НоваяСтрокаД.items_mode = 5;

        КонецЕсли;

        Если СтрокаОплаты.Аванс <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = "Водоснабжение и водоотведение";
            НоваяСтрокаД.Сумма = СтрокаОплаты.Аванс;
            НоваяСтрокаД.Пени = 0;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 4;
            НоваяСтрокаД.items_mode = 3;

        КонецЕсли;

        Если СтрокаОплаты.Пени <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = "Водоснабжение и водоотведение (пени)";
            НоваяСтрокаД.Сумма = 0;
            НоваяСтрокаД.Пени = СтрокаОплаты.Пени;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 10;
            НоваяСтрокаД.items_mode = 4;

        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СвернутьВременуюТаблицу()
    // Гарант+ Килипенко ++

    // ТЗС = РеквизитФормыВЗначение("ТЗ", Тип("ТаблицаЗначений"));
    ТЗС = ЭтотОбъект.Объект.ТЗ;

    // Гарант+ Килипенко --
    //+++ПВМ
    Для Каждого Строка Из ТЗС Цикл
        Строка.НомерВыписки = Строка.НомерВыписки + "_" + ?(Найти(НРег(Строка.Комментарий), "негативное") > 0, "2", "1");
    КонецЦикла;
    //---ПВМ
    ТЗС.Свернуть("ДатаВыписки, НомерВыписки, ЛицевойСчет, ЛицевойСчетНомер, Контрагент, Адрес, Комментарий", "ОплаченоВсего, ПолнаяОплата, ЧастичнаяОплата, Аванс, Пени");
    // Гарант+ Килипенко ++

    // ЗначениеВРеквизитФормы(ТЗС, "ТЗ");

    // Гарант+ Килипенко --
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКФормам()
    ПутьКФормам = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя() + ".Форма.";
    Возврат ПутьКФормам;
КонецФункции

// Устарела. Гарант+ Килипенко - Будет удалена
&НаКлиенте
Процедура Удалить_ПолучениеБазы1С7(Логин, Пароль, Путь, ИмяБазы)
    ПараметрыОткрытия = Новый Структура;
    ПараметрыОткрытия.Вставить("Логин", Логин);
    ПараметрыОткрытия.Вставить("Пароль", Пароль);
    ПараметрыОткрытия.Вставить("Путь", Путь);
    ПередаваемыеПараметры = Новый Структура;
    ПередаваемыеПараметры.Вставить("Логин", Логин);
    ПередаваемыеПараметры.Вставить("Пароль", Пароль);
    ПередаваемыеПараметры.Вставить("Путь", Путь);
    ПередаваемыеПараметры.Вставить("ИмяБазы", ИмяБазы);
    ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытаФормаПодключенияКБазе", ЭтаФорма, ПередаваемыеПараметры);
    ОткрытьФорму(ПолучитьПутьКФормам() + "ПодключениеКБазе", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
    Возврат;
    //ПутьКБазе = Путь;
    //Пользователь = Логин;
    //Пароль = Пароль;
    //МонопольныйРежимOLE = ""; // " /m";
    //ЗапускБезЗаставки = 1;
    //База = Новый COMОбъект("V77.Application");
    //СтрокаПодключения = "/D""" + СокрЛП(ПутьКБазе) + """ /N""" + СокрЛП(Пользователь) + """ /P"""+СокрЛП(Пароль) + """";
    //РезультатПодключения = База.Initialize(База.RMTrade, СтрокаПодключения, ?(ЗапускБезЗаставки = 1, "NO_SPLASH_SHOW", ""));

    //Если НЕ РезультатПодключения Тогда
    //    Сообщить("Не удалось произвести подключение к информационной базе");
    //	Возврат Неопределено;
    //КонецЕсли;
    //
    //Возврат База;
КонецПроцедуры

// Устарела. Гарант+ Килипенко - Будет удалена
&НаКлиенте
Процедура ЗакрытаФормаПодключенияКБазе(Ответ, ДопПараметры) Экспорт
    Если Ответ = Неопределено Тогда
        Сообщить("Не удалось произвести подключение к информационной базе");
    Иначе
        Удалить_ПолучитьДанныеBUH(ДопПараметры.Логин, ДопПараметры.Пароль, ДопПараметры.Путь, ДопПараметры.ИмяБазы, Ответ);
    КонецЕсли;
КонецПроцедуры

// Устарела. Гарант+ Килипенко - Будет удалена
&НаКлиенте
Процедура Удалить_ПолучитьДанныеBUH(Логин, Пароль, Путь, ИмяБазы, Подключение = Неопределено)

    Если Подключение = Неопределено Тогда
        Попытка

            Удалить_ПолучениеБазы1С7(Логин, Пароль, Путь, ИмяБазы);
            Возврат;

        Исключение

            Сообщить("Ошибка при выполнении - " + Путь
                + "|" + ОписаниеОшибки());
            //База.ExecuteBatch("ЗавершитьРаботуСистемы(0)");
            //База = "";
            Возврат;

        КонецПопытки;
    Иначе
        База = Подключение;
    КонецЕсли;

    Если База = Неопределено Тогда

        Сообщить("Ошибка подключения к базе - " + Путь +
            " Попробуйте перезапустить обработку!");
        База = "";

        Возврат;

    КонецЕсли;

    СпрК = База.CreateObject("Справочник.Контрагенты");
    Док = База.CreateObject("Документ.Выписка");
    Док55 = База.CreateObject("Документ.Выписка55");

    РодительПапкаЧастныеЛица = База.ПолучитьПустоеЗначение("Справочник.Контрагенты"); //Папка физические лица, в которой (ВРОДЕ БЫ!!!) заводятся абоненты на подключение
    Если СпрК.НайтиПоКоду("00007834", 0) = 1 Тогда
        РодительПапкаЧастныеЛица = СпрК.ТекущийЭлемент();
    КонецЕсли;

    Ит = База.CreateObject("БухгалтерскиеИтоги");
    Ит.Опции(1, 1);
    Ит.ВключатьСубсчета(-1, -1);

    // Очищаем таблица перед заполнением
    Если ЭтотОбъект.Объект.ТЗ.Количество() > 0 Тогда

        ЭтотОбъект.Объект.ТЗ.Очистить();

    КонецЕсли;

    Док.ВыбратьДокументы(Объект.ДатаНач, КонецДня(Объект.ДатаКон));

    ИндВыписки = 0;
    Пока Док.ПолучитьДокумент() > 0 Цикл

        ИндВыписки = ИндВыписки + 1;
        Если (Док.ПометкаУдаления() = 1) ИЛИ (Док.Проведен() = 0) Тогда

            Продолжить;

        КонецЕсли;

        ТекДок = Док.ТекущийДокумент();

        ТекДок.ВыбратьСтроки();
        ИндСтрокиВыписки = 0;
        ВсегоСтрокВВыписке = ТекДок.КоличествоСтрок();
        Пока ТекДок.ПолучитьСтроку() = 1 Цикл

            ИндСтрокиВыписки = ИндСтрокиВыписки + 1;
            Состояние("Сбор данных из " + ИмяБазы + "... " + Символы.ПС + "Выписка №" + ТекДок.НомерДок + " строка: " + ИндСтрокиВыписки, ИндСтрокиВыписки * 100 / ВсегоСтрокВВыписке);

            Если База.ПустоеЗначение(ТекДок.Субконто1) = 1 Тогда

                Продолжить;

            КонецЕсли;

            //Проверяем только информацию по контрагентам
            Если (ТекДок.Субконто1.Вид() <> "Контрагенты") Тогда

                Продолжить;

            КонецЕсли;

            //По абонентам "Муниципипальное жилье" и "Частный сектор г. Курска" чеки не печатаем
            Если (ТекДок.Субконто1.Код = "00020388") ИЛИ (ТекДок.Субконто1.Код = "00005739") Тогда

                Продолжить;

            КонецЕсли;

            Если ((База.ЗначениеВСтроку(ТекДок.Субконто1.ВидКонтрагента) <> Строка("{""Перечисление"",""ВидыКонтрагентов"",""ЧастноеЛицо""}")) И (Нрег(СокрЛП(ТекДок.НазначениеПлатежа)) <> "ф"))
                ИЛИ (ТекДок.Приход = 0) ИЛИ (База.ПустоеЗначение(ТекДок.Приход) = 1) Тогда

                Продолжить;

            КонецЕсли;

            //Если СокрЛП(ТекДок.Субконто1.ЛицевойСчет) = "00002149" ИЛИ СокрЛП(ТекДок.Субконто1.ЛицевойСчет) = "00599856" Тогда
            //    Сообщить("Хай");
            //КонецЕсли;

            НоваяСтрока = ЭтотОбъект.Объект.ТЗ.Добавить();
            НоваяСтрока.ДатаВыписки = ТекДок.ДатаДок;
            НоваяСтрока.НомерВыписки = ТекДок.НомерДок;
            НоваяСтрока.ЛицевойСчет = ТекДок.Субконто1.Наименование + "(" + ТекДок.Субконто1.Код + ")";
            НоваяСтрока.ЛицевойСчетНомер = ТекДок.Субконто1.Код;
            НоваяСтрока.Контрагент = ТекДок.Субконто1.Наименование;
            НоваяСтрока.Адрес = СокрЛП(ТекДок.Субконто1.ЮридическийАдрес);
            НоваяСтрока.ОплаченоВсего = ТекДок.Приход;

            Договор = "";
            Договор = Строка(СокрЛП(ТекДок.Субконто2.Наименование));
            Если (Договор <> "") И (Найти(Договор, "(") > 0) И (Найти(Договор, ")") > 0) И (Найти(Договор, ")") - Найти(Договор, "(") > 1) Тогда
                НоваяСтрока.Комментарий = Сред(Договор, Найти(Договор, "(") + 1, Найти(Договор, ")") - Найти(Договор, "(") - 1);
                НоваяСтрока.Комментарий = Врег(СокрЛ(Лев(НоваяСтрока.Комментарий, 1))) + СокрЛП(Сред(НоваяСтрока.Комментарий, 2));
            Иначе
                НоваяСтрока.Комментарий = "Водоснабжение и водоотведение";
            КонецЕсли;

            НоваяСтрока.ЧастичнаяОплата = 0;
            НоваяСтрока.ПолнаяОплата = ТекДок.Приход;
            НоваяСтрока.Аванс = 0;
            НоваяСтрока.Пени = 0;

            Ит.ИспользоватьСубконто(База.EvalExpr("ВидыСубконто.Контрагенты"), ТекДок.Субконто1, 1);
            Ит.ИспользоватьСубконто(База.EvalExpr("ВидыСубконто.Договоры"), ТекДок.Субконто2, 1);
            Ит.ВыполнитьЗапрос(Объект.ДатаНач, КонецДня(Объект.ДатаКон), "62.1,62.2", "", "", 1, "Проводка", "S");

            Если (Ит.СКД() - Ит.СКК() < 0) И (ТекДок.Приход + (Ит.СКД() - Ит.СКК()) > 0) Тогда

                НоваяСтрока.Аванс = -(Ит.СКД() - Ит.СКК());
                НоваяСтрока.ПолнаяОплата = НоваяСтрока.ПолнаяОплата + (Ит.СКД() - Ит.СКК());

            ИначеЕсли (Ит.СКД() - Ит.СКК() < 0) И (ТекДок.Приход + (Ит.СКД() - Ит.СКК()) <= 0) Тогда

                НоваяСтрока.Аванс = НоваяСтрока.ПолнаяОплата;
                НоваяСтрока.ПолнаяОплата = 0;

            ИначеЕсли Ит.СКД() - Ит.СКК() > 0 Тогда

                НоваяСтрока.ЧастичнаяОплата = НоваяСтрока.ПолнаяОплата;
                НоваяСтрока.ПолнаяОплата = 0;
                НоваяСтрока.Аванс = 0;

            КонецЕсли;

        КонецЦикла;

    КонецЦикла;

    Док55.ВыбратьДокументы(Объект.ДатаНач, КонецДня(Объект.ДатаКон));
    ИндВыписки = 0;
    Пока Док55.ПолучитьДокумент() > 0 Цикл

        ИндВыписки = ИндВыписки + 1;
        Если (Док55.ПометкаУдаления() = 1) ИЛИ (Док55.Проведен() = 0) Тогда

            Продолжить;

        КонецЕсли;

        ТекДок55 = Док55.ТекущийДокумент();

        ТекДок55.ВыбратьСтроки();
        ИндСтрокиВыписки = 0;
        ВсегоСтрокВВыписке = ТекДок55.КоличествоСтрок();
        Пока ТекДок55.ПолучитьСтроку() = 1 Цикл

            ИндСтрокиВыписки = ИндСтрокиВыписки + 1;
            Состояние("Сбор данных из " + ИмяБазы + "... " + Символы.ПС + "Выписка 55 №" + ТекДок55.НомерДок + " строка: " + ИндСтрокиВыписки, ИндСтрокиВыписки * 100 / ВсегоСтрокВВыписке);

            Если База.ПустоеЗначение(ТекДок55.Субконто1) = 1 Тогда

                Продолжить;

            КонецЕсли;

            //Проверяем только информацию по контрагентам
            Если (ТекДок55.Субконто1.Вид() <> "Контрагенты") Тогда

                Продолжить;

            КонецЕсли;

            //По абонентам "Муниципипальное жилье" и "Частный сектор г. Курска" чеки не печатаем
            Если (ТекДок55.Субконто1.Код = "00020388") ИЛИ (ТекДок55.Субконто1.Код = "00005739") Тогда

                Продолжить;

            КонецЕсли;

            Если ((База.ЗначениеВСтроку(ТекДок55.Субконто1.ВидКонтрагента) <> Строка("{""Перечисление"",""ВидыКонтрагентов"",""ЧастноеЛицо""}")) И (Нрег(СокрЛП(ТекДок55.НазначениеПлатежа)) <> "ф"))
                ИЛИ (ТекДок55.Приход = 0) ИЛИ (База.ПустоеЗначение(ТекДок55.Приход) = 1) Тогда

                Продолжить;

            КонецЕсли;

            //Если СокрЛП(ТекДок.Субконто1.ЛицевойСчет) = "00002149" ИЛИ СокрЛП(ТекДок.Субконто1.ЛицевойСчет) = "00599856" Тогда
            //    Сообщить("Хай");
            //КонецЕсли;

            НоваяСтрока = ЭтотОбъект.Объект.ТЗ.Добавить();
            НоваяСтрока.ДатаВыписки = ТекДок55.ДатаДок;
            НоваяСтрока.НомерВыписки = ТекДок55.НомерДок;
            НоваяСтрока.ЛицевойСчет = ТекДок55.Субконто1.Наименование + "(" + ТекДок55.Субконто1.Код + ")";
            НоваяСтрока.ЛицевойСчетНомер = ТекДок55.Субконто1.Код;
            НоваяСтрока.Контрагент = ТекДок55.Субконто1.Наименование;
            НоваяСтрока.Адрес = СокрЛП(ТекДок55.Субконто1.ЮридическийАдрес);
            НоваяСтрока.ОплаченоВсего = ТекДок55.Приход;

            Договор = "";
            Договор = Строка(СокрЛП(ТекДок55.Субконто2.Наименование));
            Если (Договор <> "") И (Найти(Договор, "(") > 0) И (Найти(Договор, ")") > 0) И (Найти(Договор, ")") - Найти(Договор, "(") > 1) Тогда
                НоваяСтрока.Комментарий = Сред(Договор, Найти(Договор, "(") + 1, Найти(Договор, ")") - Найти(Договор, "(") - 1);
                НоваяСтрока.Комментарий = Врег(СокрЛ(Лев(НоваяСтрока.Комментарий, 1))) + СокрЛП(Сред(НоваяСтрока.Комментарий, 2));
            Иначе
                НоваяСтрока.Комментарий = "Водоснабжение и водоотведение";
            КонецЕсли;

            НоваяСтрока.ЧастичнаяОплата = 0;
            НоваяСтрока.ПолнаяОплата = ТекДок55.Приход;
            НоваяСтрока.Аванс = 0;
            НоваяСтрока.Пени = 0;

            Ит.ИспользоватьСубконто(База.EvalExpr("ВидыСубконто.Контрагенты"), ТекДок55.Субконто1, 1);
            Ит.ИспользоватьСубконто(База.EvalExpr("ВидыСубконто.Договоры"), ТекДок55.Субконто2, 1);
            Ит.ВыполнитьЗапрос(Объект.ДатаНач, КонецДня(Объект.ДатаКон), "62.1,62.2", "", "", 1, "Проводка", "S");

            Если (Ит.СКД() - Ит.СКК() < 0) И (ТекДок55.Приход + (Ит.СКД() - Ит.СКК()) > 0) Тогда

                НоваяСтрока.Аванс = -(Ит.СКД() - Ит.СКК());
                НоваяСтрока.ПолнаяОплата = НоваяСтрока.ПолнаяОплата + (Ит.СКД() - Ит.СКК());

            ИначеЕсли (Ит.СКД() - Ит.СКК() < 0) И (ТекДок55.Приход + (Ит.СКД() - Ит.СКК()) <= 0) Тогда

                НоваяСтрока.Аванс = НоваяСтрока.ПолнаяОплата;
                НоваяСтрока.ПолнаяОплата = 0;

            ИначеЕсли Ит.СКД() - Ит.СКК() > 0 Тогда

                НоваяСтрока.ЧастичнаяОплата = НоваяСтрока.ПолнаяОплата;
                НоваяСтрока.ПолнаяОплата = 0;
                НоваяСтрока.Аванс = 0

                КонецЕсли;

        КонецЦикла

    КонецЦикла;

    // Закрываем базу
    База.ExecuteBatch("ЗавершитьРаботуСистемы(0)");
    База = "";

    // Сварачиваем таблицу
    СвернутьВременуюТаблицу();

    ВсегоВТЗ = ЭтотОбъект.Объект.ТЗ.Количество();
    ИндВТЗ = 0;
    Для Каждого СтрокаОплаты Из ЭтотОбъект.Объект.ТЗ Цикл

        ИндВТЗ = ИндВТЗ + 1;
        Состояние("Сбор данных из " + ИмяБазы + ". Пожалуйста подождите...", ИндВТЗ * 100 / ВсегоВТЗ);

        НоваяСтрока = Объект.СтрокиРегистрацииОплат.Добавить();
        НоваяСтрока.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
        НоваяСтрока.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
        НоваяСтрока.Сумма = СтрокаОплаты.ОплаченоВсего;
        НоваяСтрока.timestamp = СтрокаОплаты.ДатаВыписки;

        // УИД
        Годx = Сред(СтрокаОплаты.ДатаВыписки, 7, 4);
        Месяцx = Сред(СтрокаОплаты.ДатаВыписки, 4, 2);
        Деньx = Сред(СтрокаОплаты.ДатаВыписки, 1, 2);
        НоваяСтрока.external_id = СокрЛП(Объект.ПрефикНомера) + Годx + Месяцx + Деньx + "_" + СтрокаОплаты.НомерВыписки + "_" + СтрокаОплаты.ЛицевойСчетНомер;

        НоваяСтрока.База = ИмяБазы;

        НоваяСтрока.phone = "";
        НоваяСтрока.email = "";
        НоваяСтрока.total = СтрокаОплаты.ОплаченоВсего;
        НоваяСтрока.type = Объект.ПоУмолчанию_type; // 1 - электронный  2 - аванс 3 - кредит

        Если СтрокаОплаты.ПолнаяОплата <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.external_id = НоваяСтрока.external_id;
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = СтрокаОплаты.Комментарий;
            НоваяСтрокаД.Сумма = СтрокаОплаты.ПолнаяОплата;
            НоваяСтрокаД.Пени = 0;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 4;
            НоваяСтрокаД.items_mode = 4;

        КонецЕсли;

        Если СтрокаОплаты.ЧастичнаяОплата <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.external_id = НоваяСтрока.external_id;
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = СтрокаОплаты.Комментарий;
            НоваяСтрокаД.Сумма = СтрокаОплаты.ЧастичнаяОплата;
            НоваяСтрокаД.Пени = 0;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 4;
            НоваяСтрокаД.items_mode = 5;

        КонецЕсли;

        Если СтрокаОплаты.Аванс <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.external_id = НоваяСтрока.external_id;
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = СтрокаОплаты.Комментарий;
            НоваяСтрокаД.Сумма = СтрокаОплаты.Аванс;
            НоваяСтрокаД.Пени = 0;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 4;
            НоваяСтрокаД.items_mode = 3;

        КонецЕсли;

        Если СтрокаОплаты.Пени <> 0 Тогда

            НоваяСтрокаД = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
            НоваяСтрокаД.external_id = НоваяСтрока.external_id;
            НоваяСтрокаД.Лицевойсчет = СтрокаОплаты.ЛицевойСчет;
            НоваяСтрокаД.ДокРегистрацияОплаты = "Выписка " + СтрокаОплаты.НомерВыписки;
            НоваяСтрокаД.Услуга = СтрокаОплаты.Комментарий + "(пени)";
            НоваяСтрокаД.Сумма = 0;
            НоваяСтрокаД.Пени = СтрокаОплаты.Пени;
            НоваяСтрокаД.Аванс = 0;
            НоваяСтрокаД.Долг = 0;
            НоваяСтрокаД.items_type = 10;
            НоваяСтрокаД.items_mode = 4;

        КонецЕсли;

    КонецЦикла;

    ПродолжитьЗаполнение();

КонецПроцедуры

&НаСервере
Процедура ПолучитьОбщуюТаблицуРасшифровкиОплат()
    // Токмаков 29.10.24
    // добавил поиск строки "Экспресс-анализ"
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка КАК Ссылка,
        |   КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект КАК Объект,
        |   ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма, 0) КАК Сумма,
// Гарант+ Килипенко ++
//
//         |   ВЫБОР
//         |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) > 0
//         |               И КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Наименование = ""Холодное водоснабжение""
//         |           ТОГДА ""Холодное водоснабжение (пени)""
//         |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) = 0
//         |               И КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Наименование = ""Холодное водоснабжение""
//         |           ТОГДА ""Холодное водоснабжение""
//         |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) = 0
//         |               И КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Наименование = ""Водоотведение""
//         |           ТОГДА ""Водоотведение""
//         // Гарант+ Килипенко ++
//         |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) = 0
//         |               И КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Наименование = ""Канализация""
//         |           ТОГДА ""Водоотведение""
//         // Гарант+ Килипенко ++
//         |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) = 0
//         |               И КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Наименование = ""Холодная вода на подогрев в целях предоставления горячего водоснабжения""
//         |           ТОГДА ""Холодная вода на подогрев в целях предоставления горячего водоснабжения""
//         |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) = 0
//         |               И КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Наименование = ""Горячее водоснабжение""
//         |           ТОГДА ""Горячее водоснабжение""
//         |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) = 0
//         |               И КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Наименование = ""Экспресс-анализ%""
//         |           ТОГДА ""Экспресс-анализ""
//         |       ИНАЧЕ ""Ошибка определения услуги""
//         |   КОНЕЦ КАК Услуга,
        |   КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга КАК Услуга,
//
// Гарант+ Килипенко --
        |   КВП_РегистрацияОплатыРасшифровкаПлатежа.МесяцНачисления КАК МесяцНачисления,
        |   ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) КАК Пени,
        |   КВП_РегистрацияОплатыРасшифровкаПлатежа.АвансСумма КАК АвансСумма,
        |   КВП_РегистрацияОплатыРасшифровкаПлатежа.ДолгСумма КАК ДолгСумма,
        |   ВЫБОР
        |       КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.ДолгСумма, 0) = 0
        |               И ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма, 0) > 0
        |           ТОГДА ""Да""
        |       ИНАЧЕ ""Нет""
        |   КОНЕЦ КАК ЭтоАванс
        |ИЗ
        |   Документ.КВП_РегистрацияОплаты.РасшифровкаПлатежа КАК КВП_РегистрацияОплатыРасшифровкаПлатежа
        |ГДЕ
        |   КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
        |   И КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА
        |   И КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.Организация = &Организация
        |   И (ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма, 0) <> 0
        |           ИЛИ ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени, 0) <> 0)
// Гарант+ Килипенко 06.02.2025 Признак выгрузки в ОФД ++
//        |   И НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.Комментарий ПОДОБНО ""Атом%""
//        |   И НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.Комментарий ПОДОБНО ""#%""
//        |   И НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.Комментарий ПОДОБНО ""Почта%""
//
        |   // По ТЗ выгружаться должны только документы с включенным признаком `ГП_ОплатаОтПокупателяФизЛица`
        |   И КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.ГП_ОплатаОтПокупателяФизЛица = ИСТИНА
//
// Гарант+ Килипенко 06.02.2025 Признак выгрузки в ОФД --
        |   И КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка.ВидОперации = &ВидОперации";
    Если НЕ ЛицевойСчет.Пустая() Тогда
        Запрос.Текст = Запрос.Текст + "
            |   И КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект = &Объект";
        Запрос.УстановитьПараметр("Объект", ЛицевойСчет);
    КонецЕсли;

    Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
    Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
    Запрос.УстановитьПараметр("Организация", Объект.Организация);
    Запрос.УстановитьПараметр("ВидОперации", Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет);

    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    РезультатЗапроса.Свернуть("Ссылка, Объект, ЭтоАванс, Услуга", "Сумма, Пени, АвансСумма, ДолгСумма");

    // Гарант+ Килипенко ++

    // ОбщаяТаблицаРасшифровкиОплат = РезультатЗапроса.Скопировать();
    // ОбщаяТаблицаРасшифровкиОплат.Индексы.Добавить("Ссылка, Объект");

    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Очистить();
    ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.Загрузить(РезультатЗапроса);
    // Гарант+ Килипенко --
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНаСервере()

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК Ссылка,
        |   КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК Объект,
        |   СУММА(КВП_РегистрацияОплатыЛицевыеСчета.Сумма) КАК Сумма
        |ИЗ
        |   Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
        |ГДЕ
        |   КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
        |   И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Проведен = ИСТИНА
        |   И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Организация = &Организация
// Гарант+ Килипенко 06.02.2025 Признак выгрузки в ОФД ++
//
//        |   И НЕ КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Комментарий ПОДОБНО ""%Атом%""
//        |   И НЕ КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Комментарий ПОДОБНО ""#%""
//        |   И НЕ КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Комментарий ПОДОБНО ""%Почта%""
//
        |   // По ТЗ выгружаться должны только документы с включенным признаком `ГП_ОплатаОтПокупателяФизЛица`
        |   И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.ГП_ОплатаОтПокупателяФизЛица = ИСТИНА
//
// Гарант+ Килипенко 06.02.2025 Признак выгрузки в ОФД --
        |   И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.ВидОперации = &ВидОперации
        |
// Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
//
        |СГРУППИРОВАТЬ ПО
        |   КВП_РегистрацияОплатыЛицевыеСчета.Ссылка,
        |   КВП_РегистрацияОплатыЛицевыеСчета.Объект
//
// Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД --
        |";

    Если НЕ ЛицевойСчет.Пустая() Тогда
        Запрос.Текст = Запрос.Текст + "
            |   И КВП_РегистрацияОплатыЛицевыеСчета.Объект = &Объект";
        Запрос.УстановитьПараметр("Объект", ЛицевойСчет);
    КонецЕсли;
    Запрос.Текст = Запрос.Текст + "
        |УПОРЯДОЧИТЬ ПО
        |   Ссылка,
        |   Объект
        |АВТОУПОРЯДОЧИВАНИЕ";

    Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
    Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
    Запрос.УстановитьПараметр("Организация", Объект.Организация);
    Запрос.УстановитьПараметр("ВидОперации", Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет);

    РезультатЗапроса = Запрос.Выполнить().Выгрузить();

    ОбщийСписокЛицевыхСчетов = РезультатЗапроса.ВыгрузитьКолонку("Объект");

    ПолучитьОбщуюТаблицуРасшифровкиОплат();

    ИндексВыполнения = 0;
    ЗапомнитьОбъект = Null; // УДАЛИТЬ. Не имеет смысла (Гарант+ Килипенко)
    ЗапомнитьДокумент = Null; // УДАЛИТЬ. Не имеет смысла (Гарант+ Килипенко)
    ЭтоПовтор = Ложь; // УДАЛИТЬ. Не имеет смысла (Гарант+ Килипенко)

    Для Каждого ВыборкаДетальныеЗаписи Из РезультатЗапроса Цикл

        // Гарант+ Килипенко 06.02.2025 Признак выгрузки в ОФД ++
        //
        // // Пропускаем НЕВЫЯСНЕННЫЕ ОПЛАТЫ (999999)
        // Если ВыборкаДетальныеЗаписи.Объект.Код = "000784476" Тогда
        //     Продолжить;
        // КонецЕсли;
        //
        // Гарант+ Килипенко 06.02.2025 Признак выгрузки в ОФД --

        // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД ++
        // ~ Этот участок кода не имеет смысла т.к. закомментирована строка `ЗапомнитьДокумент = ВыборкаДетальныеЗаписи.Ссылка` ~

        // // Определяем повторяющиеся ли это Объект(Лицевой счет) или нет,
        // // ставим пометку.
        // Если ЗапомнитьОбъект = ВыборкаДетальныеЗаписи.Объект И ЗапомнитьДокумент = ВыборкаДетальныеЗаписи.Ссылка Тогда
        //     ЭтоПовтор = Истина;
        // Иначе
        //     ЭтоПовтор = Ложь;
        // КонецЕсли;

        ИдентификаторСтрокиОплаты = УникальныйНомерДокумента(ВыборкаДетальныеЗаписи.Ссылка.Дата, ВыборкаДетальныеЗаписи.Ссылка.Номер, ВыборкаДетальныеЗаписи.Объект.Код);
        //
        // Гарант+ Килипенко 11.02.2025 Признак выгрузки в ОФД --

        // Заполняем основную таблицу
        НоваяСтрока = Объект.СтрокиРегистрацииОплат.Добавить();
        НоваяСтрока.ЛицевойСчет = ВыборкаДетальныеЗаписи.Объект;
        НоваяСтрока.База = "BUH_1C8";
        НоваяСтрока.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
        НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
        НоваяСтрока.timestamp = ВыборкаДетальныеЗаписи.Ссылка.Дата;
        НоваяСтрока.external_id = ИдентификаторСтрокиОплаты;

        НоваяСтрока.phone = "";
        НоваяСтрока.email = "";
        НоваяСтрока.total = ВыборкаДетальныеЗаписи.Сумма;
        НоваяСтрока.type = Объект.ПоУмолчанию_type; // 1 - электронный  2 - аванс 3 - кредит

        СП = Новый Структура;
        СП.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
        СП.Вставить("Объект", ВыборкаДетальныеЗаписи.Объект);

        // Пропускаем расшифровку повторного лицевого счета,
        // т.к. расшифровка одна на все оплаты в одном документе,
        // ну даа, как то так, сам в шоке, из-за этого нет возможности разделить оплаты
        // в одном документе и записывается как одна оплата.
        Если НЕ ЭтоПовтор Тогда

            // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД ++
            //
            //ЗаполненоУспешно = ЗаполнитьРасшифровкиПлатежа(СП);

            ЗаполненоУспешно = ЗаполнитьРасшифровкиПлатежа(СП, ИдентификаторСтрокиОплаты);
            //
            // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД --

            // Если произошла ошибка при заполнении,
            // тогда остановливаем процесс и возвращаем Ложь выполнении функции
            Если НЕ ЗаполненоУспешно Тогда

                Возврат Ложь;

            КонецЕсли;

        КонецЕсли;

        // Запоминаем лицевой счет, для проверки дубля оплаты одним лицевым счетом в одном документе,
        // если такие есть они будут идти последовательно друг за другом из-за сортировки по Возр.
        ЗапомнитьОбъект = ВыборкаДетальныеЗаписи.Объект; // УДАЛИТЬ. Не имеет смысла (Гарант+ Килипенко)
        //ЗапомнитьДокумент = ВыборкаДетальныеЗаписи.Ссылка;

        ИндексВыполнения = ИндексВыполнения + 1;

    КонецЦикла;

    // Сварачиваем строки в основной таблице,
    // в этот момент как раз и сворачиваются оплаты с одинаковым объектом(Лицевым счетом).
    СвернутьТаблицуОплат();

    // Заполнено успешно
    Возврат Истина;

КонецФункции

&НаСервере
Процедура СвернутьТаблицуОплат()

    ТЗР = Объект.СтрокиРегистрацииОплат.Выгрузить();
    ТЗР.Свернуть("База, ДокРегистрацияОплаты, ЛицевойСчет, type, external_id, timestamp, phone, email", "Сумма, total");
    Объект.СтрокиРегистрацииОплат.Очистить();
    Объект.СтрокиРегистрацииОплат.Загрузить(ТЗР);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьРасшифровкиПлатежа(Знач СтруктураОтбораРасшифровки, Знач ИдентификаторСтрокиОплаты)
// Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД ++
//
// Функция ЗаполнитьРасшифровкиПлатежа(СтруктураПараметров)
//
// Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД ++

    РезультатПоиска = ЭтотОбъект.Объект.ОбщаяТаблицаРасшифровкиОплат.НайтиСтроки(СтруктураОтбораРасшифровки);

    Инд = 0;
    ИндError = 0;
    ИндErrorP = 0;
    ДляПров = Ложь;
    КоличествоПредупреждений = 0;

    НачальныйИндексСтроки = Объект.РасшифровкаСтрокРегистрациОплат.Количество();

    Для Каждого ВыборкаДетальныеЗаписи Из РезультатПоиска Цикл

        Если ВыборкаДетальныеЗаписи.Услуга = "Ошибка определения услуги" Тогда
            Сообщить("Ошибка (код 0). Услуга не определена. Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Код);
            Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
            Объект.СтрокиРегистрацииОплат.Очистить();
            Объект.ТЧЧека.Очистить();
            Возврат Ложь;
        КонецЕсли;

        НоваяСтрока = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
        НоваяСтрока.ЛицевойСчет = ВыборкаДетальныеЗаписи.Объект;
        НоваяСтрока.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
        НоваяСтрока.Услуга = ВыборкаДетальныеЗаписи.Услуга;
        НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
        НоваяСтрока.Пени = ВыборкаДетальныеЗаписи.Пени;
        НоваяСтрока.Аванс = ВыборкаДетальныеЗаписи.АвансСумма;
        НоваяСтрока.Долг = ВыборкаДетальныеЗаписи.ДолгСумма;

        // проверю Пени это или Услуга(всего два варианта)
        Если ВыборкаДетальныеЗаписи.Услуга = "Холодное водоснабжение (пени)" Тогда

            // разбиваю пени и Услугу в одной строке,
            // т.к. есть оплата Пени предполагаю, что оплата полная(нужно понаблюдать)
            // и наоборот если это авнас то это часть - Аванс,
            // иначе это просто оплата Пени
            Если ВыборкаДетальныеЗаписи.Сумма > 0 И ВыборкаДетальныеЗаписи.Пени > 0 Тогда

                Если ВыборкаДетальныеЗаписи.ЭтоАванс <> "Да" Тогда

                    НоваяСтрока.Пени = 0;
                    НоваяСтрока.Услуга = "Холодное водоснабжение";
                    НоваяСтрока.items_type = 4;
                    НоваяСтрока.items_mode = 4;

                Иначе

                    НоваяСтрока.Пени = 0;
                    НоваяСтрока.Услуга = "Холодное водоснабжение";
                    НоваяСтрока.items_type = 4;
                    НоваяСтрока.items_mode = 3;

                КонецЕсли;

                // Разделяем пени
                НоваяСтрокаПени = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
                НоваяСтрокаПени.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
                НоваяСтрокаПени.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
                НоваяСтрокаПени.Услуга = ВыборкаДетальныеЗаписи.Услуга;
                НоваяСтрокаПени.Сумма = 0;
                НоваяСтрокаПени.Пени = ВыборкаДетальныеЗаписи.Пени;
                НоваяСтрокаПени.Аванс = ВыборкаДетальныеЗаписи.АвансСумма;
                НоваяСтрокаПени.Долг = ВыборкаДетальныеЗаписи.ДолгСумма;
                НоваяСтрокаПени.items_type = 10;
                НоваяСтрокаПени.items_mode = 4;

            Иначе

                НоваяСтрока.items_type = 10;
                НоваяСтрока.items_mode = 4;

            КонецЕсли;

        Иначе

            // Гарант+ Килипенко ++

            УслугаДляПараметра = ВыборкаДетальныеЗаписи.Услуга;

            // // выбираю вид услуги для проверки остатка в дальнейшем
            // // Токмаков 29.10.24
            // // добавил УслугаДляПараметра "Экспресс-анализ"
            // Если ВыборкаДетальныеЗаписи.Услуга = "Холодное водоснабжение" Тогда
            //     УслугаДляПараметра = ХВ;
            // ИначеЕсли ВыборкаДетальныеЗаписи.Услуга = "Горячее водоснабжение" Тогда
            //     УслугаДляПараметра = ГВ;
            // ИначеЕсли ВыборкаДетальныеЗаписи.Услуга = "Водоотведение" Тогда
            //     УслугаДляПараметра = Кон;
            //     // Гарант+ Килипенко ++
            // ИначеЕсли ВыборкаДетальныеЗаписи.Услуга = "Канализация" Тогда
            //     УслугаДляПараметра = Кон;
            //     // Гарант+ Килипенко --
            // ИначеЕсли ВыборкаДетальныеЗаписи.Услуга = "Холодная вода на подогрев в целях предоставления горячего водоснабжения" Тогда
            //     УслугаДляПараметра = Подогрев;
            // ИначеЕсли ВыборкаДетальныеЗаписи.Услуга = "Экспресс-анализ" Тогда
            //     УслугаДляПараметра = Ан;
            // КонецЕсли;

            // Гарант+ Килипенко --

            // если в строке только сумма без долга - это Аванс
            Если ВыборкаДетальныеЗаписи.Сумма > 0 И ВыборкаДетальныеЗаписи.ДолгСумма = 0 Тогда // На аванс

                // Проверяем действительно ли у него аванс
                ПолучитьОбщуюТаблицуОстатковПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

                СП = Новый Структура;
                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
                СП.Вставить("Услуга", УслугаДляПараметра);

                Если ЭтотОбъект.Объект.ТаблицаОстатков <> Неопределено Тогда
                    ДеталиА = ЭтотОбъект.Объект.ТаблицаОстатков.НайтиСтроки(СП);
                КонецЕсли;

                // проверяем чтобы была только одна строка в результате,
                // иначе выводим ошибку
                Если ЭтотОбъект.Объект.ТаблицаОстатков <> Неопределено И ДеталиА.Количество() = 1 Тогда

                    // если остаток меньше тогда всё ок,
                    // иначе выводим ошибку и разбераемся, скорее всего разнесено неправильно в рег. оплате
                    Если ДеталиА[0].СуммаНачисленияОстаток < 0 Тогда

                        НоваяСтрока.Долг = ДеталиА[0].СуммаНачисленияОстаток;
                        НоваяСтрока.items_type = 4;
                        НоваяСтрока.items_mode = 3;

                    Иначе

                        Сообщить("Ошибка (код 7). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                            + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
                        Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
                        Объект.СтрокиРегистрацииОплат.Очистить();
                        Объект.ТЧЧека.Очистить();
                        Возврат Ложь;

                    КонецЕсли;

                Иначе

                    Сообщить("Ошибка (код 6). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
                    Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
                    Объект.СтрокиРегистрацииОплат.Очистить();
                    Объект.ТЧЧека.Очистить();
                    Возврат Ложь;

                КонецЕсли;

            ИначеЕсли ВыборкаДетальныеЗаписи.Сумма = ВыборкаДетальныеЗаписи.ДолгСумма Тогда // Полная оплата

                // Проверяем действительно ли у него полная оплата
                ПолучитьОбщуюТаблицуОстатковПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

                СП = Новый Структура;
                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
                СП.Вставить("Услуга", УслугаДляПараметра);

                Если ЭтотОбъект.Объект.ТаблицаОстатков <> Неопределено Тогда
                    ДеталиПО = ЭтотОбъект.Объект.ТаблицаОстатков.НайтиСтроки(СП);
                КонецЕсли;

                Если ЭтотОбъект.Объект.ТаблицаОстатков = Неопределено ИЛИ ДеталиПО.Количество() = 0 Тогда

                    НоваяСтрока.items_type = 4;
                    НоваяСтрока.items_mode = 4;

                ИначеЕсли ДеталиПО.Количество() = 1 Тогда

                    // если остаток больше тогда это - Частичная оплата,
                    // иначе Полная
                    Если ДеталиПО[0].СуммаНачисленияОстаток > 0 Тогда

                        // дополнительная проверка от 20.05.2020г
                        // если общий остаток равен нулю (есть такие случаи)
                        // тогда и по этой услуге будет полная оплата

                        СП = Новый Структура;
                        СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);

                        ДеталиПО2 = ЭтотОбъект.Объект.ТаблицаОстатков.НайтиСтроки(СП);
                        СуммаДляПроверки = 0;
                        Для Каждого СтрокаСуммы Из ДеталиПО2 Цикл

                            СуммаДляПроверки = СуммаДляПроверки + СтрокаСуммы.СуммаНачисленияОстаток;

                        КонецЦикла;

                        Если СуммаДляПроверки <> 0 Тогда

                            ИндError = ИндError + 1;
                            НоваяСтрока.Долг = ДеталиПО[0].СуммаНачисленияОстаток;
                            НоваяСтрока.items_type = 4;
                            НоваяСтрока.items_mode = 5;

                        Иначе

                            НоваяСтрока.Долг = ДеталиПО[0].СуммаНачисленияОстаток;
                            НоваяСтрока.items_type = 4;
                            НоваяСтрока.items_mode = 4;

                        КонецЕсли;

                    Иначе

                        НоваяСтрока.items_type = 4;
                        НоваяСтрока.items_mode = 4;

                    КонецЕсли;

                Иначе

                    Сообщить("Ошибка (код 5). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
                    Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
                    Объект.СтрокиРегистрацииОплат.Очистить();
                    Объект.ТЧЧека.Очистить();
                    Возврат Ложь;

                КонецЕсли;

                // здесь выводим ошибку, т.к сумма олаты не может быть больше суммы долга
                // в таких случаях разница должна уйти в Аванс
            ИначеЕсли ВыборкаДетальныеЗаписи.Сумма > ВыборкаДетальныеЗаписи.ДолгСумма Тогда

                // дополнено 02.08.189
                // в случае если абонент оплатил в том же месяце что и насления
                // тогда проверяем и в этом случае разбиваем вручную
                ПолучитьОбщуюТаблицуОстатковПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

                СП = Новый Структура;
                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
                СП.Вставить("Услуга", УслугаДляПараметра);

                Если ЭтотОбъект.Объект.ТаблицаОстатков <> Неопределено Тогда
                    ОстаткиПроверки = ЭтотОбъект.Объект.ТаблицаОстатков.НайтиСтроки(СП);
                Иначе
                    ОстаткиПроверки = Новый ТаблицаЗначений();
                КонецЕсли;

                Для Каждого СтрОст Из ОстаткиПроверки Цикл

                    Если СтрОст.СуммаНачисленияОстаток > 0 Тогда

                        Сообщить("Ошибка (код 4). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                            + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
                        Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
                        Объект.СтрокиРегистрацииОплат.Очистить();
                        Объект.ТЧЧека.Очистить();
                        Возврат Ложь;

                    КонецЕсли;

                КонецЦикла;

                // здесь создаем новые строки на аванс
                // если он "реально" есть
                Если ОстаткиПроверки.Количество() <> 0 Тогда

                    НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.ДолгСумма;
                    НоваяСтрока.items_type = 4;
                    НоваяСтрока.items_mode = 4;

                    НоваяСтрокаАванс = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
                    НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
                    НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
                    НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
                    НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма - ВыборкаДетальныеЗаписи.ДолгСумма;
                    НоваяСтрокаАванс.Пени = 0;
                    НоваяСтрокаАванс.Аванс = 1;
                    НоваяСтрокаАванс.Долг = 0;
                    НоваяСтрокаАванс.items_type = 4;
                    НоваяСтрокаАванс.items_mode = 3;

                Иначе

                    // Если авансы не найдены, а значит это полная оплата
                    // тогда добавляем полную сумму, а не долг
                    НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
                    НоваяСтрока.items_type = 4;
                    НоваяСтрока.items_mode = 4;

                КонецЕсли;

                // здесь частиная оплата, но стоит проверить(здесь какя то фигня бывает, мониторим и если что, исправляем)
            ИначеЕсли ВыборкаДетальныеЗаписи.Сумма < ВыборкаДетальныеЗаписи.ДолгСумма Тогда

                // Проверяем действительно ли у него частичная оплата
                ПолучитьОбщуюТаблицуОстатковПоДокументу(ВыборкаДетальныеЗаписи.Ссылка);

                СП = Новый Структура;
                СП.Вставить("ЛицевойСчет", ВыборкаДетальныеЗаписи.Объект);
                СП.Вставить("Услуга", УслугаДляПараметра);

                Детали = ЭтотОбъект.Объект.ТаблицаОстатков.НайтиСтроки(СП);

                Если Детали.Количество() = 0 Тогда

                    НоваяСтрока.Долг = ВыборкаДетальныеЗаписи.Сумма;
                    НоваяСтрока.items_type = 4;
                    НоваяСтрока.items_mode = 4;

                ИначеЕсли Детали.Количество() = 1 Тогда

                    // когда всё "красиво" должен быть остаток по услуге, тогда это точно Частичная оплата
                    // иначе попытка разбить сумму на Аванс и Услугу, но здесь всё "хитро",
                    // может быть неправильно сделан перерасчет и тогда разобьет некорректно
                    // в любом случае выводим сообщение бухгалтеру(ответсвенному лицу) для проверки корректности разбития,
                    // или исправить перерасчет и сново вручную разбить сумму в документе Рег.оплаты.
                    СаммаПослеПроведенияДокумента = Детали[0].СуммаНачисленияОстаток;
                    НоваяСтрока.Долг = СаммаПослеПроведенияДокумента + ВыборкаДетальныеЗаписи.Сумма;

                    Если СаммаПослеПроведенияДокумента > 0 Тогда // долг

                        НоваяСтрока.items_type = 4;
                        НоваяСтрока.items_mode = 5;

                    ИначеЕсли СаммаПослеПроведенияДокумента < 0 Тогда // аванс

                        // здесь проверяю был ли аванс, до оплаты
                        // если был, тогда всю сумму на аванс
                        Если (СаммаПослеПроведенияДокумента * -1) > ВыборкаДетальныеЗаписи.Сумма
                            ИЛИ (СаммаПослеПроведенияДокумента * -1) = ВыборкаДетальныеЗаписи.Сумма Тогда

                            // проверяем действительно ли у него аванс
                            // или сумма все-таки не зочлась и у него полная оплата
                            ОстаткиПроверкиАванса = ВыборкаОстатковПоВсемУслугам(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Объект);
                            ОстаткиПроверкиАванса.Свернуть("ЛицевойСчет", "СуммаНачисленияОстаток");

                            Если ОстаткиПроверкиАванса.Количество() <> 0
                                И НЕ ОстаткиПроверкиАванса[0].СуммаНачисленияОстаток = 0 Тогда // если общий остаток больше или равен 0 тогда есть какой то остаток(не аванс)

                                // здесь сделаем долнительную проверку
                                // если общий остаток после оплаты больше 0 тогда это точно не аванс
                                // иначе аванс
                                Если ОстаткиПроверкиАванса[0].СуммаНачисленияОстаток < 0 Тогда

                                    // Добавляем остаток на аванс
                                    НоваяСтрокаАванс = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
                                    НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
                                    НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
                                    НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
                                    НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма;
                                    НоваяСтрокаАванс.Пени = 0;
                                    НоваяСтрокаАванс.Аванс = 1;
                                    НоваяСтрокаАванс.Долг = 0;
                                    НоваяСтрокаАванс.items_type = 4;
                                    НоваяСтрокаАванс.items_mode = 3;

                                    Объект.РасшифровкаСтрокРегистрациОплат.Удалить(НоваяСтрока);

                                Иначе

                                    Сообщить("Ошибка (код 35). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);

                                КонецЕсли;

                            Иначе // иначе если остатков нет тогда ясно что это полная оплата

                                // Добавляем полную оплату
                                НоваяСтрокаАванс = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
                                НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
                                НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
                                НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
                                НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма;
                                НоваяСтрокаАванс.Пени = 0;
                                НоваяСтрокаАванс.Аванс = 0;
                                НоваяСтрокаАванс.Долг = 0;
                                НоваяСтрокаАванс.items_type = 4;
                                НоваяСтрокаАванс.items_mode = 4;

                                Объект.РасшифровкаСтрокРегистрациОплат.Удалить(НоваяСтрока);


                            КонецЕсли;

                        Иначе // здесь сумма после оплаты , меньше суммы самой оплаты(пока что не понятно, что делать в этом случе, вывожу ошибку)

                            // покачто разбиваем на полную оплату и аванс
                            // Добавляем полную оплату
                            НоваяСтрокаАванс = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
                            НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
                            НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
                            НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
                            НоваяСтрокаАванс.Сумма = ВыборкаДетальныеЗаписи.Сумма - (СаммаПослеПроведенияДокумента * -1);
                            НоваяСтрокаАванс.Пени = 0;
                            НоваяСтрокаАванс.Аванс = 0;
                            НоваяСтрокаАванс.Долг = 0;
                            НоваяСтрокаАванс.items_type = 4;
                            НоваяСтрокаАванс.items_mode = 4;

                            // Добавляем остаток на аванс
                            НоваяСтрокаАванс = Объект.РасшифровкаСтрокРегистрациОплат.Добавить();
                            НоваяСтрокаАванс.Лицевойсчет = ВыборкаДетальныеЗаписи.Объект;
                            НоваяСтрокаАванс.ДокРегистрацияОплаты = ВыборкаДетальныеЗаписи.Ссылка;
                            НоваяСтрокаАванс.Услуга = ВыборкаДетальныеЗаписи.Услуга;
                            НоваяСтрокаАванс.Сумма = (СаммаПослеПроведенияДокумента * -1);
                            НоваяСтрокаАванс.Пени = 0;
                            НоваяСтрокаАванс.Аванс = 1;
                            НоваяСтрокаАванс.Долг = 0;
                            НоваяСтрокаАванс.items_type = 4;
                            НоваяСтрокаАванс.items_mode = 3;

                            Объект.РасшифровкаСтрокРегистрациОплат.Удалить(НоваяСтрока);

                            КоличествоПредупреждений = КоличествоПредупреждений + 1;

                            ОбщийОстатокПоВсемУслугам = ВыборкаОстатковПоВсемУслугам(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Объект);

                            Для Каждого СтрПроверкиУслуги Из ОбщийОстатокПоВсемУслугам Цикл

                                Если СтрПроверкиУслуги.Услуга.Наименование = "Горячее водоснабжение" Тогда

                                    Сообщить("ВАЖНО!!!Исправьте(остатки на ГВ). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
                                    Продолжить;

                                КонецЕсли;

                            КонецЦикла;

                            ОбщийОстатокПоВсемУслугам.Свернуть("ЛицевойСчет", "СуммаНачисленияОстаток");

                            Если ОбщийОстатокПоВсемУслугам.Количество() <> 0
                                И НЕ ОбщийОстатокПоВсемУслугам[0].СуммаНачисленияОстаток = 0 Тогда

                                Сообщить("ВАЖНО!!! Исправьте(скорее всего сумма оплаты разбита некорректно). Лицевой счет: "
                                    + ВыборкаДетальныеЗаписи.Объект.Наименование + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);

                            Иначе

                                Сообщить("ВАЖНО!!! Исправьте(должна быть полная оплата). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                                    + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);

                            КонецЕсли;

                        КонецЕсли;

                    КонецЕсли;

                Иначе

                    Сообщить("Ошибка (код 2). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                        + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
                    Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
                    Объект.СтрокиРегистрацииОплат.Очистить();
                    Объект.ТЧЧека.Очистить();
                    Возврат Ложь;

                КонецЕсли;
            Иначе

                Сообщить("Ошибка (код 1). Лицевой счет: " + ВыборкаДетальныеЗаписи.Объект.Наименование
                    + "(" + ВыборкаДетальныеЗаписи.Объект.Код + ")" + ";" + ВыборкаДетальныеЗаписи.Объект.Адрес.Владелец.Наименование);
                Объект.РасшифровкаСтрокРегистрациОплат.Очистить();
                Объект.СтрокиРегистрацииОплат.Очистить();
                Объект.ТЧЧека.Очистить();
                Возврат Ложь;

            КонецЕсли;

        КонецЕсли;

    КонецЦикла;

    // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД ++
    //
    // Заполнение идентификатора для всех строк расшифровки
    РезультатПоискаРасшифровки = ЭтотОбъект.Объект.РасшифровкаСтрокРегистрациОплат.НайтиСтроки(
        Новый Структура("ДокРегистрацияОплаты, ЛицевойСчет",
            СтруктураОтбораРасшифровки.Ссылка, СтруктураОтбораРасшифровки.Объект));
    Для Каждого ТекущаяСтрокаРегистрации Из РезультатПоискаРасшифровки Цикл
        ТекущаяСтрокаРегистрации.external_id = ИдентификаторСтрокиОплаты;
    КонецЦикла;
    //
    // Килипенко Гарант+ 10.02.2025 Доработка выгрузки в ОФД --

    // Выполнено успешно
    Возврат Истина;

КонецФункции

&НаСервере
Функция УдалитьПовторяющиесяЭлементыМассива(Массив) Экспорт

    ТекущийИндекс = 0;
    ВсегоЭлементов = Массив.Количество();

    Пока ТекущийИндекс < ВсегоЭлементов Цикл

        Индекс2 = ТекущийИндекс + 1;
        Пока Индекс2 < ВсегоЭлементов Цикл

            Если Массив[Индекс2] = Массив[ТекущийИндекс] Тогда
                Массив.Удалить(Индекс2);
                ВсегоЭлементов = ВсегоЭлементов - 1;
            Иначе
                Индекс2 = Индекс2 + 1;
            КонецЕсли;

        КонецЦикла;

        ТекущийИндекс = ТекущийИндекс + 1;

    КонецЦикла;

    Возврат Массив;

КонецФункции

#КонецОбласти

#Область РегистрацияЧекаДляТекущейСтроки

// Приход (sell)
&НаКлиенте
Процедура ДляТекущейСтрокиРегистрацияЧека_Приход(Команда)

    ТекСтр = Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;
    Оповещение = Новый ОписаниеОповещения("ДляТекущейСтрокиРегистрацияЧека_Приход_Продолжение", ЭтотОбъект);
    ТекстВопроса = "Будет выполнена регистрация чека ""Приход"" для лицевого счета: " + Символы.ПС + ТекСтр.Лицевойсчет +
        " на сумму: " + ТекСтр.Сумма + Символы.ПС +
        "Продолжить?";
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

&НаКлиенте
Процедура ДляТекущейСтрокиРегистрацияЧека_Приход_Продолжение(Результат, ДополнительныеПараметры) Экспорт

    Если Результат = КодВозвратаДиалога.ОК Тогда
        ДляТекущейСтрокиРегистрацияЧека("sell", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные);
    Иначе
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Регистрация не выполнена.";
        Сообщение.Сообщить();
    КонецЕсли;

КонецПроцедуры
//--------------------------------------------------------------------------------

#КонецОбласти

Функция ТабличнаяЧастьЧека(ДокРегОпл, ЛичСч)

    Если Объект.ТЧЧека.Количество() > 0 Тогда
        Объект.ТЧЧека.Очистить();
    КонецЕсли;

    Для Каждого ТекСтр Из Объект.РасшифровкаСтрокРегистрациОплат Цикл

        Если (ТекСтр.ДокРегистрацияОплаты = ДокРегОпл) И (ТекСтр.Лицевойсчет = ЛичСч) Тогда
            НовСтр = Объект.ТЧЧека.Добавить();
            НовСтр.name = ТекСтр.Услуга;
            Если ТекСтр.Пени <> 0 Тогда
                НовСтр.ЭтоПени = Истина;
            КонецЕсли;
            НовСтр.price = ТекСтр.Сумма + ТекСтр.Пени;
            НовСтр.items_type = ТекСтр.items_type;
            НовСтр.items_mode = ТекСтр.items_mode;
        КонецЕсли;

    КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ДляТекущейСтрокиРегистрацияЧека(ТипОперации, ТекущаяСтрока)

    Получитьtoken();

    // Запись JSON
    Структура = Новый Структура;
    Структура.Вставить("timestamp", ТекущаяСтрока.timestamp); // дата оплаты
    Если ТипОперации = "sell_refund" Тогда
        Структура.Вставить("external_id", "VP" + ТекущаяСтрока.external_id); // уникальный номер документа
    Иначе
        Структура.Вставить("external_id", ТекущаяСтрока.external_id); // уникальный номер документа
    КонецЕсли;

    service = Новый Структура;
    service.Вставить("callback_url", ""); // Адрес, на который придёт ответ от сервера https://test.ru/api.php
    Структура.Вставить("service", service);

    //ТабличнаяЧастьЧека(ТекущаяСтрока.ДокРегистрацияОплаты, ТекущаяСтрока.Лицевойсчет);

    ПП = Новый Структура;
    ПП.Вставить("ДокРегистрацияОплаты", ТекущаяСтрока.ДокРегистрацияОплаты);
    ПП.Вставить("Лицевойсчет", ТекущаяСтрока.Лицевойсчет);
    ПП.Вставить("external_id", ТекущаяСтрока.external_id);

    ТЧЧека = Объект.РасшифровкаСтрокРегистрациОплат.НайтиСтроки(ПП);

    items_М = Новый Массив;

    Для Каждого ТекУслуга Из ТЧЧека Цикл

        items_ = Новый Структура;
        items_.Вставить("name", СокрЛП(ТекУслуга.Услуга)); // Название товара

        price = ТекУслуга.Сумма + ТекУслуга.Пени;

        items_.Вставить("type", ТекУслуга.items_type); // 1–товар, 2-подакцизный товар, 3-работа, 4-услуга...
        items_.Вставить("mode", ТекУслуга.items_mode); // 1-предоплата 100%, 2–частичная предоплата, 3–аванс, 4-полный расчет полная оплата......
        items_.Вставить("price", price); // Цена с учётом скидок
        items_.Вставить("quantity", 1); //количество
        items_.Вставить("sum", price); //сумма

        ЭтоТочноПени = Найти(СокрЛП(ТекУслуга.Услуга), "пени");
        Если ЭтоТочноПени = 0 Тогда

            items_.Вставить("tax", "vat20"); //НДС, допустимые значения vat18, vat20, vat10, vat118, vat110, vat0, none
            items_.Вставить("tax_sum", Окр(price * 20 / 100, 2));

        Иначе

            items_.Вставить("tax", "none"); //НДС, допустимые значения vat18, vat20, vat10, vat118, vat110, vat0, none
            items_.Вставить("tax_sum", 0);

        КонецЕсли;

        items_М.Добавить(items_);

    КонецЦикла;

    attributes = Новый Структура;
    attributes.Вставить("email", ТекущаяСтрока.email); // Email покупателя
    attributes.Вставить("phone", ТекущаяСтрока.phone); // телефон покупателя

    receipt = Новый Структура;
    receipt.Вставить("attributes", attributes);
    receipt.Вставить("items", items_М);
    receipt.Вставить("total", ТекущаяСтрока.total);

    payments_ = Новый Структура;
    payments_.Вставить("type", ТекущаяСтрока.type); //Вид оплаты: 1 – электронный, 2 – аванс, 3 - кредит и т. д. ....
    payments_.Вставить("sum", ТекущаяСтрока.total); //???

    payments_М = Новый Массив;
    payments_М.Добавить(payments_);

    receipt.Вставить("payments", payments_М);

    Структура.Вставить("receipt", receipt);

    ЗаписьJSON = Новый ЗаписьJSON;
    тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
    ЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
    ЗаписатьJSON(ЗаписьJSON, Структура);
    СтрокаJS = ЗаписьJSON.Закрыть();

    ФайлОтвета = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\answer_" + ТипОперации + ".txt";

    // Отправка запроса
    HTTPСоединение = Новый HTTPСоединение("online.schetmash.com", , , , , , Новый ЗащищенноеСоединениеOpenSSL());
    ЗапросPOST = Новый HTTPЗапрос("/lk/api/v1/" + Объект.id_Магазина + "/" + ТипОперации + "?" + "token=" + Объект.token);
    ЗапросPOST.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗапросPOST.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Авто);
    HTTPСоединение.ВызватьHTTPМетод("POST", ЗапросPOST, ФайлОтвета);

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.ОткрытьФайл(ФайлОтвета);

    Пока ЧтениеJSON.Прочитать() Цикл

        ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        Если ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли;

        Если (ИмяСвойства = "id") И ТипJSON = ТипЗначенияJSON.Число Тогда
            id_Чека = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли;

        Если (ИмяСвойства = "status") И ТипJSON = ТипЗначенияJSON.Строка Тогда
            status = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли;

    КонецЦикла;

    ТекущаяСтрока.id_Чека = id_Чека;
    ТекущаяСтрока.status = status;

КонецПроцедуры

&НаКлиенте
Процедура ДляВсехСтрок_РегистрацияЧека_Приход(Команда)

    Инд = 0;
    Всего = Объект.СтрокиРегистрацииОплат.Количество();

    Для Каждого ТекущаяСтрока Из Объект.СтрокиРегистрацииОплат Цикл
        Инд = Инд + 1;
        ДляТекущейСтрокиРегистрацияЧека("sell", ТекущаяСтрока);
        Состояние("Отправлено " + Инд + " из " + Всего, Инд * 100 / Всего, "Отправка чеков");
    КонецЦикла;

    ПоказатьПредупреждение( , "Данные успешно отправлены!");

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусаЧекаДляТекущейСтроки(Команда)

    ТекущаяСтрока = Элементы.СтрокиРегистрацииОплат.ТекущиеДанные;

    ПроверкаСтатусаЧека(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Функция ПроверкаСтатусаЧека(ТекущаяСтрока)

    Получитьtoken();

    ФайлОтвета = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\status_check.txt";

    HTTPСоединение = Новый HTTPСоединение("online.schetmash.com", , , , , , Новый ЗащищенноеСоединениеOpenSSL());
    ЗапросGET = Новый HTTPЗапрос("/lk/api/v1/" + СокрЛП(Объект.id_Магазина) + "/report?token=" + СокрЛП(Объект.token) + "&external_id=" + СокрЛП(ТекущаяСтрока.external_id));
    Ответ = HTTPСоединение.Получить(ЗапросGET, ФайлОтвета);

    ТД = Новый ТекстовыйДокумент;
    ТД.Прочитать(ФайлОтвета);
    Строка = ТД.ПолучитьСтроку(1);
    Если Лев(Строка, СтрДлина("<!DOCTYPE html>")) = "<!DOCTYPE html>" Тогда
        ФайлШТМЛ = СокрЛП(Объект.КаталогДляВременныхФайлов) + "\status_check.html";
        КопироватьФайл(ФайлОтвета, ФайлШТМЛ);
        //ЗапуститьПриложение(ФайлШТМЛ);
        Сообщить("Ответ в виде веб-страницы");
        Возврат Ложь;
    КонецЕсли;

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.ОткрытьФайл(ФайлОтвета);

    //Попытка
    code = Неопределено;
    message = Неопределено;
    status = Неопределено;
    Пока ЧтениеJSON.Прочитать() Цикл
        ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        Если ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли;

        Если (ИмяСвойства = "status") И ТипJSON = ТипЗначенияJSON.Строка Тогда
            status = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли;

        Если (ИмяСвойства = "id") И ТипJSON = ТипЗначенияJSON.Число Тогда
            id = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли;

        Если (ИмяСвойства = "code") И ТипJSON = ТипЗначенияJSON.Число Тогда
            code = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли;
        Если (ИмяСвойства = "message") И ТипJSON = ТипЗначенияJSON.Строка Тогда
            message = ЧтениеJSON.ТекущееЗначение;
        КонецЕсли

    КонецЦикла;

    Если ЗначениеЗаполнено(code)
        И ЗначениеЗаполнено(message)
        И НЕ ЗначениеЗаполнено(status) Тогда
        status = "Код " + code + ": " + message;
    КонецЕсли;
    //Исключение
    //	Инфо = ИнформацияОбОшибке();
    //	а = 0;
    //КонецПопытки;

    ТекущаяСтрока.status = status;
    ТекущаяСтрока.id_Чека = id;
    Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПроверкаСтатусовЧеков(Команда) // Проверка статусов чеков для всех строк

    Инд = 0;
    Всего = Объект.СтрокиРегистрацииОплат.Количество();
    Для Каждого ТекСтр Из Объект.СтрокиРегистрацииОплат Цикл
        Инд = Инд + 1;
        Если НЕ ПроверкаСтатусаЧека(ТекСтр) Тогда
            //Прервать;
        КонецЕсли;
        Состояние("Проверено " + Инд + " из " + Всего, Инд * 100 / Всего, "Проверка статуса чеков");
    КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ЭтотОбъект.Элементы.ГруппаИндикация.Видимость = Ложь;
    ЭтотОбъект.Объект.КаталогДляВременныхФайлов = "D:\TMA\TokenSchetmash";
    ЭтотОбъект.Объект.token = "";
    // Гарант+ Килипенко 17.01.2025 Временно отключен основной доступ ++

    // Объект.id_Магазина = 59;
    // Объект.login = "wkx_53";
    // Объект.password = "P9cyRb3?";

    // Гарант+ Килипенко 17.01.2025 Временно отключен основной доступ --
    ЭтотОбъект.Объект.Организация = Справочники.Организации.НайтиПоКоду("00-000001");
    // Гарант+ Килипенко 17.01.2025 Временно отключен основной доступ ++

    ЭтотОбъект.Объект.id_Магазина = 42;
    ЭтотОбъект.Объект.login = "test_api";
    ЭтотОбъект.Объект.password = "123456";

    // Гарант+ Килипенко 17.01.2025 Временно отключен основной доступ ++
    ЭтотОбъект.Объект.ПрефикНомера = "P_";
    ЭтотОбъект.Объект.ПоУполчаниюНаименованиеУслуги = Справочники.КВП_Услуги.НайтиПоКоду("000001");
    ЭтотОбъект.Объект.РасшифровыватьУслуги = Истина;
    ЭтотОбъект.Объект.ПоУмолчанию_type = 1;
    ЭтотОбъект.Объект.ПоУмолчанию_ПризнакПредметаРасчета = 4;
    ЭтотОбъект.Объект.ПоУмолчанию_ПризнакСпособаРасчета = 1;

    ЭтотОбъект.ХВ = Справочники.КВП_Услуги.НайтиПоНаименованию("Холодное водоснабжение");
    ЭтотОбъект.ГВ = Справочники.КВП_Услуги.НайтиПоНаименованию("Горячее водоснабжение");
    // Гарант+ Килипенко ++

    // Кон = Справочники.КВП_Услуги.НайтиПоНаименованию("Водоотведение");
    ЭтотОбъект.Кон = ГП_РаботаСУслугами.ПолучитьУслугуКанализации().Ссылка;
    ЭтотОбъект.ГП_УслугаНВНаЦСВ = ГП_РаботаСУслугами.ПолучитьУслугуНегативногоВоздействияНаЦСВ().Ссылка;
    ЭтотОбъект.ГП_УслугаПотериВоды = ГП_РаботаСУслугами.ПолучитьУслугуПотериВоды().Ссылка;
    ЭтотОбъект.ГП_УслугаХВСОИ = ГП_РаботаСУслугами.ПолучитьУслугуПлатаЗаХолодноеВодоснабжениеОИ().Ссылка;

    // Гарант+ Килипенко --
    ЭтотОбъект.Подогрев = Справочники.КВП_Услуги.НайтиПоНаименованию("Холодная вода на подогрев в целях предоставления горячего водоснабжения");
    // Гарант+ Килипенко ++

    //Ан = Справочники.КВП_Услуги.НайтиПоНаименованию("Экспресс-анализ");
    ЭтотОбъект.Ан = ГП_РаботаСУслугами.ПолучитьУслугуПодогреваХолоднойВоды().Ссылка;

    // Гарант+ Килипенко --

КонецПроцедуры

&НаКлиенте
Процедура ВозвратПрихода(Команда)

    //ФормаДоступа = ПолучитьФорму("ВнешняяОбработка.APIСервисСчетмашОнлайн_v5_5.Форма.ФормаДоступа");
    //Проверка = ФормаДоступа.ОткрытьМодально();
    //
    //Если Проверка <> Неопределено Тогда
    //
    //    Если Проверка.Свойство("Да") Тогда

    Режим = РежимДиалогаВопрос.ДаНет;
    Ответ = Вопрос("Выполнить Возврат прихода по лицевому счету " + Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Лицевойсчет.Наименование + " на сумма "
            + Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Сумма, Режим, 0);

    Если Ответ = КодВозвратаДиалога.Да Тогда

        //Инд = 0;
        //Всего = Объект.СтрокиРегистрацииОплат.Количество();
        //Для Каждого ТекущаяСтрока Из Объект.СтрокиРегистрацииОплат Цикл
        //
        //    Инд = Инд + 1;
        Состояние("Возврат прихода " + Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Лицевойсчет.Наименование, "Возврат чеков");
        ДляТекущейСтрокиРегистрацияЧека("sell_refund", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные);
        ПоказатьПредупреждение( , "Возврат выполнен успешно");
        //КонецЦикла;

    ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда

        Сообщить("Не выполнено");

    КонецЕсли;

    //    Иначе
    //
    //        Режим = РежимДиалогаВопрос.ПовторитьОтмена;
    //        Ответ = Вопрос("Вы ввели неверный пароль!", Режим, 0);
    //
    //    КонецЕсли;
    //
    //Иначе
    //
    //    Сообщить("Отменен ввод пароля");
    //
    //КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоррекцияПрихода(Команда)

    ФормаДоступа = ПолучитьФорму("Обработка.ГП_APIСервисСчетмашОнлайн.Форма.ФормаДоступа");
    Проверка = ФормаДоступа.ОткрытьМодально();

    Если Проверка <> Неопределено Тогда

        Если Проверка.Свойство("Да") Тогда
            Режим = РежимДиалогаВопрос.ДаНет;
            Ответ = Вопрос("Выполнить Коррекцию прихода по лицевому счету " + Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Лицевойсчет.Наименование + " на сумма "
                    + Элементы.СтрокиРегистрацииОплат.ТекущиеДанные.Сумма, Режим, 0);

            Если Ответ = КодВозвратаДиалога.Да Тогда

                Инд = 0;
                Всего = Объект.СтрокиРегистрацииОплат.Количество();
                Для Каждого ТекущаяСтрока Из Объект.СтрокиРегистрацииОплат Цикл
                    Инд = Инд + 1;
                    ДляТекущейСтрокиРегистрацияЧека("sell_correction", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные);
                    Состояние("Коррекция прихода " + Инд + " из " + Всего, Инд * 100 / Всего, "Отправка чеков");
                КонецЦикла;

            ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда

                Сообщить("Не выполнено");

            КонецЕсли;

        Иначе

            Режим = РежимДиалогаВопрос.ПовторитьОтмена;
            Ответ = Вопрос("Вы ввели неверный пароль!", Режим, 0);

        КонецЕсли;

    Иначе

        Сообщить("Отменен ввод пароля");

    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Состояние_(ТекстСообщения, ИндикаторСообещния = 0, Пояснение = Неопределено)
    Возврат;
    Если НЕ Элементы.ГруппаИндикация.Видимость Тогда
        Элементы.ГруппаИндикация.Видимость = Истина;
    КонецЕсли;
    ОжиданиеСкрытия = 1;
    ПодключитьОбработчикОжидания("СкрытьИндикацию", 1, Истина);
    ТекстСостояния = ТекстСообщения + ?(Пояснение <> Неопределено, " (" + Пояснение + ")", "");
    ИндикаторСостояния = ИндикаторСообещния;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьИндикацию()
    Если ОжиданиеСкрытия > 0 Тогда
        ОжиданиеСкрытия = ОжиданиеСкрытия - 1;
        ПодключитьОбработчикОжидания("СкрытьИндикацию", 1, Истина);
    Иначе
        Элементы.ГруппаИндикация.Видимость = Истина;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоррекцияПриходаВсехСтрок(Команда)

    ФормаДоступа = ПолучитьФорму("Обработка.ГП_APIСервисСчетмашОнлайн.Форма.ФормаДоступа");
    Проверка = ФормаДоступа.ОткрытьМодально();

    Если Проверка <> Неопределено Тогда

        Если Проверка.Свойство("Да") Тогда

            ВсегоСумма = 0;
            Для Каждого Стр Из Объект.СтрокиРегистрацииОплат Цикл

                ВсегоСумма = ВсегоСумма + Стр.Сумма;

            КонецЦикла;

            Режим = РежимДиалогаВопрос.ДаНет;
            Ответ = Вопрос("Выполнить Коррекцию прихода по всем строкам табличной части на сумма " + ВсегоСумма, Режим, 0);

            Если Ответ = КодВозвратаДиалога.Да Тогда

                Инд = 0;
                Всего = Объект.СтрокиРегистрацииОплат.Количество();
                Для Каждого ТекущаяСтрока Из Объект.СтрокиРегистрацииОплат Цикл
                    Инд = Инд + 1;
                    ДляТекущейСтрокиРегистрацияЧека("sell_correction", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные);
                    Состояние("Коррекция прихода " + Инд + " из " + Всего, Инд * 100 / Всего, "Отправка чеков");
                КонецЦикла;

            ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда

                Сообщить("Не выполнено");

            КонецЕсли;
        Иначе

            Режим = РежимДиалогаВопрос.ПовторитьОтмена;
            Ответ = Вопрос("Вы ввели неверный пароль!", Режим, 0);

        КонецЕсли;

    Иначе

        Сообщить("Отменен ввод пароля");

    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратПриходаВсехСтрок(Команда)

    ФормаДоступа = ПолучитьФорму("ВнешняяОбработка.ГП_APIСервисСчетмашОнлайн.Форма.ФормаДоступа");
    Проверка = ФормаДоступа.ОткрытьМодально();

    Если Проверка <> Неопределено Тогда

        Если Проверка.Свойство("Да") Тогда

            ВсегоСумма = 0;
            Для Каждого Стр Из Объект.СтрокиРегистрацииОплат Цикл

                ВсегоСумма = ВсегоСумма + Стр.Сумма;

            КонецЦикла;

            Режим = РежимДиалогаВопрос.ДаНет;
            Ответ = Вопрос("Выполнить Возврат прихода по всем строкам табличной части на сумма " + ВсегоСумма, Режим, 0);

            Если Ответ = КодВозвратаДиалога.Да Тогда

                Инд = 0;
                Всего = Объект.СтрокиРегистрацииОплат.Количество();
                Для Каждого ТекущаяСтрока Из Объект.СтрокиРегистрацииОплат Цикл
                    Инд = Инд + 1;
                    ДляТекущейСтрокиРегистрацияЧека("sell_refund", Элементы.СтрокиРегистрацииОплат.ТекущиеДанные);
                    Состояние("Возврат прихода " + Инд + " из " + Всего, Инд * 100 / Всего, "Отправка чеков");
                КонецЦикла;

            ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда

                Сообщить("Не выполнено");

            КонецЕсли;

        Иначе

            Режим = РежимДиалогаВопрос.ПовторитьОтмена;
            Ответ = Вопрос("Вы ввели неверный пароль!", Режим, 0);

        КонецЕсли;

    Иначе

        Сообщить("Отменен ввод пароля");

    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыборкаОстатков(Документ, ЛицевойСчет, Услуга)

    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
        |ИЗ
        |    РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&Дата, ) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
        |ГДЕ
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет = &ЛицевойСчет
        |    И КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = &Услуга";

    Запрос.УстановитьПараметр("Дата", Новый Граница(Документ.МоментВремени(), ВидГраницы.Включая));
    Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
    Запрос.УстановитьПараметр("Услуга", Услуга);

    // Гарант+ Килипенко ++

    // ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

    ЭтотОбъект.Объект.ТаблицаОстатков.Очистить();
    ЭтотОбъект.Объект.ТаблицаОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
    // Гарант+ Килипенко --

КонецПроцедуры

&НаСервере
Процедура ПолучитьОбщуюТаблицуОстатковПоДокументу(Документ)

    Если Документ <> ЗапомнитьДокумент Тогда

        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
            |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
            |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
            |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
            |ИЗ
            |    РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&Дата, ) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
            |ГДЕ
            |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет В(&ЛицевойСчет)";

        Запрос.УстановитьПараметр("ЛицевойСчет", ОбщийСписокЛицевыхСчетов);
        Запрос.УстановитьПараметр("Дата", Новый Граница(Документ.МоментВремени(), ВидГраницы.Включая));

        // Гарант+ Килипенко ++

        // Результат = Запрос.Выполнить().Выгрузить();

        // ТаблицаОстатков = Результат.Скопировать();
        // ТаблицаОстатков.Индексы.Добавить("ЛицевойСчет, Услуга");

        ЭтотОбъект.Объект.ТаблицаОстатков.Очистить();
        ЭтотОбъект.Объект.ТаблицаОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
        // Гарант+ Килипенко --

        ЗапомнитьДокумент = Документ;

    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыборкаОстатковПоВсемУслугам(Документ, ЛицевойСчет)

    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
        |ИЗ
        |    РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&Дата, ) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
        |ГДЕ
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет = &ЛицевойСчет";

    Запрос.УстановитьПараметр("Дата", Новый Граница(Документ.МоментВремени(), ВидГраницы.Включая));
    Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);

    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция ВыборкаОстатковПоУслугамДоПроведенияДокументаРегОплаты(Документ, ЛицевойСчет, Услуга)

    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
        |ИЗ
        |    РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&Дата, ) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
        |ГДЕ
        |    КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет = &ЛицевойСчет
        |    И КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = &Услуга";

    Запрос.УстановитьПараметр("Дата", Новый Граница(Документ.МоментВремени(), ВидГраницы.Включая));
    Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
    Запрос.УстановитьПараметр("Услуга", Услуга);

    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    Если Объект.login = "test_api" И Объект.password = "123456" Тогда

        Сообщить("ВНИМАНИЕ!!! ВЫ ВОШЛИ В ТЕСТОВОМ РЕЖИМЕ!");

    КонецЕсли;

    БазаДанных = "BUH_1C8";
    Элементы.БазаДанных.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтбор(Команда)

    Элементы.РасшифровкаСтрокРегистрациОплат.ОтборСтрок = Неопределено;

КонецПроцедуры
