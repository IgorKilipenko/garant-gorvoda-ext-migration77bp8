// Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров ++
#Область ОбработчикиСобытий

&После ("ПередЗаписью")
Процедура ГП_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если Отказ Тогда
        Возврат;
    КонецЕсли;

    // Заполняем поле комментария
    ГП_ЗаполнитьПредставлениеСпискаДоговоровВКомментарий();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров --

// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
#Область СлужебныеПроцедурыИФункции

#Область ПереопределениеСтандартныхФункций

&ИзменениеИКонтроль("ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения")
Процедура ГП_ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения(ОбновитьСодержаниеТабличнойЧасти)

    ВыполнятьОтражениеНачисленийСОбъемамиИТарифами =
    УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДетализациейПоОбъемамИТарифам(Дата);

    // Получим актуальную таблицу отражения начислений для обновления данных
    // в табличных частях Контрагенты и Расшифровка начислений.
    ТаблицаНачислений = ПолучитьТаблицуОтражениеНачислений();

    КолСтрокТаблицыНачислений = ТаблицаНачислений.Количество();

    Если КолСтрокТаблицыНачислений = 0 Тогда
        Возврат;
    КонецЕсли;

    // В случае, если для какой-то услуги не выбрана связанная номенклатура, сообщим об этом пользователю
    // и удалим строку с начислениями по данной услуге из таблицы начислений.
    Для Индекс = 1 По КолСтрокТаблицыНачислений Цикл
        ТекСтрока = ТаблицаНачислений[КолСтрокТаблицыНачислений - Индекс];
        Если ПустаяСтрока(ТекСтрока.Номенклатура) Тогда
            УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Контрагент: " 
            + Строка(ТекСтрока.Контрагент) 
            + ". Сумма для отражения: " 
            + Строка(ТекСтрока.СуммаОтражения) 
            + ". В справочнике ""Услуги"" для услуги не выбрана номенклатура. Сумма не будет учтена.");
            ТаблицаНачислений.Удалить(ТекСтрока);
        КонецЕсли;
    КонецЦикла;

    // Сформируем данные из актуальной таблицы начислений для загрузки в табличные части документа.
    ТаблицаНачислений.Сортировать("Контрагент");
    #Вставка
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    
    // Переименование колонки ЛицевойСчет -> lc_ЛицевойСчет
    КолонкаЛицевогоСчета = ТаблицаНачислений.Колонки.Найти("ЛицевойСчет");
    Если КолонкаЛицевогоСчета <> Неопределено Тогда
        КолонкаЛицевогоСчета.Имя = "lc_" + КолонкаЛицевогоСчета.Имя;
        ТаблицаНачислений.Сортировать(КолонкаЛицевогоСчета.Имя + ",Номенклатура");
    КонецЕсли;
    
    // Установка признака ЭтоРеализация
    ПризнакЭтоРеализация = ЭтотОбъект.ТипДокументаОтражения = "Реализация товаров и услуг";
    ТаблицаНачислений.ЗаполнитьЗначения(ПризнакЭтоРеализация, "ЭтоРеализация");
    
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    #КонецВставки
    РасшифровкаНачислений.Загрузить(ТаблицаНачислений);

    #Удаление // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    ТаблицаНачислений.Свернуть("Контрагент, ДоговорКонтрагента, ВариантПоставкиУслуг, НоменклатурнаяГруппа, ЭтоКапРемонт, 
    |ЭтоЛьгота, ЭтоПени, ЭтоРеализация", "");
    #КонецУдаления
    #Вставка
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    ПоляДляГруппировкиРасшифровки = "Контрагент, ДоговорКонтрагента, ВариантПоставкиУслуг, НоменклатурнаяГруппа, ЭтоКапРемонт"
        + ", ЭтоЛьгота, ЭтоПени, ЭтоРеализация";
    Если ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам() Тогда
        ПоляДляГруппировкиРасшифровки = ПоляДляГруппировкиРасшифровки + "";
        КолонкаЛицевогоСчета = ТаблицаНачислений.Колонки.Найти("lc_ЛицевойСчет");
        Если КолонкаЛицевогоСчета <> Неопределено Тогда
            ТаблицаНачислений.Колонки.Удалить(КолонкаЛицевогоСчета);
        КонецЕсли;
    КонецЕсли;

    ТаблицаНачислений.Свернуть(ПоляДляГруппировкиРасшифровки, "");
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
    #КонецВставки
    ТаблицаНачислений.Колонки.Добавить("Отражать", Новый ОписаниеТипов("Булево"));
    ТаблицаНачислений.ЗаполнитьЗначения(Истина, "Отражать");

    // Обновим содержимое табличной части Контрагенты без удаления актуальных текущих данных (с сохранением ссылок
    // на сформированные типовые документы отражения начислений), либо полностью перезаполним ее, в зависимости от
    // параметра "ОбновитьСодержаниеТабличнойЧасти".
    Если ОбновитьСодержаниеТабличнойЧасти Тогда

        // Обновим содержимое табличной части.
        МассивСтрокНаУдаление = Новый Массив;

        Для каждого ТекущаяСтрокаКонтрагенты Из Контрагенты Цикл

            СтруктураПроверки = Новый Структура;

            СтруктураПроверки.Вставить("Контрагент",           ТекущаяСтрокаКонтрагенты.Контрагент);
            СтруктураПроверки.Вставить("ДоговорКонтрагента",   ТекущаяСтрокаКонтрагенты.ДоговорКонтрагента);
            СтруктураПроверки.Вставить("ВариантПоставкиУслуг", ТекущаяСтрокаКонтрагенты.ВариантПоставкиУслуг);
            СтруктураПроверки.Вставить("НоменклатурнаяГруппа", ТекущаяСтрокаКонтрагенты.НоменклатурнаяГруппа);
            СтруктураПроверки.Вставить("ЭтоЛьгота",            ТекущаяСтрокаКонтрагенты.ЭтоЛьгота);
            СтруктураПроверки.Вставить("ЭтоПени",              ТекущаяСтрокаКонтрагенты.ЭтоПени);
            СтруктураПроверки.Вставить("ЭтоКапРемонт",         ТекущаяСтрокаКонтрагенты.ЭтоКапРемонт);
            СтруктураПроверки.Вставить("ЭтоРеализация",        ТекущаяСтрокаКонтрагенты.ЭтоРеализация);

            // Проверим, есть ли данные текущей строки табличной части Контрагенты в новом варианте таблицы начислений.
            МассивСовпадающихСтрок = ТаблицаНачислений.НайтиСтроки(СтруктураПроверки);

            // Если в таблице начислений не обнаружено совпадающих строк, значит данного начисления больше нет,
            // в таком случае, необходимо удалить текущую строку. В противном случае, оставляем содержимое строки табличной части
            // Контрагенты без изменения (в ней обновится лишь сумма начисления), и удаляем строку из массива совпадающих документов.
            Если МассивСовпадающихСтрок.Количество() = 0 Тогда

                // Пометим типовой документ на удаление и удалим текущую строку.
                ТекДокумент = ТекущаяСтрокаКонтрагенты.Документ;

                // Если документ в строке указан и не помечен на удаление - помечаем его на удаление.
                Если ЗначениеЗаполнено(ТекДокумент)
                    И Не ТекДокумент.ПометкаУдаления Тогда

                    Попытка

                        ДокОбъект = ТекДокумент.ПолучитьОбъект();
                        ДокОбъект.УстановитьПометкуУдаления(Истина);
                        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ <" + ТекДокумент + "> помечен на удаление.");

                    Исключение

                        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + ТекущаяСтрокаКонтрагенты.НомерСтроки 
                        + " не удалось пометить на удаление документ по причине:"
                        + Символы.ПС + "    " + ОписаниеОшибки());

                        Продолжить;

                    КонецПопытки;

                КонецЕсли;

                МассивСтрокНаУдаление.Добавить(ТекущаяСтрокаКонтрагенты);

            Иначе

                // Если полученная строка находится и в табличной части и в актуальной таблице начислений,
                // в таком случае удаляем ее из таблицы начислений и оставляем содержание табличной части.
                // Суммы начислений актуализируются в дальнейшем из таблицы Расшифровка начислений.
                Для каждого СовпадающаяСтрока Из МассивСовпадающихСтрок Цикл
                    ТаблицаНачислений.Удалить(СовпадающаяСтрока);
                КонецЦикла; 

            КонецЕсли;

        КонецЦикла;

        // Очистим строки, которых нет в актуальной таблице начислений.
        Для каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
            Контрагенты.Удалить(СтрокаНаУдаление);
        КонецЦикла;

        // Если остались строки в таблице начислений, значит они новые и их не было в ТЧ "Контрагенты",
        // добавим их в табличную часть.
        Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
            ЗаполнитьЗначенияСвойств(Контрагенты.Добавить(), СтрокаТаблицыНачислений);
        КонецЦикла;

    Иначе

        // Перезаполним табличную часть.
        Контрагенты.Загрузить(ТаблицаНачислений);

    КонецЕсли;

КонецПроцедуры

&Вместо ("ПолучитьТаблицуОтражениеНачислений")
Функция ГП_ПолучитьТаблицуОтражениеНачислений()
    ТаблицаДанныхКонтроля = ПродолжитьВызов();
    Если ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам() = Ложь Тогда
        Возврат ТаблицаДанныхКонтроля;
    КонецЕсли;

    СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(ЭтотОбъект.Организация, Истина);
    РезультатФункции = ГП_ОтражениеВРегУчетеСлужебный.ПолучитьДанныеДляЗаполненияОтраженияПоЛицевымСчетам(
        ЭтотОбъект, СтруктураНастроекКапРемонта, Истина);
    Возврат РезультатФункции;
КонецФункции

&После ("ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации")
Процедура ГП_ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки)
    Если ЭтотОбъект.мЭтоРеализация = Ложь
        ИЛИ СтруктураПараметровСтроки.ДокументОбъект.Услуги.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;

    СодержаниеРасшифровки = ГП_ОтражениеВРегУчетеСлужебный.СформироватьСодержаниеУслугиСУчетомЛС(СтруктураПараметровСтроки);

    ИндексНовойСтрокиУслуг = СтруктураПараметровСтроки.ДокументОбъект.Услуги.Количество() - 1;
    НоваяСтрокаУслуг = СтруктураПараметровСтроки.ДокументОбъект.Услуги[ИндексНовойСтрокиУслуг];
    НоваяСтрокаУслуг.Содержание = СодержаниеРасшифровки;
КонецПроцедуры

// Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату ++
//
&После ("СформироватьДокументОтраженияНачислений")
Процедура ГП_СформироватьДокументОтраженияНачислений(
        СтрокаТабличнойЧасти, ЕстьДокумент, СтрокиРасшифровки, СоответствиеРазмеровСтавокНДС, ОтражениеПени)

    Если мЭтоРеализация = Ложь
        ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
        ИЛИ СтрокаТабличнойЧасти.Документ.Пустая() Тогда

        Возврат;
    КонецЕсли;

    ДокументРеализацииОбъект = СтрокаТабличнойЧасти.Документ.ПолучитьОбъект();
    // ДокументРеализацииОбъект.Услуги.Сортировать("Содержание, Номенклатура");
    ГП_ВыполнитьСортировкуУслугДокументаРеализации(ДокументРеализацииОбъект);

    СчетаНаОплатуСсылка = ГП_ОтражениеВРегУчетеСлужебный.СформироватьСчетНаОплатуДокументаРеализации(ДокументРеализацииОбъект);
    ДокументРеализацииОбъект.Записать(?(ДокументРеализацииОбъект.Проведен,
            РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));

    ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Сформирован счет на оплату < %1 >",
            Строка(СчетаНаОплатуСсылка)));
КонецПроцедуры // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату --

#КонецОбласти // ПереопределениеСтандартныхФункций

// Получает признак заполнения начислений к отражению в разрезе л/с
// Возвращаемое значение:
//  - Булево
Функция ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам()
    РезультатФункции = ЭтотОбъект.ДополнительныеСвойства.Свойство("ГП_ЭтоЗаполнениеПоЛицевымСчетам");
    Возврат РезультатФункции И ЭтотОбъект.ДополнительныеСвойства.ГП_ЭтоЗаполнениеПоЛицевымСчетам;
КонецФункции

Процедура ГП_ВыполнитьСортировкуУслугДокументаРеализации(Знач ДокументРеализацииОбъект)
    Если ДокументРеализацииОбъект.Услуги.Количество() < 2 Тогда
        Возврат;
    КонецЕсли;

    ТЧУслуги = ДокументРеализацииОбъект.Услуги.Выгрузить();
    ТЧУслуги.Колонки.Добавить("ПредставлениеЛС", Новый ОписаниеТипов("Строка"));

    ШаблонПоискаЛССодержания = "^([а-яА-ЯЁё]+(?:\s+[а-яА-ЯЁё0-9]+)*)\s*,\s+(.+)";

    Для Каждого СтрокаТаблицыУслуг Из ТЧУслуги Цикл
        СодержаниеСодержитЛицевойСчет = СтрПодобнаПоРегулярномуВыражению(СтрокаТаблицыУслуг.Содержание, ШаблонПоискаЛССодержания);
        Если СодержаниеСодержитЛицевойСчет = Ложь Тогда
            ПредставлениеЛицевогоСчета = СтрокаТаблицыУслуг.Содержание;
        Иначе
            ПредставлениеЛицевогоСчета = СтрЗаменитьПоРегулярномуВыражению(СтрокаТаблицыУслуг.Содержание, ШаблонПоискаЛССодержания, "$2");
        КонецЕсли;

        СтрокаТаблицыУслуг.ПредставлениеЛС = ПредставлениеЛицевогоСчета;
    КонецЦикла;

    ТЧУслуги.Сортировать("ПредставлениеЛС, Содержание, Номенклатура, НомерСтроки");
    Для Счетчик = 0 По ТЧУслуги.Количество() - 1 Цикл
        ТЧУслуги[Счетчик].НомерСтроки = Счетчик + 1;
    КонецЦикла;

    ДокументРеализацииОбъект.Услуги.Очистить();
    ДокументРеализацииОбъект.Услуги.Загрузить(ТЧУслуги);
КонецПроцедуры

// Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров ++
//
// Заполняет поле комментария списком договоров из ТЧ Контрагенты
Процедура ГП_ЗаполнитьПредставлениеСпискаДоговоровВКомментарий()
    ПрефиксСпискаДоговоров = "#По договорам:";

    Если (ПустаяСтрока(ЭтотОбъект.Комментарий) = Ложь И СтрНачинаетсяС(ЭтотОбъект.Комментарий, ПрефиксСпискаДоговоров) = Ложь) Тогда
        Возврат; // Если комментарий заполнен пользователем - тогда не формируем список
    КонецЕсли;

    Если ЭтотОбъект.ИспользуетсяНовыйМеханизмОтраженияНачислений = Истина Тогда
        Возврат; // Только для старого механизма
    КонецЕсли;

    ИмяКолонкиДоговоров = "ДоговорКонтрагента";
    КоллекцияДоговоров = ЭтотОбъект.Контрагенты.Выгрузить( , ИмяКолонкиДоговоров);
    КоллекцияДоговоров.Свернуть(ИмяКолонкиДоговоров);
    КоллекцияДоговоров = КоллекцияДоговоров.ВыгрузитьКолонку(ИмяКолонкиДоговоров);

    СтрокаСпискаДоговоров = "";
    Для Каждого Договор Из КоллекцияДоговоров Цикл
        СтрокаСпискаДоговоров = СтрШаблон("%1; %2", СтрокаСпискаДоговоров, Строка(Договор));
    КонецЦикла;
    Если ПустаяСтрока(СтрокаСпискаДоговоров) = Ложь Тогда
        СтрокаСпискаДоговоров = Сред(СтрокаСпискаДоговоров, 3);
    КонецЕсли;

    Если ПустаяСтрока(СтрокаСпискаДоговоров) Тогда
        Возврат; // Список не сформирован
    КонецЕсли;

    // Записываем в комментарий список договоров счетчиков
    ЭтотОбъект.Комментарий = СтрШаблон("%1 %2", ПрефиксСпискаДоговоров, СтрокаСпискаДоговоров);
КонецПроцедуры // Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров --

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
