// Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров ++
#Область ОбработчикиСобытий

&После ("ПередЗаписью")
Процедура ГП_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если Отказ Тогда
        Возврат;
    КонецЕсли;

    // Заполняем поле комментария
    ГП_ЗаполнитьПредставлениеСпискаДоговоровВКомментарий();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров --

// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
#Область СлужебныеПроцедурыИФункции

#Область ПереопределениеСтандартныхФункций

&ИзменениеИКонтроль("ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения")
Процедура ГП_ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения(ОбновитьСодержаниеТабличнойЧасти)

    ВыполнятьОтражениеНачисленийСОбъемамиИТарифами =
    УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДетализациейПоОбъемамИТарифам(Дата);

    // Получим актуальную таблицу отражения начислений для обновления данных
    // в табличных частях Контрагенты и Расшифровка начислений.
    ТаблицаНачислений = ПолучитьТаблицуОтражениеНачислений();

    КолСтрокТаблицыНачислений = ТаблицаНачислений.Количество();

    Если КолСтрокТаблицыНачислений = 0 Тогда
        Возврат;
    КонецЕсли;

    // В случае, если для какой-то услуги не выбрана связанная номенклатура, сообщим об этом пользователю
    // и удалим строку с начислениями по данной услуге из таблицы начислений.
    Для Индекс = 1 По КолСтрокТаблицыНачислений Цикл
        ТекСтрока = ТаблицаНачислений[КолСтрокТаблицыНачислений - Индекс];
        Если ПустаяСтрока(ТекСтрока.Номенклатура) Тогда
            УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Контрагент: "
            + Строка(ТекСтрока.Контрагент)
            + ". Сумма для отражения: "
            + Строка(ТекСтрока.СуммаОтражения)
            + ". В справочнике ""Услуги"" для услуги не выбрана номенклатура. Сумма не будет учтена.");
            ТаблицаНачислений.Удалить(ТекСтрока);
        КонецЕсли;
    КонецЦикла;

    // Сформируем данные из актуальной таблицы начислений для загрузки в табличные части документа.
    ТаблицаНачислений.Сортировать("Контрагент");
    #Вставка
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++

    // Переименование колонки ЛицевойСчет -> lc_ЛицевойСчет
    КолонкаЛицевогоСчета = ТаблицаНачислений.Колонки.Найти("ЛицевойСчет");
    Если КолонкаЛицевогоСчета <> Неопределено Тогда
        КолонкаЛицевогоСчета.Имя = "lc_" + КолонкаЛицевогоСчета.Имя;
        ТаблицаНачислений.Сортировать(КолонкаЛицевогоСчета.Имя + ",Номенклатура");
    КонецЕсли;

    // Установка признака ЭтоРеализация
    ПризнакЭтоРеализация = ЭтотОбъект.ТипДокументаОтражения = "Реализация товаров и услуг";
    ТаблицаНачислений.ЗаполнитьЗначения(ПризнакЭтоРеализация, "ЭтоРеализация");

    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    #КонецВставки
    РасшифровкаНачислений.Загрузить(ТаблицаНачислений);

    #Удаление // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    ТаблицаНачислений.Свернуть("Контрагент, ДоговорКонтрагента, ВариантПоставкиУслуг, НоменклатурнаяГруппа, ЭтоКапРемонт,
    |ЭтоЛьгота, ЭтоПени, ЭтоРеализация", "");
    #КонецУдаления
    #Вставка
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    ПоляДляГруппировкиРасшифровки = "Контрагент, ДоговорКонтрагента, ВариантПоставкиУслуг, НоменклатурнаяГруппа, ЭтоКапРемонт"
        + ", ЭтоЛьгота, ЭтоПени, ЭтоРеализация";
    Если ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам() Тогда
        ПоляДляГруппировкиРасшифровки = ПоляДляГруппировкиРасшифровки + "";
        КолонкаЛицевогоСчета = ТаблицаНачислений.Колонки.Найти("lc_ЛицевойСчет");
        Если КолонкаЛицевогоСчета <> Неопределено Тогда
            ТаблицаНачислений.Колонки.Удалить(КолонкаЛицевогоСчета);
        КонецЕсли;

        // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++
        КолонкаНоменклатурнойГруппы = ТаблицаНачислений.Колонки.Найти("НоменклатурнаяГруппа");
        Если КолонкаЛицевогоСчета <> Неопределено Тогда
            ТаблицаНачислений.ЗаполнитьЗначения(Справочники.НоменклатурныеГруппы.ПустаяСсылка(),
                КолонкаНоменклатурнойГруппы.Имя);
        КонецЕсли;
        // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --
    КонецЕсли;

    ТаблицаНачислений.Свернуть(ПоляДляГруппировкиРасшифровки, "");
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
    #КонецВставки
    ТаблицаНачислений.Колонки.Добавить("Отражать", Новый ОписаниеТипов("Булево"));
    ТаблицаНачислений.ЗаполнитьЗначения(Истина, "Отражать");

    // Обновим содержимое табличной части Контрагенты без удаления актуальных текущих данных (с сохранением ссылок
    // на сформированные типовые документы отражения начислений), либо полностью перезаполним ее, в зависимости от
    // параметра "ОбновитьСодержаниеТабличнойЧасти".
    Если ОбновитьСодержаниеТабличнойЧасти Тогда

        // Обновим содержимое табличной части.
        МассивСтрокНаУдаление = Новый Массив;

        Для каждого ТекущаяСтрокаКонтрагенты Из Контрагенты Цикл

            СтруктураПроверки = Новый Структура;

            СтруктураПроверки.Вставить("Контрагент",           ТекущаяСтрокаКонтрагенты.Контрагент);
            СтруктураПроверки.Вставить("ДоговорКонтрагента",   ТекущаяСтрокаКонтрагенты.ДоговорКонтрагента);
            СтруктураПроверки.Вставить("ВариантПоставкиУслуг", ТекущаяСтрокаКонтрагенты.ВариантПоставкиУслуг);
            СтруктураПроверки.Вставить("НоменклатурнаяГруппа", ТекущаяСтрокаКонтрагенты.НоменклатурнаяГруппа);
            СтруктураПроверки.Вставить("ЭтоЛьгота",            ТекущаяСтрокаКонтрагенты.ЭтоЛьгота);
            СтруктураПроверки.Вставить("ЭтоПени",              ТекущаяСтрокаКонтрагенты.ЭтоПени);
            СтруктураПроверки.Вставить("ЭтоКапРемонт",         ТекущаяСтрокаКонтрагенты.ЭтоКапРемонт);
            СтруктураПроверки.Вставить("ЭтоРеализация",        ТекущаяСтрокаКонтрагенты.ЭтоРеализация);
            #Вставка // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++

            Если ЗначениеЗаполнено(ТекущаяСтрокаКонтрагенты.НоменклатурнаяГруппа) = Ложь Тогда
                // Исключение Номенклатурной группы из отбора строк расшифровки
                СтруктураПроверки.Удалить("НоменклатурнаяГруппа");
            КонецЕсли;

            #КонецВставки // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

            // Проверим, есть ли данные текущей строки табличной части Контрагенты в новом варианте таблицы начислений.
            МассивСовпадающихСтрок = ТаблицаНачислений.НайтиСтроки(СтруктураПроверки);

            // Если в таблице начислений не обнаружено совпадающих строк, значит данного начисления больше нет,
            // в таком случае, необходимо удалить текущую строку. В противном случае, оставляем содержимое строки табличной части
            // Контрагенты без изменения (в ней обновится лишь сумма начисления), и удаляем строку из массива совпадающих документов.
            Если МассивСовпадающихСтрок.Количество() = 0 Тогда

                // Пометим типовой документ на удаление и удалим текущую строку.
                ТекДокумент = ТекущаяСтрокаКонтрагенты.Документ;

                // Если документ в строке указан и не помечен на удаление - помечаем его на удаление.
                Если ЗначениеЗаполнено(ТекДокумент)
                    И Не ТекДокумент.ПометкаУдаления Тогда

                    Попытка

                        ДокОбъект = ТекДокумент.ПолучитьОбъект();
                        ДокОбъект.УстановитьПометкуУдаления(Истина);
                        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ <" + ТекДокумент + "> помечен на удаление.");

                    Исключение

                        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + ТекущаяСтрокаКонтрагенты.НомерСтроки
                        + " не удалось пометить на удаление документ по причине:"
                        + Символы.ПС + "    " + ОписаниеОшибки());

                        Продолжить;

                    КонецПопытки;

                КонецЕсли;

                МассивСтрокНаУдаление.Добавить(ТекущаяСтрокаКонтрагенты);

            Иначе

                // Если полученная строка находится и в табличной части и в актуальной таблице начислений,
                // в таком случае удаляем ее из таблицы начислений и оставляем содержание табличной части.
                // Суммы начислений актуализируются в дальнейшем из таблицы Расшифровка начислений.
                Для каждого СовпадающаяСтрока Из МассивСовпадающихСтрок Цикл
                    ТаблицаНачислений.Удалить(СовпадающаяСтрока);
                КонецЦикла;

            КонецЕсли;

        КонецЦикла;

        // Очистим строки, которых нет в актуальной таблице начислений.
        Для каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
            Контрагенты.Удалить(СтрокаНаУдаление);
        КонецЦикла;

        // Если остались строки в таблице начислений, значит они новые и их не было в ТЧ "Контрагенты",
        // добавим их в табличную часть.
        Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
            ЗаполнитьЗначенияСвойств(Контрагенты.Добавить(), СтрокаТаблицыНачислений);
        КонецЦикла;

    Иначе

        // Перезаполним табличную часть.
        Контрагенты.Загрузить(ТаблицаНачислений);

    КонецЕсли;

КонецПроцедуры

// Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++
//
&ИзменениеИКонтроль("ПолучитьСтрокиРасшифровкиНачислений")
Функция ГП_ПолучитьСтрокиРасшифровкиНачислений(СтрокаТабличнойЧасти, ОтборБезВариантаПоставкиУслуг)

    СтруктОтбор = Новый Структура();

    Если НЕ ОтборБезВариантаПоставкиУслуг Тогда
        СтруктОтбор.Вставить("ВариантПоставкиУслуг", СтрокаТабличнойЧасти.ВариантПоставкиУслуг);
    КонецЕсли;

    СтруктОтбор.Вставить("ДоговорКонтрагента",   СтрокаТабличнойЧасти.ДоговорКонтрагента);
    СтруктОтбор.Вставить("НоменклатурнаяГруппа", СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
    СтруктОтбор.Вставить("ЭтоКапРемонт",         СтрокаТабличнойЧасти.ЭтоКапРемонт);
    СтруктОтбор.Вставить("ЭтоЛьгота",            СтрокаТабличнойЧасти.ЭтоЛьгота);
    СтруктОтбор.Вставить("ЭтоПени",              СтрокаТабличнойЧасти.ЭтоПени);
    СтруктОтбор.Вставить("ЭтоРеализация",        СтрокаТабличнойЧасти.ЭтоРеализация);
    #Вставка // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++

    Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) = Ложь Тогда
        // Исключение Номенклатурной группы из отбора строк расшифровки
        СтруктОтбор.Удалить("НоменклатурнаяГруппа");
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

    Возврат РасшифровкаНачислений.НайтиСтроки(СтруктОтбор);

КонецФункции // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

// Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++
//
&ИзменениеИКонтроль("ЕстьДокументДляСтрокиРасшифровки")
Функция ГП_ЕстьДокументДляСтрокиРасшифровки(СтрокаРасшифровки)

    СтруктОтбор = Новый Структура();

    СтруктОтбор.Вставить("ВариантПоставкиУслуг", СтрокаРасшифровки.ВариантПоставкиУслуг);
    СтруктОтбор.Вставить("ДоговорКонтрагента",   СтрокаРасшифровки.ДоговорКонтрагента);
    СтруктОтбор.Вставить("НоменклатурнаяГруппа", СтрокаРасшифровки.НоменклатурнаяГруппа);
    СтруктОтбор.Вставить("ЭтоКапРемонт",         СтрокаРасшифровки.ЭтоКапРемонт);
    СтруктОтбор.Вставить("ЭтоЛьгота",            СтрокаРасшифровки.ЭтоЛьгота);
    СтруктОтбор.Вставить("ЭтоПени",              СтрокаРасшифровки.ЭтоПени);
    #Вставка // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++

    // Исключение Номенклатурной группы из отбора строк группировки начислений (ТЧ Контрагенты)
    СтруктОтбор.Удалить("НоменклатурнаяГруппа");

    #КонецВставки // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

    СтрокиКонтрагентов = Контрагенты.НайтиСтроки(СтруктОтбор);
    #Вставка // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++

    // Исключение из найденных строк несоответствий по Номенклатурным группам
    ЭлементыДляУдаления = Новый Массив;
    ИндексЭлементаДляУдаления = -1;
    Для Каждого ТекущаяСтрокаКонтрагента Из СтрокиКонтрагентов Цикл
        ИндексЭлементаДляУдаления = ИндексЭлементаДляУдаления + 1;

        Если ЗначениеЗаполнено(ТекущаяСтрокаКонтрагента.НоменклатурнаяГруппа) = Ложь Тогда
            Продолжить; // Пропускаем итерацию т.к. отражение не ведется в разрезе номенклатурных групп
        КонецЕсли;

        Если ТекущаяСтрокаКонтрагента.НоменклатурнаяГруппа <> СтрокаРасшифровки.НоменклатурнаяГруппа Тогда
            ЭлементыДляУдаления.Добавить(ИндексЭлементаДляУдаления);
        КонецЕсли;
    КонецЦикла;

    // Очистка найденных строк
    Для Каждого ИндексЭлементаУдаления  Из ЭлементыДляУдаления Цикл
        СтрокиКонтрагентов.Удалить(ИндексЭлементаУдаления);
    КонецЦикла;

    #КонецВставки // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

    Если СтрокиКонтрагентов.Количество() = 0 Тогда
        Возврат Ложь;
    КонецЕсли;

    СтрокаКонтрагентов = СтрокиКонтрагентов.Получить(0);

    Возврат ЗначениеЗаполнено(СтрокаКонтрагентов.Документ) И СтрокаКонтрагентов.Документ.Проведен;

КонецФункции // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

// Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++
//
&ИзменениеИКонтроль("СформироватьДокументыТабличнойЧастиСтарыйМеханизмОтражения")
Процедура ГП_СформироватьДокументыТабличнойЧастиСтарыйМеханизмОтражения(ПравитьСуществующие)

    Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
        мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
    КонецЕсли;

    мСчетаУчетаКомпенсатораЛьгот = Неопределено;
    КоличествоСтрок              = Контрагенты.Количество();

    // Таблицу документов получим без строк по льготам, т.к. разрез варианта поставки услуг зависит от типа документа отражения.
    ТаблицаДокументов = Контрагенты.Выгрузить(Контрагенты.НайтиСтроки(Новый Структура("Отражать, ЭтоЛьгота", Истина, Ложь)));
    ТаблицаДокументов.Сортировать("ЭтоПени Возр");

    ВключатьВариантПоставкиУслуг = (ТипДокументаОтражения = "Акт об оказании производственных услуг");
    Если Не ВключатьВариантПоставкиУслуг Тогда
        ТаблицаДокументов.Свернуть("Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ЭтоКапРемонт, ЭтоЛьгота, ЭтоПени,
        |ЭтоРеализация, Документ, СчетФактура, СчетУчетаРасчетов, СчетУчетаАвансов");
        ТаблицаДокументов.Колонки.Добавить("ВариантПоставкиУслуг", Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг"));
    КонецЕсли;

    // Дополним таблицу документов строками льгот - для льгот разрез варианта поставки учитывается безусловно.
    МассивСтрокПоЛьготам = Контрагенты.НайтиСтроки(Новый Структура("Отражать, ЭтоЛьгота", Истина, Истина));
    Для Каждого СтрокаЛьгот Из МассивСтрокПоЛьготам Цикл
        НоваяСтрока = ТаблицаДокументов.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛьгот);
    КонецЦикла;
    ТаблицаДокументов.Сортировать("Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ВариантПоставкиУслуг");

    СоответствиеРазмеровСтавокНДС = Неопределено;
    Если УчитыватьНДС Тогда
        СоответствиеРазмеровСтавокНДС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьРазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчете(РасшифровкаНачислений.ВыгрузитьКолонку("Номенклатура"), Дата);
    КонецЕсли;

    Для Каждого ТекСтрока Из ТаблицаДокументов Цикл

        // Формирование документов.
        СформироватьДокументыСтрокиТабличнойЧасти(ТекСтрока, ПравитьСуществующие, ВключатьВариантПоставкиУслуг, СоответствиеРазмеровСтавокНДС);

        // Структура для отбора строк ТЧ
        СтруктураОтбора                      = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа,
        |ЭтоКапРемонт, ЭтоЛьгота, ЭтоПени, ЭтоРеализация");
        СтруктураОтбора.Отражать             = Истина;
        СтруктураОтбора.Контрагент           = ТекСтрока.Контрагент;
        СтруктураОтбора.ДоговорКонтрагента   = ТекСтрока.ДоговорКонтрагента;
        СтруктураОтбора.НоменклатурнаяГруппа = ТекСтрока.НоменклатурнаяГруппа;
        СтруктураОтбора.ЭтоКапРемонт         = ТекСтрока.ЭтоКапРемонт;
        СтруктураОтбора.ЭтоЛьгота            = ТекСтрока.ЭтоЛьгота;
        СтруктураОтбора.ЭтоПени              = ТекСтрока.ЭтоПени;
        СтруктураОтбора.ЭтоРеализация        = ТекСтрока.ЭтоРеализация;
        #Вставка // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп ++

        Если ЗначениеЗаполнено(ТекСтрока.НоменклатурнаяГруппа) = Ложь Тогда
            // Исключение Номенклатурной группы из отбора строк расшифровки
            СтруктураОтбора.Удалить("НоменклатурнаяГруппа");
        КонецЕсли;

        #КонецВставки // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

        Если ВключатьВариантПоставкиУслуг ИЛИ ТекСтрока.ЭтоЛьгота Тогда
            СтруктураОтбора.Вставить("ВариантПоставкиУслуг", ТекСтрока.ВариантПоставкиУслуг);
        КонецЕсли;

        НайденныеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);

        Для Каждого ТекНайденнаяСтрока из НайденныеСтроки Цикл
            Если ЗначениеЗаполнено(ТекНайденнаяСтрока.Документ) И ТекНайденнаяСтрока.Документ.Проведен Тогда
                Продолжить;
            Иначе
                ТекНайденнаяСтрока.Документ = ТекСтрока.Документ;
                Если ЗначениеЗаполнено(ТекСтрока.СчетФактура) Тогда
                    ТекНайденнаяСтрока.СчетФактура = ТекСтрока.СчетФактура;
                КонецЕсли;
                #Если Клиент Тогда
                    Состояние("Обработана строка № " + ТекНайденнаяСтрока.НомерСтроки + " / " + КоличествоСтрок);
                #КонецЕсли
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;

КонецПроцедуры // Гарант+ Килипенко 17.10.2024 [F00229783] Группировка отражения начислений в рег. учете без ном. групп --

// Гарант+ Килипенко 23.10.2024 [F00229783] Отражение начислений в разрезе л/с ++
//
&ИзменениеИКонтроль("ДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете")
Процедура ГП_ДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете(ТаблицаРеквизиты, ТаблицаНачислений)

    НаборДвижений = Движения.КВП_НачислениеДляОтраженияВРеглУчете;
    СтрокаРеквизитов = ТаблицаРеквизиты[0];

    Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл

        Если НЕ СтрокаНачисления.Отражать Тогда
            Продолжить;
        КонецЕсли;

        Если ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации
            И Не ЕстьДокументДляСтрокиРасшифровки(СтрокаНачисления) Тогда
            Продолжить;
        КонецЕсли;

        Движение = НаборДвижений.Добавить();
        Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
        Движение.Период      = СтрокаРеквизитов.Период;
        Движение.Организация = СтрокаРеквизитов.Организация;

        Движение.Номенклатура           = СтрокаНачисления.Номенклатура;
        #Вставка // Гарант+ Килипенко 23.10.2024 [F00229783] Отражение начислений в разрезе л/с ++
        Движение.ГП_ЛицевойСчет         = СтрокаНачисления.ГП_ЛицевойСчет;
        #КонецВставки // Гарант+ Килипенко 23.10.2024 [F00229783] Отражение начислений в разрезе л/с --
        Движение.НоменклатурнаяГруппа   = СтрокаНачисления.НоменклатурнаяГруппа;
        Движение.ДоговорКонтрагента     = СтрокаНачисления.ДоговорКонтрагента;
        Движение.ВариантПоставкиУслуг   = СтрокаНачисления.ВариантПоставкиУслуг;
        Движение.ДоговорПоставщикаУслуг = СтрокаНачисления.ДоговорПоставщикаУслуг;

        Движение.ЭтоЛьгота              = СтрокаНачисления.ЭтоЛьгота;
        Движение.ЭтоПени                = СтрокаНачисления.ЭтоПени;
        Движение.Тариф                  = СтрокаНачисления.Тариф;
        Движение.Количество             = СтрокаНачисления.Количество;
        Движение.Сумма                  = СтрокаНачисления.СуммаОтражения;

    КонецЦикла;

    НаборДвижений.Записывать = Истина;

КонецПроцедуры // Гарант+ Килипенко 23.10.2024 [F00229783] Отражение начислений в разрезе л/с --

&Вместо ("ПолучитьТаблицуОтражениеНачислений")
Функция ГП_ПолучитьТаблицуОтражениеНачислений()
    ТаблицаДанныхКонтроля = ПродолжитьВызов();
    Если ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам() = Ложь Тогда
        Возврат ТаблицаДанныхКонтроля;
    КонецЕсли;

    СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(ЭтотОбъект.Организация, Истина);
    РезультатФункции = ГП_ОтражениеВРегУчетеСлужебный.ПолучитьДанныеДляЗаполненияОтраженияПоЛицевымСчетам(
        ЭтотОбъект, СтруктураНастроекКапРемонта, Истина);
    Возврат РезультатФункции;
КонецФункции

&После ("ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации")
Процедура ГП_ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки)
    Если ЭтотОбъект.мЭтоРеализация = Ложь
        ИЛИ СтруктураПараметровСтроки.ДокументОбъект.Услуги.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;

    ДанныеПоказанийСчетчиков = ГП_ОтражениеВРегУчетеСлужебный.ПолучитьДанныеПоказанийСчетчиков(ЭтотОбъект.Ссылка);
    СодержаниеРасшифровки = ГП_ОтражениеВРегУчетеСлужебный.СформироватьСодержаниеУслугиСУчетомЛС(
        СтруктураПараметровСтроки, ДанныеПоказанийСчетчиков);

    ИндексНовойСтрокиУслуг = СтруктураПараметровСтроки.ДокументОбъект.Услуги.Количество() - 1;
    НоваяСтрокаУслуг = СтруктураПараметровСтроки.ДокументОбъект.Услуги[ИндексНовойСтрокиУслуг];
    НоваяСтрокаУслуг.Содержание = СодержаниеРасшифровки;
КонецПроцедуры

// Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату ++
//
&После ("СформироватьДокументОтраженияНачислений")
Процедура ГП_СформироватьДокументОтраженияНачислений(
        СтрокаТабличнойЧасти, ЕстьДокумент, СтрокиРасшифровки, СоответствиеРазмеровСтавокНДС, ОтражениеПени)

    Если мЭтоРеализация = Ложь
        ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
        ИЛИ СтрокаТабличнойЧасти.Документ.Пустая() Тогда

        Возврат;
    КонецЕсли;

    ДокументРеализацииОбъект = СтрокаТабличнойЧасти.Документ.ПолучитьОбъект();
    ГП_ВыполнитьСортировкуУслугДокументаРеализации(ДокументРеализацииОбъект);
    ДокументРеализацииОбъект.Записать(?(ДокументРеализацииОбъект.Проведен,
            РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));

    СчетаНаОплатуСсылка = ГП_ОтражениеВРегУчетеСлужебный.СформироватьСчетНаОплатуДокументаРеализации(ДокументРеализацииОбъект);
    ДокументРеализацииОбъект.Записать(?(ДокументРеализацииОбъект.Проведен,
            РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));

    ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Сформирован счет на оплату < %1 >",
            Строка(СчетаНаОплатуСсылка)));
КонецПроцедуры // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату --

#КонецОбласти // ПереопределениеСтандартныхФункций

// Получает признак заполнения начислений к отражению в разрезе л/с
// Возвращаемое значение:
//  - Булево
Функция ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам()
    РезультатФункции = ЭтотОбъект.ДополнительныеСвойства.Свойство("ГП_ЭтоЗаполнениеПоЛицевымСчетам");
    Возврат РезультатФункции И ЭтотОбъект.ДополнительныеСвойства.ГП_ЭтоЗаполнениеПоЛицевымСчетам;
КонецФункции

// Выполняет сортировку строк ТЧ документа реализации по колонкам: л/с, номенклатура
Процедура ГП_ВыполнитьСортировкуУслугДокументаРеализации(Знач ДокументРеализацииОбъект)
    Если ДокументРеализацииОбъект.Услуги.Количество() < 2 Тогда
        Возврат;
    КонецЕсли;

    ТЧУслуги = ДокументРеализацииОбъект.Услуги.Выгрузить();
    ТЧУслуги.Колонки.Добавить("ПредставлениеЛС", Новый ОписаниеТипов("Строка"));
    ТЧУслуги.Колонки.Добавить("ПриоритетУслуги", Новый ОписаниеТипов("Число"));

    // Для очистки для от показаний счетчиков вида: ", (100 - 120; 100 - 120)"
    ШаблонОчисткиСодержания = "\s*,\s*Показания\s+счетчиков[:]\s+([0-9\s,\.]*\s+-\s+[0-9\s,\.]+(;\s+)?)+\s*$";

    ШаблонПоискаЛССодержания = "^([а-яА-ЯЁё]+(?:\s+[а-яА-ЯЁё0-9]+)*)\s*,\s+(.+)";

    Для Каждого СтрокаТаблицыУслуг Из ТЧУслуги Цикл
        ОчищенноеСодержание = СтрЗаменитьПоРегулярномуВыражению(СтрокаТаблицыУслуг.Содержание, ШаблонОчисткиСодержания, "");
        СодержаниеСодержитЛицевойСчет = СтрПодобнаПоРегулярномуВыражению(ОчищенноеСодержание, ШаблонПоискаЛССодержания);
        Если СодержаниеСодержитЛицевойСчет = Ложь Тогда
            ПредставлениеЛицевогоСчета = ОчищенноеСодержание;
        Иначе
            ПредставлениеЛицевогоСчета = СтрЗаменитьПоРегулярномуВыражению(ОчищенноеСодержание, ШаблонПоискаЛССодержания, "$2");
        КонецЕсли;

        СтрокаТаблицыУслуг.ПредставлениеЛС = ПредставлениеЛицевогоСчета;

        // Установка приоритета сортировки по услуге
        Если СтрокаТаблицыУслуг.Номенклатура.Наименование = "Холодное водоснабжение" Тогда
            СтрокаТаблицыУслуг.ПриоритетУслуги = 0;
        ИначеЕсли СтрокаТаблицыУслуг.Номенклатура.Наименование = "Водоотведение"
            ИЛИ СтрокаТаблицыУслуг.Номенклатура.Наименование = "Канализация" Тогда
            СтрокаТаблицыУслуг.ПриоритетУслуги = 1;
        ИначеЕсли СтрокаТаблицыУслуг.Номенклатура.Наименование = "Негативное воздействие" Тогда
            СтрокаТаблицыУслуг.ПриоритетУслуги = 2;
        Иначе
            СтрокаТаблицыУслуг.ПриоритетУслуги = 99999;
        КонецЕсли;
    КонецЦикла;

    ТЧУслуги.Сортировать("ПредставлениеЛС, ПриоритетУслуги, Содержание, Номенклатура, НомерСтроки");
    Для Счетчик = 0 По ТЧУслуги.Количество() - 1 Цикл
        ТЧУслуги[Счетчик].НомерСтроки = Счетчик + 1;
    КонецЦикла;

    ДокументРеализацииОбъект.Услуги.Очистить();
    ДокументРеализацииОбъект.Услуги.Загрузить(ТЧУслуги);
КонецПроцедуры

// Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров ++
//
// Заполняет поле комментария списком договоров из ТЧ Контрагенты
Процедура ГП_ЗаполнитьПредставлениеСпискаДоговоровВКомментарий()
    ПрефиксСпискаДоговоров = "#";

    Если (ПустаяСтрока(ЭтотОбъект.Комментарий) = Ложь И СтрНачинаетсяС(ЭтотОбъект.Комментарий, ПрефиксСпискаДоговоров) = Ложь) Тогда
        Возврат; // Если комментарий заполнен пользователем - тогда не формируем список
    КонецЕсли;

    Если ЭтотОбъект.ИспользуетсяНовыйМеханизмОтраженияНачислений = Истина Тогда
        Возврат; // Только для старого механизма
    КонецЕсли;

    ИмяКолонкиДоговоров = "ДоговорКонтрагента";
    КоллекцияДоговоров = ЭтотОбъект.Контрагенты.Выгрузить( , ИмяКолонкиДоговоров);
    КоллекцияДоговоров.Свернуть(ИмяКолонкиДоговоров);
    КоллекцияДоговоров = КоллекцияДоговоров.ВыгрузитьКолонку(ИмяКолонкиДоговоров);

    СтрокаСпискаДоговоров = "";
    Для Каждого Договор Из КоллекцияДоговоров Цикл
        СтрокаСпискаДоговоров = СтрШаблон("%1; %2", СтрокаСпискаДоговоров, Строка(Договор));
    КонецЦикла;
    Если ПустаяСтрока(СтрокаСпискаДоговоров) = Ложь Тогда
        СтрокаСпискаДоговоров = Сред(СтрокаСпискаДоговоров, 3);
    КонецЕсли;

    Если ПустаяСтрока(СтрокаСпискаДоговоров) Тогда
        Возврат; // Список не сформирован
    КонецЕсли;

    // Записываем в комментарий список договоров счетчиков
    ЭтотОбъект.Комментарий = СтрШаблон("%1 %2", ПрефиксСпискаДоговоров, СтрокаСпискаДоговоров);
КонецПроцедуры // Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров --

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
