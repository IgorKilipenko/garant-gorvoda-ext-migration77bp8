// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
#Область СлужебныйПрограммныйИнтерфейс

// Получает данные начислений для отражения в разрезе л/с
// Параметры:
//  ДокументОтраженияОбъект - ДокументОбъект.КВП_ОтражениеНачисленийВРеглУчете
//  СтруктураНастроекКапРемонта - Структура
//  ВыводитьСообщения - Булево - Если Истина, будут выводится сообщения для строк непрошедших контроль по остаткам к отражению
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ПолучитьДанныеДляЗаполненияОтраженияПоЛицевымСчетам(
        Знач ДокументОтраженияОбъект, Знач СтруктураНастроекКапРемонта, Знач ВыводитьСообщения = Истина) Экспорт

    МВТ = Новый МенеджерВременныхТаблиц;
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    СтруктураТекстаЗапроса = ПолучитьТекстЗапросаДанныхОтраженияПоЛицевымСетам();
    Запрос.Текст = СтруктураТекстаЗапроса.ВременныеТаблицы;

    ТекстДопУсловия = "ИСТИНА";
    Если ЗначениеЗаполнено(ДокументОтраженияОбъект.Контрагент) Тогда
        Если ДокументОтраженияОбъект.Контрагент.ЭтоГруппа Тогда
            ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец В ИЕРАРХИИ (&Контрагент)";
        Иначе
            ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец = &Контрагент";
        КонецЕсли;
    КонецЕсли;

    Если ЗначениеЗаполнено(ДокументОтраженияОбъект.Номенклатура) Тогда
        Если ДокументОтраженияОбъект.Номенклатура.ЭтоГруппа Тогда
            ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура В ИЕРАРХИИ (&Номенклатура)";
        Иначе
            ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура = &Номенклатура";
        КонецЕсли;
        Запрос.УстановитьПараметр("Номенклатура", ДокументОтраженияОбъект.Номенклатура);
    КонецЕсли;

    Если ЗначениеЗаполнено(ДокументОтраженияОбъект.НоменклатурнаяГруппа) Тогда
        Если ДокументОтраженияОбъект.НоменклатурнаяГруппа.ЭтоГруппа Тогда
            ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа В ИЕРАРХИИ (&НоменклатурнаяГруппа)";
        Иначе
            ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
        КонецЕсли;
        Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ДокументОтраженияОбъект.НоменклатурнаяГруппа);
    КонецЕсли;

    Если ЗначениеЗаполнено(ДокументОтраженияОбъект.Взаиморасчеты) Тогда
        Если ДокументОтраженияОбъект.Взаиморасчеты = 1 Тогда
            ТекстДопУсловия = ТекстДопУсловия + " И НЕ ЭтоЛьгота И НЕ ЭтоПени";
        ИначеЕсли ДокументОтраженияОбъект.Взаиморасчеты = 2 Тогда
            ТекстДопУсловия = ТекстДопУсловия + " И ЭтоЛьгота";
        ИначеЕсли ДокументОтраженияОбъект.Взаиморасчеты = 3 Тогда
            ТекстДопУсловия = ТекстДопУсловия + " И ЭтоПени";
        КонецЕсли;
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстДопУсловия", ТекстДопУсловия);

    ДатаСреза = Новый Граница(КонецДня(ДокументОтраженияОбъект.Дата), ВидГраницы.Включая);
    Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
    Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДокументОтраженияОбъект.Дата));
    Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДокументОтраженияОбъект.Дата));
    Запрос.УстановитьПараметр("Контрагент", ДокументОтраженияОбъект.Контрагент);
    Запрос.УстановитьПараметр("Организация", ДокументОтраженияОбъект.Организация);
    Запрос.УстановитьПараметр("ДокументОтражения", ДокументОтраженияОбъект.Ссылка);
    Запрос.УстановитьПараметр("ВедетсяРаздельныйУчетКапРемонта", СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
    Запрос.УстановитьПараметр("СписокНоменклатурыУслугКапРемонта", СтруктураНастроекКапРемонта.СписокНоменклатурыУслуг);

    // Формирование временных таблиц
    Запрос.Выполнить();

    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МВТ;
    Запрос.Текст = СтруктураТекстаЗапроса.ОсновнойЗапрос;
    Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДокументОтраженияОбъект.Дата));
    Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДокументОтраженияОбъект.Дата));
    Запрос.УстановитьПараметр("ДокументОтражения", ДокументОтраженияОбъект.Ссылка);

    РезультатПакета = Запрос.ВыполнитьПакет();

    ТаблицаКонтроля = РезультатПакета[1].Выгрузить();

    // Контроль начислений выполненных ранее в период текущего отражения отражения
    Для Каждого СтрокаКонтроля Из ТаблицаКонтроля Цикл
        Если ВыводитьСообщения Тогда
            ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                    "Внимание! Для номенклатуры: ""%1"" договора ""%2"" за период документа ранее выполнялись отражения",
                    Строка(СтрокаКонтроля.Номенклатура), Строка(СтрокаКонтроля.ДоговорКонтрагента)));
        КонецЕсли;
    КонецЦикла;

    ДанныеДляЗаполнения = РезультатПакета[0].Выгрузить();

    Возврат ДанныеДляЗаполнения;
КонецФункции

// Параметры:
//  СтруктураПараметровСтроки - Структура
// Возвращаемое значение:
//  - Строка
Функция СформироватьСодержаниеУслугиСУчетомЛС(Знач СтруктураПараметровСтроки) Экспорт
    НоменклатураРасшифровки = СтруктураПараметровСтроки.СтрокаРасшифровки.Номенклатура;
    НаименованиеУслугиРасшифровки = ?(ПустаяСтрока(НоменклатураРасшифровки.НаименованиеПолное),
            НоменклатураРасшифровки.Наименование, НоменклатураРасшифровки.НаименованиеПолное);

    // Замена наименования номенклатуры для содержания (Замена выполняется в соответствии с ТЗ)
    // Изменение функционала замены синонимов выполнен по пожеланию Клиента
    //  Теперь синоним используется только для Канализации
    СинонимНегативногоВоздействия = "Водоотведение";
    Если СтрПодобнаПоРегулярномуВыражению(НаименованиеУслугиРасшифровки, "Канализация.*") Тогда
        НаименованиеУслугиРасшифровки = СинонимНегативногоВоздействия;
    КонецЕсли;

    // Добавление в содержание наименования л/с
    Если ЗначениеЗаполнено(СтруктураПараметровСтроки.СтрокаРасшифровки.lc_ЛицевойСчет) = Истина Тогда
        НаименованиеУслугиРасшифровки = СтрШаблон("%1, %2",
                НаименованиеУслугиРасшифровки, Строка(СтруктураПараметровСтроки.СтрокаРасшифровки.lc_ЛицевойСчет));
    КонецЕсли;

    // Формирование содержания с учетом периодичности
    РезультатФункции = РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(НаименованиеУслугиРасшифровки,
            СтруктураПараметровСтроки.СтрокаРасшифровки.Номенклатура.ПериодичностьУслуги,
            СтруктураПараметровСтроки.ДокументОбъект.Дата);

    // Дополнение содержания признаком ОтражениеПени
    Если СтруктураПараметровСтроки.Свойство("ОтражениеПени") И СтруктураПараметровСтроки.ОтражениеПени Тогда
        РезультатФункции = РезультатФункции + " (пени)";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДанныеДляЗаполнения - ТаблицаЗначений
//  ТаблицаРасшифровкиНеПройденногоКонтроля - ТаблицаЗначений
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция ОчиститьТаблицуДанныхОтраженияПоЛицевымСетам(Знач ДанныеДляЗаполнения, Знач ТаблицаРасшифровкиНеПройденногоКонтроля) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |   ТаблицаРасшифровкиНеПройденногоКонтроля.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |   ТаблицаРасшифровкиНеПройденногоКонтроля.Номенклатура КАК Номенклатура,
        |   ТаблицаРасшифровкиНеПройденногоКонтроля.СуммаОтражения КАК СуммаОтражения
        |ПОМЕСТИТЬ ВТ_ТаблицаРасшифровкиНеПройденногоКонтроля
        |ИЗ
        |   &ТаблицаРасшифровкиНеПройденногоКонтроля КАК ТаблицаРасшифровкиНеПройденногоКонтроля
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   *
        |ПОМЕСТИТЬ ВТ_ДанныеДляЗаполнения
        |ИЗ
        |   &ДанныеДляЗаполнения КАК ДанныеДляЗаполнения
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТ_ДанныеДляЗаполнения.Контрагент КАК Контрагент,
        |	ВТ_ДанныеДляЗаполнения.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ВТ_ДанныеДляЗаполнения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	ВТ_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
        |	ВТ_ДанныеДляЗаполнения.ЛицевойСчет КАК ЛицевойСчет,
        |	ВТ_ДанныеДляЗаполнения.ЭтоЛьгота КАК ЭтоЛьгота,
        |	ВТ_ДанныеДляЗаполнения.ЭтоПени КАК ЭтоПени,
        |	ВТ_ДанныеДляЗаполнения.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	ВТ_ДанныеДляЗаполнения.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	ВТ_ДанныеДляЗаполнения.ЭтоКапРемонт КАК ЭтоКапРемонт,
        |   ВЫБОР
        |       КОГДА ВТ_ТаблицаРасшифровкиНеПройденногоКонтроля.Номенклатура ЕСТЬ NULL
        |           ТОГДА ВТ_ДанныеДляЗаполнения.СуммаОтражения
        |       ИНАЧЕ ЕСТЬNULL(ВТ_ТаблицаРасшифровкиНеПройденногоКонтроля.СуммаОтражения, 0)
        |   КОНЕЦ КАК СуммаОтражения,
        |	ВТ_ДанныеДляЗаполнения.Тариф КАК Тариф,
        |	ВТ_ДанныеДляЗаполнения.Количество КАК Количество,
        |	ВТ_ДанныеДляЗаполнения.ЭтоРеализация КАК ЭтоРеализация
        |ИЗ
        |   ВТ_ДанныеДляЗаполнения КАК ВТ_ДанныеДляЗаполнения
        |   ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасшифровкиНеПройденногоКонтроля КАК ВТ_ТаблицаРасшифровкиНеПройденногоКонтроля
        |       ПО ВТ_ДанныеДляЗаполнения.ДоговорКонтрагента = ВТ_ТаблицаРасшифровкиНеПройденногоКонтроля.ДоговорКонтрагента
        |       И ВТ_ДанныеДляЗаполнения.Номенклатура = ВТ_ТаблицаРасшифровкиНеПройденногоКонтроля.Номенклатура
        |";

    Запрос.УстановитьПараметр("ТаблицаРасшифровкиНеПройденногоКонтроля", ТаблицаРасшифровкиНеПройденногоКонтроля);
    Запрос.УстановитьПараметр("ДанныеДляЗаполнения", ДанныеДляЗаполнения);

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * ВременныеТаблицы - Строка
//      * ОсновнойЗапрос - Строка
Функция ПолучитьТекстЗапросаДанныхОтраженияПоЛицевымСетам() Экспорт
    РезультатФункции = Новый Структура("ВременныеТаблицы, ОсновнойЗапрос");

    РезультатФункции.ВременныеТаблицы =
        "ВЫБРАТЬ
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Номенклатура КАК Номенклатура,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ГП_ЛицевойСчет КАК ГП_ЛицевойСчет,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота КАК ЭтоЛьгота,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоПени КАК ЭтоПени,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.КоличествоОстаток КАК КоличествоОтражения,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток КАК СуммаОтражения
        |ПОМЕСТИТЬ ВТ_ТаблицаОстатков
        |ИЗ
        |	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(
        |			&ДатаСреза,
        |			Организация = &Организация
        |				И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ДвиженияДокумента.ДоговорКонтрагента.Владелец КАК Контрагент,
        |	ДвиженияДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ДвиженияДокумента.Номенклатура КАК Номенклатура,
        |	ДвиженияДокумента.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	ДвиженияДокумента.ГП_ЛицевойСчет КАК ГП_ЛицевойСчет,
        |	ДвиженияДокумента.ЭтоЛьгота КАК ЭтоЛьгота,
        |	ДвиженияДокумента.ЭтоПени КАК ЭтоПени,
        |	ДвиженияДокумента.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	ДвиженияДокумента.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	СУММА(ДвиженияДокумента.Количество) КАК КоличествоОтражения,
        |	СУММА(ДвиженияДокумента.Сумма) КАК СуммаОтражения
        |ПОМЕСТИТЬ ВТ_ТаблицаДвиженийДокумента
        |ИЗ
        |	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете КАК ДвиженияДокумента
        |ГДЕ
        |   ДвиженияДокумента.Активность = ИСТИНА
        |	И ДвиженияДокумента.Регистратор = &ДокументОтражения
        |	И &ТекстДопУсловия
        |
        |СГРУППИРОВАТЬ ПО
        |	ДвиженияДокумента.ДоговорКонтрагента.Владелец,
        |	ДвиженияДокумента.ДоговорКонтрагента,
        |	ДвиженияДокумента.Номенклатура,
        |	ДвиженияДокумента.НоменклатурнаяГруппа,
        |	ДвиженияДокумента.ГП_ЛицевойСчет,
        |	ДвиженияДокумента.ЭтоЛьгота,
        |	ДвиженияДокумента.ЭтоПени,
        |	ДвиженияДокумента.ВариантПоставкиУслуг,
        |	ДвиженияДокумента.ДоговорПоставщикаУслуг
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ЕСТЬNULL(ТаблицаОстатков.Контрагент, ТаблицаДвиженийДокумента.Контрагент) КАК Контрагент,
        |	ЕСТЬNULL(ТаблицаОстатков.ДоговорКонтрагента, ТаблицаДвиженийДокумента.ДоговорКонтрагента) КАК ДоговорКонтрагента,
        |	ЕСТЬNULL(ТаблицаОстатков.Номенклатура, ТаблицаДвиженийДокумента.Номенклатура) КАК Номенклатура,
        |	ЕСТЬNULL(ТаблицаОстатков.НоменклатурнаяГруппа, ТаблицаДвиженийДокумента.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
        |	ЕСТЬNULL(ТаблицаОстатков.ГП_ЛицевойСчет, ТаблицаДвиженийДокумента.ГП_ЛицевойСчет) КАК ГП_ЛицевойСчет,
        |	ЕСТЬNULL(ТаблицаОстатков.ЭтоЛьгота, ТаблицаДвиженийДокумента.ЭтоЛьгота) КАК ЭтоЛьгота,
        |	ЕСТЬNULL(ТаблицаОстатков.ЭтоПени, ТаблицаДвиженийДокумента.ЭтоПени) КАК ЭтоПени,
        |	ЕСТЬNULL(ТаблицаОстатков.ВариантПоставкиУслуг, ТаблицаДвиженийДокумента.ВариантПоставкиУслуг) КАК ВариантПоставкиУслуг,
        |	ЕСТЬNULL(ТаблицаОстатков.ДоговорПоставщикаУслуг, ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг) КАК ДоговорПоставщикаУслуг,
        |	ЕСТЬNULL(ТаблицаОстатков.КоличествоОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.КоличествоОтражения, 0) КАК КоличествоОтражения,
        |	ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) КАК СуммаОтражения,
        |	ЛОЖЬ КАК ЭтоКапРемонт,
        |	ЛОЖЬ КАК ЭтоРеализация
        |ПОМЕСТИТЬ ВТ_Результат
        |ИЗ
        |	ВТ_ТаблицаОстатков КАК ТаблицаОстатков
        |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТаблицаДвиженийДокумента КАК ТаблицаДвиженийДокумента
        |		ПО (ТаблицаДвиженийДокумента.Контрагент = ТаблицаОстатков.Контрагент)
        |			И (ТаблицаДвиженийДокумента.ДоговорКонтрагента = ТаблицаОстатков.ДоговорКонтрагента)
        |			И (ТаблицаДвиженийДокумента.Номенклатура = ТаблицаОстатков.Номенклатура)
        |			И (ТаблицаДвиженийДокумента.НоменклатурнаяГруппа = ТаблицаОстатков.НоменклатурнаяГруппа)
        |			И (ТаблицаДвиженийДокумента.ГП_ЛицевойСчет = ТаблицаОстатков.ГП_ЛицевойСчет)
        |			И (ТаблицаДвиженийДокумента.ЭтоЛьгота = ТаблицаОстатков.ЭтоЛьгота)
        |			И (ТаблицаДвиженийДокумента.ЭтоПени = ТаблицаОстатков.ЭтоПени)
        |			И (ТаблицаДвиженийДокумента.ВариантПоставкиУслуг = ТаблицаОстатков.ВариантПоставкиУслуг)
        |			И (ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг = ТаблицаОстатков.ДоговорПоставщикаУслуг)
        |ГДЕ
        |	ИСТИНА
        |	И ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) > 0
        |
        |;";

    РезультатФункции.ОсновнойЗапрос =
        "ВЫБРАТЬ
        |	ВТ_Результат.Контрагент КАК Контрагент,
        |	ВТ_Результат.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ВТ_Результат.Номенклатура КАК Номенклатура,
        |	ВТ_Результат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	ВТ_Результат.ГП_ЛицевойСчет КАК ГП_ЛицевойСчет,
        |	ВТ_Результат.ЭтоЛьгота КАК ЭтоЛьгота,
        |	ВТ_Результат.ЭтоПени КАК ЭтоПени,
        |	ВТ_Результат.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	ВТ_Результат.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	ВТ_Результат.КоличествоОтражения КАК КоличествоОтражения,
        |	ВТ_Результат.СуммаОтражения КАК СуммаОтражения,
        |	ВТ_Результат.ЭтоКапРемонт КАК ЭтоКапРемонт,
        |	ВТ_Результат.ЭтоРеализация КАК ЭтоРеализация,
        |ИЗ
        |	ВТ_Результат КАК ВТ_Результат
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ВТ_Результат.Контрагент КАК Контрагент,
        |	ВТ_Результат.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ВТ_Результат.Номенклатура КАК Номенклатура,
        |	ВТ_Результат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	ВТ_Результат.ГП_ЛицевойСчет КАК ГП_ЛицевойСчет,
        |	ВТ_Результат.ЭтоЛьгота КАК ЭтоЛьгота,
        |	ВТ_Результат.ЭтоПени КАК ЭтоПени,
        |	ВТ_Результат.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	ВТ_Результат.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	ВТ_Результат.КоличествоОтражения КАК КоличествоОтражения,
        |	ВТ_Результат.СуммаОтражения КАК СуммаОтражения,
        |	КВП_НачислениеДляОтраженияВРеглУчете.Количество КАК Количество,
        |	КВП_НачислениеДляОтраженияВРеглУчете.Сумма КАК Сумма,
        |	ВТ_Результат.ЭтоКапРемонт КАК ЭтоКапРемонт,
        |	ВТ_Результат.ЭтоРеализация КАК ЭтоРеализация
        |ИЗ
        |   ВТ_Результат КАК ВТ_Результат
        |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете КАК КВП_НачислениеДляОтраженияВРеглУчете
        |   ПО КВП_НачислениеДляОтраженияВРеглУчете.Регистратор ССЫЛКА Документ.КВП_ОтражениеНачисленийВРеглУчете
        |       И КВП_НачислениеДляОтраженияВРеглУчете.Регистратор <> &ДокументОтражения
        |       И КВП_НачислениеДляОтраженияВРеглУчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
        |       И КВП_НачислениеДляОтраженияВРеглУчете.Активность = ИСТИНА
        |       И КВП_НачислениеДляОтраженияВРеглУчете.ДоговорКонтрагента = ВТ_Результат.ДоговорКонтрагента
        |       И КВП_НачислениеДляОтраженияВРеглУчете.Номенклатура = ВТ_Результат.Номенклатура
        |       И КВП_НачислениеДляОтраженияВРеглУчете.НоменклатурнаяГруппа = ВТ_Результат.НоменклатурнаяГруппа
        |       И КВП_НачислениеДляОтраженияВРеглУчете.ГП_ЛицевойСчет = ВТ_Результат.ГП_ЛицевойСчет
        |       И КВП_НачислениеДляОтраженияВРеглУчете.ЭтоЛьгота = ВТ_Результат.ЭтоЛьгота
        |       И КВП_НачислениеДляОтраженияВРеглУчете.ЭтоПени = ВТ_Результат.ЭтоПени
        |       И КВП_НачислениеДляОтраженияВРеглУчете.ВариантПоставкиУслуг = ВТ_Результат.ВариантПоставкиУслуг
        |       И КВП_НачислениеДляОтраженияВРеглУчете.ДоговорПоставщикаУслуг = ВТ_Результат.ДоговорПоставщикаУслуг
        |ГДЕ
        |   КВП_НачислениеДляОтраженияВРеглУчете.Регистратор ЕСТЬ NULL
        |";

    Возврат РезультатФункции;
КонецФункции

// Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату ++
//
// Параметры:
//  ДокументРеализацииОбъект - ДокументОбъект.РеализацияТоваровИУслуг
// Возвращаемое значение:
//  - ДокументСсылка.СчетНаОплатуПокупателю
Функция СформироватьСчетНаОплатуДокументаРеализации(Знач ДокументРеализацииОбъект) Экспорт
    СчетНаОплатуОбъект = Неопределено;
    Если ДокументРеализацииОбъект.СчетНаОплатуПокупателю.Пустая() = Ложь Тогда
        СчетНаОплатуОбъект = ДокументРеализацииОбъект.СчетНаОплатуПокупателю.ПолучитьОбъект();
        Если СчетНаОплатуОбъект.ПометкаУдаления Тогда
            СчетНаОплатуОбъект.УстановитьПометкуУдаления(Ложь);
        КонецЕсли;
        СчетНаОплатуОбъект.Товары.Очистить();
    Иначе
        СчетНаОплатуОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
    КонецЕсли;

    СчетНаОплатуОбъект.Заполнить(ДокументРеализацииОбъект.Ссылка);
    СчетНаОплатуОбъект.Дата = ДокументРеализацииОбъект.Дата;
    СчетНаОплатуОбъект.Записать(РежимЗаписиДокумента.Запись);
    ДокументРеализацииОбъект.СчетНаОплатуПокупателю = СчетНаОплатуОбъект.Ссылка;

    Возврат ДокументРеализацииОбъект.СчетНаОплатуПокупателю.Ссылка;
КонецФункции // Гарант+ Килипенко 23.09.2024 [F00228749] Формирование счета на оплату ++

// Печать
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказ") Тогда
        Если МассивОбъектов.Количество() = 0 Тогда
            Возврат;
        КонецЕсли;

        МассивСчетовНаОплату = ПолучитьМассивСчетовНаОплатуДокументаОтражения(МассивОбъектов[0]);

        Обработки.ПечатьСчетаНаОплату.Печать(
            МассивСчетовНаОплату,
            ПараметрыПечати,
            КоллекцияПечатныхФорм,
            ОбъектыПечати,
            ПараметрыВывода);
    КонецЕсли;
КонецПроцедуры

// Параметры:
//  ДокументСсылка - ДокументСсылка.КВП_ОтражениеНачисленийВРеглУчете
// Возвращаемое значение:
//  - Массив
Функция ПолучитьМассивСчетовНаОплатуДокументаОтражения(Знач ДокументСсылка) Экспорт
    МассивДокументовРеализации =
        Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьМассивДокументовРеализацияТоваровИУслуг(ДокументСсылка);

    РезультатФункции = Новый Массив;
    Для Каждого ДокументРеализацииСсылка Из МассивДокументовРеализации Цикл
        СчетНаОплатуПокупателюСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
                ДокументРеализацииСсылка, "СчетНаОплатуПокупателю");

        Если СчетНаОплатуПокупателюСсылка.Пустая() Тогда
            Продолжить;
        КонецЕсли;

        РезультатФункции.Добавить(СчетНаОплатуПокупателюСсылка);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
