// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
#Область СлужебныеПроцедурыИФункции

#Область ПереопределениеСтандартныхФункций

&ИзменениеИКонтроль("ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения")
Процедура ГП_ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения(ОбновитьСодержаниеТабличнойЧасти)

    ВыполнятьОтражениеНачисленийСОбъемамиИТарифами =
    УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДетализациейПоОбъемамИТарифам(Дата);

    // Получим актуальную таблицу отражения начислений для обновления данных
    // в табличных частях Контрагенты и Расшифровка начислений.
    ТаблицаНачислений = ПолучитьТаблицуОтражениеНачислений();

    КолСтрокТаблицыНачислений = ТаблицаНачислений.Количество();

    Если КолСтрокТаблицыНачислений = 0 Тогда
        Возврат;
    КонецЕсли;

    // В случае, если для какой-то услуги не выбрана связанная номенклатура, сообщим об этом пользователю
    // и удалим строку с начислениями по данной услуге из таблицы начислений.
    Для Индекс = 1 По КолСтрокТаблицыНачислений Цикл
        ТекСтрока = ТаблицаНачислений[КолСтрокТаблицыНачислений - Индекс];
        Если ПустаяСтрока(ТекСтрока.Номенклатура) Тогда
            УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Контрагент: " 
            + Строка(ТекСтрока.Контрагент) 
            + ". Сумма для отражения: " 
            + Строка(ТекСтрока.СуммаОтражения) 
            + ". В справочнике ""Услуги"" для услуги не выбрана номенклатура. Сумма не будет учтена.");
            ТаблицаНачислений.Удалить(ТекСтрока);
        КонецЕсли;
    КонецЦикла;

    // Сформируем данные из актуальной таблицы начислений для загрузки в табличные части документа.
    ТаблицаНачислений.Сортировать("Контрагент");
    #Вставка
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    
    // Переименование колонки ЛицевойСчет -> lc_ЛицевойСчет
    КолонкаЛицевогоСчета = ТаблицаНачислений.Колонки.Найти("ЛицевойСчет");
    Если КолонкаЛицевогоСчета <> Неопределено Тогда
        КолонкаЛицевогоСчета.Имя = "lc_" + КолонкаЛицевогоСчета.Имя;
        ТаблицаНачислений.Сортировать(КолонкаЛицевогоСчета.Имя + ",Номенклатура");
    КонецЕсли;
    
    // Установка признака ЭтоРеализация
    ПризнакЭтоРеализация = ЭтотОбъект.ТипДокументаОтражения = "Реализация товаров и услуг";
    ТаблицаНачислений.ЗаполнитьЗначения(ПризнакЭтоРеализация, "ЭтоРеализация");
    
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    #КонецВставки
    РасшифровкаНачислений.Загрузить(ТаблицаНачислений);

    #Удаление // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    ТаблицаНачислений.Свернуть("Контрагент, ДоговорКонтрагента, ВариантПоставкиУслуг, НоменклатурнаяГруппа, ЭтоКапРемонт, 
    |ЭтоЛьгота, ЭтоПени, ЭтоРеализация", "");
    #КонецУдаления
    #Вставка
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
    ПоляДляГруппировкиРасшифровки = "Контрагент, ДоговорКонтрагента, ВариантПоставкиУслуг, НоменклатурнаяГруппа, ЭтоКапРемонт"
        + ", ЭтоЛьгота, ЭтоПени, ЭтоРеализация";
    Если ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам() Тогда
        ПоляДляГруппировкиРасшифровки = ПоляДляГруппировкиРасшифровки + "";
        КолонкаЛицевогоСчета = ТаблицаНачислений.Колонки.Найти("lc_ЛицевойСчет");
        Если КолонкаЛицевогоСчета <> Неопределено Тогда
            ТаблицаНачислений.Колонки.Удалить(КолонкаЛицевогоСчета);
        КонецЕсли;
    КонецЕсли;

    ТаблицаНачислений.Свернуть(ПоляДляГруппировкиРасшифровки, "");
    // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
    #КонецВставки
    ТаблицаНачислений.Колонки.Добавить("Отражать", Новый ОписаниеТипов("Булево"));
    ТаблицаНачислений.ЗаполнитьЗначения(Истина, "Отражать");

    // Обновим содержимое табличной части Контрагенты без удаления актуальных текущих данных (с сохранением ссылок
    // на сформированные типовые документы отражения начислений), либо полностью перезаполним ее, в зависимости от
    // параметра "ОбновитьСодержаниеТабличнойЧасти".
    Если ОбновитьСодержаниеТабличнойЧасти Тогда

        // Обновим содержимое табличной части.
        МассивСтрокНаУдаление = Новый Массив;

        Для каждого ТекущаяСтрокаКонтрагенты Из Контрагенты Цикл

            СтруктураПроверки = Новый Структура;

            СтруктураПроверки.Вставить("Контрагент",           ТекущаяСтрокаКонтрагенты.Контрагент);
            СтруктураПроверки.Вставить("ДоговорКонтрагента",   ТекущаяСтрокаКонтрагенты.ДоговорКонтрагента);
            СтруктураПроверки.Вставить("ВариантПоставкиУслуг", ТекущаяСтрокаКонтрагенты.ВариантПоставкиУслуг);
            СтруктураПроверки.Вставить("НоменклатурнаяГруппа", ТекущаяСтрокаКонтрагенты.НоменклатурнаяГруппа);
            СтруктураПроверки.Вставить("ЭтоЛьгота",            ТекущаяСтрокаКонтрагенты.ЭтоЛьгота);
            СтруктураПроверки.Вставить("ЭтоПени",              ТекущаяСтрокаКонтрагенты.ЭтоПени);
            СтруктураПроверки.Вставить("ЭтоКапРемонт",         ТекущаяСтрокаКонтрагенты.ЭтоКапРемонт);
            СтруктураПроверки.Вставить("ЭтоРеализация",        ТекущаяСтрокаКонтрагенты.ЭтоРеализация);
            #Вставка
            // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете ++
            Если ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам() Тогда
                СтруктураПроверки.Вставить("ЛицевойСчет", ТекущаяСтрокаКонтрагенты.ЛицевойСчет);
            КонецЕсли;
            // Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
            #КонецВставки

            // Проверим, есть ли данные текущей строки табличной части Контрагенты в новом варианте таблицы начислений.
            МассивСовпадающихСтрок = ТаблицаНачислений.НайтиСтроки(СтруктураПроверки);

            // Если в таблице начислений не обнаружено совпадающих строк, значит данного начисления больше нет,
            // в таком случае, необходимо удалить текущую строку. В противном случае, оставляем содержимое строки табличной части
            // Контрагенты без изменения (в ней обновится лишь сумма начисления), и удаляем строку из массива совпадающих документов.
            Если МассивСовпадающихСтрок.Количество() = 0 Тогда

                // Пометим типовой документ на удаление и удалим текущую строку.
                ТекДокумент = ТекущаяСтрокаКонтрагенты.Документ;

                // Если документ в строке указан и не помечен на удаление - помечаем его на удаление.
                Если ЗначениеЗаполнено(ТекДокумент)
                    И Не ТекДокумент.ПометкаУдаления Тогда

                    Попытка

                        ДокОбъект = ТекДокумент.ПолучитьОбъект();
                        ДокОбъект.УстановитьПометкуУдаления(Истина);
                        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ <" + ТекДокумент + "> помечен на удаление.");

                    Исключение

                        УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + ТекущаяСтрокаКонтрагенты.НомерСтроки 
                        + " не удалось пометить на удаление документ по причине:"
                        + Символы.ПС + "    " + ОписаниеОшибки());

                        Продолжить;

                    КонецПопытки;

                КонецЕсли;

                МассивСтрокНаУдаление.Добавить(ТекущаяСтрокаКонтрагенты);

            Иначе

                // Если полученная строка находится и в табличной части и в актуальной таблице начислений,
                // в таком случае удаляем ее из таблицы начислений и оставляем содержание табличной части.
                // Суммы начислений актуализируются в дальнейшем из таблицы Расшифровка начислений.
                Для каждого СовпадающаяСтрока Из МассивСовпадающихСтрок Цикл
                    ТаблицаНачислений.Удалить(СовпадающаяСтрока);
                КонецЦикла; 

            КонецЕсли;

        КонецЦикла;

        // Очистим строки, которых нет в актуальной таблице начислений.
        Для каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
            Контрагенты.Удалить(СтрокаНаУдаление);
        КонецЦикла;

        // Если остались строки в таблице начислений, значит они новые и их не было в ТЧ "Контрагенты",
        // добавим их в табличную часть.
        Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
            ЗаполнитьЗначенияСвойств(Контрагенты.Добавить(), СтрокаТаблицыНачислений);
        КонецЦикла;

    Иначе

        // Перезаполним табличную часть.
        Контрагенты.Загрузить(ТаблицаНачислений);

    КонецЕсли;

КонецПроцедуры

&Вместо ("ПолучитьТаблицуОтражениеНачислений")
Функция ГП_ПолучитьТаблицуОтражениеНачислений()
    ТаблицаДанныхКонтроля = ПродолжитьВызов();
    Если ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам() = Ложь Тогда
        Возврат ТаблицаДанныхКонтроля;
    КонецЕсли;

    СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(ЭтотОбъект.Организация, Истина);
    РезультатФункции = ГП_ПолучитьДанныеДляЗаполненияОтраженияПоЛицевымСчетам(СтруктураНастроекКапРемонта);
    Возврат РезультатФункции;
КонецФункции

&После ("ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации")
Процедура ГП_ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки)
    Если ЭтотОбъект.мЭтоРеализация = Ложь
        ИЛИ СтруктураПараметровСтроки.ДокументОбъект.Услуги.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;

    СодержаниеРасшифровки = ГП_СформироватьСодержаниеУслугиСУчетомЛС(СтруктураПараметровСтроки);

    ИндексНовойСтрокиУслуг = СтруктураПараметровСтроки.ДокументОбъект.Услуги.Количество() - 1;
    НоваяСтрокаУслуг = СтруктураПараметровСтроки.ДокументОбъект.Услуги[ИндексНовойСтрокиУслуг];
    НоваяСтрокаУслуг.Содержание = СодержаниеРасшифровки;
КонецПроцедуры

#КонецОбласти // ПереопределениеСтандартныхФункций

Функция ГП_ЭтоЗаполнениеОтраженияПоЛицевымСчетам()
    РезультатФункции = ЭтотОбъект.ДополнительныеСвойства.Свойство("ГП_ЭтоЗаполнениеПоЛицевымСчетам");
    Возврат РезультатФункции И ЭтотОбъект.ДополнительныеСвойства.ГП_ЭтоЗаполнениеПоЛицевымСчетам;
КонецФункции

Функция ГП_ПолучитьДанныеДляЗаполненияОтраженияПоЛицевымСчетам(Знач СтруктураНастроекКапРемонта)
    Запрос = Новый Запрос;
    Запрос.Текст = ГП_ПолучитьТекстЗапросаДанныхОтраженияПоЛицевымСетам();

    ДатаСреза = Новый Граница(КонецДня(ЭтотОбъект.Дата), ВидГраницы.Включая);
    Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
    Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ЭтотОбъект.Дата));
    Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ЭтотОбъект.Дата));
    Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
    Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
    Запрос.УстановитьПараметр("ДокументОтражения", ЭтотОбъект.Ссылка);
    Запрос.УстановитьПараметр("ВедетсяРаздельныйУчетКапРемонта", СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
    Запрос.УстановитьПараметр("СписокНоменклатурыУслугКапРемонта", СтруктураНастроекКапРемонта.СписокНоменклатурыУслуг);

    РезультатЗапроса = Запрос.Выполнить();
    ДанныеДляЗаполнения = РезультатЗапроса.Выгрузить();

    Возврат ДанныеДляЗаполнения;
КонецФункции

Функция ГП_СформироватьСодержаниеУслугиСУчетомЛС(Знач СтруктураПараметровСтроки)
    НоменклатураРасшифровки = СтруктураПараметровСтроки.СтрокаРасшифровки.Номенклатура;
    НаименованиеУслугиРасшифровки = ?(ПустаяСтрока(НоменклатураРасшифровки.НаименованиеПолное),
            НоменклатураРасшифровки.Наименование, НоменклатураРасшифровки.НаименованиеПолное);

    Если ЗначениеЗаполнено(СтруктураПараметровСтроки.СтрокаРасшифровки.lc_ЛицевойСчет) = Истина Тогда
        НаименованиеУслугиРасшифровки = СтрШаблон("%1 %2", 
            НаименованиеУслугиРасшифровки, Строка(СтруктураПараметровСтроки.СтрокаРасшифровки.lc_ЛицевойСчет));
    КонецЕсли;

    РезультатФункции = РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(НаименованиеУслугиРасшифровки,
            СтруктураПараметровСтроки.СтрокаРасшифровки.Номенклатура.ПериодичностьУслуги,
            СтруктураПараметровСтроки.ДокументОбъект.Дата);

    Если СтруктураПараметровСтроки.Свойство("ОтражениеПени") И СтруктураПараметровСтроки.ОтражениеПени Тогда
        РезультатФункции = РезультатФункции + " (пени)";
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция ГП_ПолучитьТекстЗапросаДанныхОтраженияПоЛицевымСетам()
    РезультатФункции =
        "ВЫБРАТЬ
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Номенклатура КАК Номенклатура,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота КАК ЭтоЛьгота,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоПени КАК ЭтоПени,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток КАК СуммаОтражения
        |ПОМЕСТИТЬ ТаблицаОстатков
        |ИЗ
        |	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(
        |			&ДатаСреза,
        |			Организация = &Организация
        |				И ДоговорКонтрагента.Владелец = &Контрагент) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Номенклатура КАК Номенклатура,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота КАК ЭтоЛьгота,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоПени КАК ЭтоПени,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток КАК СуммаОтражения
        |ПОМЕСТИТЬ ВТ_ТаблицаОстатковПодготовка
        |ИЗ
        |	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(
        |			&ДатаСреза,
        |			Организация = &Организация
        |				И ДоговорКонтрагента.Владелец = &Контрагент) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ДвиженияДокумента.ДоговорКонтрагента.Владелец КАК Контрагент,
        |	ДвиженияДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ДвиженияДокумента.Номенклатура КАК Номенклатура,
        |	ДвиженияДокумента.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	ДвиженияДокумента.ЭтоЛьгота КАК ЭтоЛьгота,
        |	ДвиженияДокумента.ЭтоПени КАК ЭтоПени,
        |	ДвиженияДокумента.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	ДвиженияДокумента.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	СУММА(ДвиженияДокумента.Сумма) КАК СуммаОтражения
        |ПОМЕСТИТЬ ТаблицаДвиженийДокумента
        |ИЗ
        |	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете КАК ДвиженияДокумента
        |ГДЕ
        |	ДвиженияДокумента.Регистратор = &ДокументОтражения
        |	И ДвиженияДокумента.ДоговорКонтрагента.Владелец = &Контрагент
        |
        |СГРУППИРОВАТЬ ПО
        |	ДвиженияДокумента.ДоговорКонтрагента.Владелец,
        |	ДвиженияДокумента.ДоговорКонтрагента,
        |	ДвиженияДокумента.Номенклатура,
        |	ДвиженияДокумента.НоменклатурнаяГруппа,
        |	ДвиженияДокумента.ЭтоЛьгота,
        |	ДвиженияДокумента.ЭтоПени,
        |	ДвиженияДокумента.ВариантПоставкиУслуг,
        |	ДвиженияДокумента.ДоговорПоставщикаУслуг
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ЕСТЬNULL(ТаблицаОстатков.Контрагент, ТаблицаДвиженийДокумента.Контрагент) КАК Контрагент,
        |	ЕСТЬNULL(ТаблицаОстатков.ДоговорКонтрагента, ТаблицаДвиженийДокумента.ДоговорКонтрагента) КАК ДоговорКонтрагента,
        |	ЕСТЬNULL(ТаблицаОстатков.Номенклатура, ТаблицаДвиженийДокумента.Номенклатура) КАК Номенклатура,
        |	ЕСТЬNULL(ТаблицаОстатков.НоменклатурнаяГруппа, ТаблицаДвиженийДокумента.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
        |	ЕСТЬNULL(ТаблицаОстатков.ЭтоЛьгота, ТаблицаДвиженийДокумента.ЭтоЛьгота) КАК ЭтоЛьгота,
        |	ЕСТЬNULL(ТаблицаОстатков.ЭтоПени, ТаблицаДвиженийДокумента.ЭтоПени) КАК ЭтоПени,
        |	ЕСТЬNULL(ТаблицаОстатков.ВариантПоставкиУслуг, ТаблицаДвиженийДокумента.ВариантПоставкиУслуг) КАК ВариантПоставкиУслуг,
        |	ЕСТЬNULL(ТаблицаОстатков.ДоговорПоставщикаУслуг, ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг) КАК ДоговорПоставщикаУслуг,
        |	ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) КАК СуммаОтражения,
        |	ЛОЖЬ КАК ЭтоКапРемонт
        |ПОМЕСТИТЬ ДанныеОтражения
        |ИЗ
        |	ТаблицаОстатков КАК ТаблицаОстатков
        |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаДвиженийДокумента КАК ТаблицаДвиженийДокумента
        |		ПО (ТаблицаДвиженийДокумента.Контрагент = ТаблицаОстатков.Контрагент)
        |			И (ТаблицаДвиженийДокумента.ДоговорКонтрагента = ТаблицаОстатков.ДоговорКонтрагента)
        |			И (ТаблицаДвиженийДокумента.Номенклатура = ТаблицаОстатков.Номенклатура)
        |			И (ТаблицаДвиженийДокумента.НоменклатурнаяГруппа = ТаблицаОстатков.НоменклатурнаяГруппа)
        |			И (ТаблицаДвиженийДокумента.ЭтоЛьгота = ТаблицаОстатков.ЭтоЛьгота)
        |			И (ТаблицаДвиженийДокумента.ЭтоПени = ТаблицаОстатков.ЭтоПени)
        |			И (ТаблицаДвиженийДокумента.ВариантПоставкиУслуг = ТаблицаОстатков.ВариантПоставкиУслуг)
        |			И (ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг = ТаблицаОстатков.ДоговорПоставщикаУслуг)
        |ГДЕ
        |	ИСТИНА
        |	И ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) > 0
        |;
        |
        |//////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ДоговорКонтрагента,
        |	Номенклатура,
        |	СУММА(СуммаОтражения)
        |ПОМЕСТИТЬ ВТ_КонтрольОтраженияПоНоменклатуре
        |ИЗ
        |	ДанныеОтражения КАК ВТ_ДанныеОтражения
        |СГРУППИРОВАТЬ ПО
        |	ДоговорКонтрагента,
        |	Номенклатура
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ДанныеОтражения.Контрагент КАК Контрагент,
        |	ДанныеОтражения.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ДанныеОтражения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |	ДанныеОтражения.Номенклатура КАК Номенклатура,
        |	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
        |	ДанныеОтражения.ЭтоЛьгота КАК ЭтоЛьгота,
        |	ДанныеОтражения.ЭтоПени КАК ЭтоПени,
        |	ДанныеОтражения.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
        |	ДанныеОтражения.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
        |	ВТ_КонтрольОтраженияПоНоменклатуре.СуммаОтражения КАК КонтрольнаяСуммаОтражения,
        |	ДанныеОтражения.ЭтоКапРемонт КАК ЭтоКапРемонт,
        |	ЕСТЬNULL(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0) КАК СуммаОтражения,
        |	ЕСТЬNULL(УПЖКХ_НачисленияОбороты.Тариф, 0) КАК Тариф,
        |	ЕСТЬNULL(УПЖКХ_НачисленияОбороты.Количество, 0) КАК Количество,
        |	ЛОЖЬ КАК ЭтоРеализация
        |ИЗ
        |	ДанныеОтражения КАК ДанныеОтражения
        |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонтрольОтраженияПоНоменклатуре КАК ВТ_КонтрольОтраженияПоНоменклатуре
        |	ПО ДанныеОтражения.Номенклатура = ВТ_КонтрольОтраженияПоНоменклатуре.Номенклатура
        |	И ДанныеОтражения.ДоговорКонтрагента = ВТ_КонтрольОтраженияПоНоменклатуре.ДоговорКонтрагента
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления.Обороты(
        |				&НачалоПериода,
        |				&КонецПериода,
        |				Авто,
        |				Договор В
        |					(ВЫБРАТЬ
        |						ДанныеОтражения.ДоговорКонтрагента
        |					ИЗ
        |						ДанныеОтражения)) КАК УПЖКХ_НачисленияОбороты
        |		ПО ДанныеОтражения.ДоговорКонтрагента = УПЖКХ_НачисленияОбороты.Договор
        |			И ДанныеОтражения.Номенклатура = УПЖКХ_НачисленияОбороты.Услуга.Услуга
        |			И ДанныеОтражения.НоменклатурнаяГруппа = УПЖКХ_НачисленияОбороты.Услуга.Услуга.НоменклатурнаяГруппа
        |ГДЕ
        |	(УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_НачислениеУслуг
        |			ИЛИ УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РазовоеНачислениеУслуг
        |			ИЛИ УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.УПЖКХ_НачислениеУслугВСтороннейПрограмме)
        |";

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 19.09.2024 [F00228718] Доработка заполнения отражения начислений в рег. учете --
