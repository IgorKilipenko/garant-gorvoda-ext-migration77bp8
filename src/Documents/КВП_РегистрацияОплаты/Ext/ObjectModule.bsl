// Гарант+ Килипенко 30.01.2025 [F00234009] Игнорировать начисления по услуге ГВС при распределении оплаты ++
#Область ПереопределениеСтандартногоФункционала

&ИзменениеИКонтроль("СформироватьЗапросТаблицыНачислений")
Процедура ГП_СформироватьЗапросТаблицыНачислений(ЭтоРаспределениеОднойСтроки, Объект)

    мЗапросТаблицыНачислений = Новый Запрос;
    мЗапросТаблицыНачислений.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

    // Авансы на добровольное страхование не распределяются. Поэтому надо исключить соответствующую услугу.
    Если НастройкиУчетаДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
        УсловиеНаУслугу = " И НЕ Услуга = &ДобровольноеСтрахование";
        мЗапросТаблицыНачислений.УстановитьПараметр("ДобровольноеСтрахование", НастройкиУчетаДобровольногоСтрахования.УслугаДобровольногоСтрахования);
    Иначе
        УсловиеНаУслугу = "";
    КонецЕсли;
    #Вставка // Гарант+ Килипенко 30.01.2025 [F00234009] Игнорировать начисления по услуге ГВС при распределении оплаты ++

    // Список услуг для игнорирования в распределении авансов
    УслугиДляИгнорирования = ГП_РегистрацияОплатыСлужебный.ПолучитьУслугиДляИгнорированияПриРаспределенииАванса();

    // Услуга ГВС не должна учитываться при распределении оплаты
    Если УслугиДляИгнорирования.Количество() > 0 Тогда
        Для каждого УслугаИгнорирования Из УслугиДляИгнорирования Цикл
            НаименованиеПараметраУслуги = "ГП_Услуга_"
                + СтрЗаменитьПоРегулярномуВыражению(УслугаИгнорирования.Наименование, "(?i)[^a-zа-я0-9]+", "");

            УсловиеНаУслугу = СтрШаблон("%1 И Услуга <> &%2", УсловиеНаУслугу, НаименованиеПараметраУслуги);
            мЗапросТаблицыНачислений.УстановитьПараметр(НаименованиеПараметраУслуги, УслугаИгнорирования.Ссылка);

            ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
                "ВНИМАНИЕ! Услуга ""%1"" не будет учитываться при распределении аванса", УслугаИгнорирования.Наименование));
        КонецЦикла;
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 30.01.2025 [F00234009] Игнорировать начисления по услуге ГВС при распределении оплаты --

    мЗапросТаблицыНачислений.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	УПЖКХ_НачисленияОбороты.Услуга,
    |	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
    |	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаПоУслуге
    |ПОМЕСТИТЬ врТаблицаНачислений
    |ИЗ
    |	РегистрНакопления.УПЖКХ_Начисления.Обороты(
    |			&ДатаНачала,
    |			&ДатаОкончания,
    |			,
    |			Организация = &Организация
    |					И (РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
    |					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
    |					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат)
    |					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
    |				ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
    |				И ЛицевойСчет В (&СписокЛС)" + УсловиеНаУслугу + ") КАК УПЖКХ_НачисленияОбороты";

    КоличествоМесяцев = мНастройкиУчетнойПолитикиТСЖ.КоличествоПериодовНачисления;
    КонецПериода = КонецМесяца(Дата);

    ДатаКон = КонецМесяца(ДобавитьМесяц(КонецПериода, - 1));
    ДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаКон, - КоличествоМесяцев + 1));

    мЗапросТаблицыНачислений.УстановитьПараметр("Организация",   Организация);
    мЗапросТаблицыНачислений.УстановитьПараметр("ДатаНачала",    ДатаНач);
    мЗапросТаблицыНачислений.УстановитьПараметр("ДатаОкончания", ДатаКон);

    Если ЭтоРаспределениеОднойСтроки Тогда
        // Если это распределение только одной строки оплаты, то данные по начислениям
        // для распределения авансов получим только по одному объекту.
        мЗапросТаблицыНачислений.УстановитьПараметр("СписокЛС", Объект);
    Иначе
        // Если же распределение всего документа, то данные получаем сразу по всем строкам оплаты.
        мЗапросТаблицыНачислений.УстановитьПараметр("СписокЛС", ЛицевыеСчета.ВыгрузитьКолонку("Объект"));
    КонецЕсли;

    мЗапросТаблицыНачислений.Выполнить();

КонецПроцедуры

&После ("РаспределитьОстаткиВТаблицеРасшифровкиНаДолгиИАвансы")
Процедура ГП_РаспределитьОстаткиВТаблицеРасшифровкиНаДолгиИАвансы(ЛицевойСчет)
    УслугиДляИгнорирования = ГП_РегистрацияОплатыСлужебный.ПолучитьУслугиДляИгнорированияПриРаспределенииАванса();
    КэшУслугДляИгнорирования = Новый Соответствие;
    Для Каждого ТекущаяУслугаИгнорирования Из УслугиДляИгнорирования Цикл
        КэшУслугДляИгнорирования.Вставить(ТекущаяУслугаИгнорирования.Ссылка, ТекущаяУслугаИгнорирования);
    КонецЦикла;
    УслугиДляИгнорирования = Неопределено;

    Если КэшУслугДляИгнорирования.Количество() = 0 Тогда
        Возврат; // Нет услуг для игнорирования
    КонецЕсли;

    ОбщаяСуммаАвансаДляПерераспределения = 0;
    СтрокиДляЗачисленияАванса = Новый Массив;
    СтрокиДляСписанияАванса = Новый Массив;
    СтрокиТекЛС = ЭтотОбъект.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Объект", ЛицевойСчет));
    ИсходнаяСуммаРаспределенияПоЛС = 0; // Для учета остатка (ошибки округления перераспределения аванса)
    Для Каждого ТекСтрокаРасшифровки Из СтрокиТекЛС Цикл
        ИсходнаяСуммаРаспределенияПоЛС = ИсходнаяСуммаРаспределенияПоЛС + ТекСтрокаРасшифровки.Сумма; // Накопление суммы по ЛС

        ЭтоСтрокаАванса = ЭтоСтрокаРасшифровкиАванса(ТекСтрокаРасшифровки);
        Если ЭтоСтрокаАванса = Ложь Тогда
            Продолжить; // Это не аванс
        КонецЕсли;

        ТекущаяУслугаИгнорирования = КэшУслугДляИгнорирования.Получить(ТекСтрокаРасшифровки.Услуга);
        Если ТекущаяУслугаИгнорирования = Неопределено Тогда
            СтрокиДляЗачисленияАванса.Добавить(ТекСтрокаРасшифровки);
            Продолжить;
        КонецЕсли;

        ОбщаяСуммаАвансаДляПерераспределения = ОбщаяСуммаАвансаДляПерераспределения + ТекСтрокаРасшифровки.Сумма;
        СтрокиДляСписанияАванса.Добавить(ТекСтрокаРасшифровки);
    КонецЦикла;

    КоличествоСтрокДляЗачисленияАванса = СтрокиДляЗачисленияАванса.Количество();
    Если КоличествоСтрокДляЗачисленияАванса = 0 ИЛИ ОбщаяСуммаАвансаДляПерераспределения = 0 Тогда
        Возврат; // Нет данных для перераспределения аванса
    КонецЕсли;

    НакопленнаяСуммаПогрешностейОкругления = 0;
    СуммаАвансаДляЗачисления = ОбщаяСуммаАвансаДляПерераспределения / КоличествоСтрокДляЗачисленияАванса;
    СтрокаМаксимальнойСуммы = Неопределено;
    Для Каждого СтрокаЗачисленияАванса Из СтрокиДляЗачисленияАванса Цикл
        СтрокаЗачисленияАванса.Сумма = СтрокаЗачисленияАванса.Сумма + СуммаАвансаДляЗачисления;
        ОкругленнаяСуммаАванса = Окр(СтрокаЗачисленияАванса.Сумма, 2, 1);

        НакопленнаяСуммаПогрешностейОкругления =
            НакопленнаяСуммаПогрешностейОкругления + (СтрокаЗачисленияАванса.Сумма - ОкругленнаяСуммаАванса);

        СтрокаЗачисленияАванса.Сумма = ОкругленнаяСуммаАванса;

        Если СтрокаМаксимальнойСуммы = Неопределено Тогда
            СтрокаМаксимальнойСуммы = СтрокаЗачисленияАванса;
        КонецЕсли;

        Если СтрокаЗачисленияАванса.Сумма > СтрокаМаксимальнойСуммы.Сумма Тогда
            СтрокаМаксимальнойСуммы = СтрокаЗачисленияАванса;
        КонецЕсли;
    КонецЦикла;

    // Распределение ошибки округления
    Если СтрокаМаксимальнойСуммы <> Неопределено Тогда
        // Расчет суммы по л/с после перераспределения аванса
        НоваяСуммаРаспределенияПоЛС = 0;
        Для каждого ТекСтрокаРасшифровки Из СтрокиТекЛС Цикл
            Если СтрокиДляСписанияАванса.Найти(ТекСтрокаРасшифровки) <> Неопределено Тогда
                Продолжить;
            КонецЕсли;

            НоваяСуммаРаспределенияПоЛС = НоваяСуммаРаспределенияПоЛС + ТекСтрокаРасшифровки.Сумма;
        КонецЦикла;

        РазностьСуммПоЛС = ИсходнаяСуммаРаспределенияПоЛС - НоваяСуммаРаспределенияПоЛС;
        КонтрольнаяРазностьОшибокОкругления = РазностьСуммПоЛС - НакопленнаяСуммаПогрешностейОкругления;
        КонтрольнаяРазностьОшибокОкругления = Макс(КонтрольнаяРазностьОшибокОкругления, -КонтрольнаяРазностьОшибокОкругления);
        Если КонтрольнаяРазностьОшибокОкругления > 0.1 ИЛИ Макс(РазностьСуммПоЛС, -РазностьСуммПоЛС) > 0.1 Тогда // КОНТРОЛЬ
            ОбщегоНазначения.СообщитьПользователю(
                "ВНИМАНИЕ! Большая погрешность при перераспределении авансов неиспользуемых услуг");
        КонецЕсли;

        СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + РазностьСуммПоЛС;
    КонецЕсли;

    Для Каждого СтрокаСписанияАванса Из СтрокиДляСписанияАванса Цикл
        Если СтрокаСписанияАванса.Пени = 0 Тогда
            ЭтотОбъект.РасшифровкаПлатежа.Удалить(СтрокаСписанияАванса);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

#КонецОбласти // ПереопределениеСтандартногоФункционала
// Гарант+ Килипенко 30.01.2025 [F00234009] Игнорировать начисления по услуге ГВС при распределении оплаты --

#Область СлужебныеПроцедурыИФункции

Функция ЭтоСтрокаРасшифровкиАванса(Знач СтрокаРасшифровки)
    Возврат СтрокаРасшифровки.ДолгСумма <= 0 И СтрокаРасшифровки.Сумма > 0;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
