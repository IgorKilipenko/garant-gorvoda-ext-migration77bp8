// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
#Область ПереопределениеСтандартногоФункционала

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьТабличнуюЧастьЛицевыеСчетаНаСервере")
Процедура ГП_ЗаполнитьТабличнуюЧастьЛицевыеСчетаНаСервере(ТолькоЛицевыеСчетаИмеющиеЗадолженность)

    #Вставка // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
    ЭтоЗаполнениеПоКонтрагенту = ЗначениеЗаполнено(ЭтотОбъект.Объект.Контрагент) = Истина;
    ЭтоЗаполнениеПоКонтрагенту = ЭтоЗаполнениеПоКонтрагенту И (ЗначениеЗаполнено(ЭтотОбъект.Объект.Дом) = Ложь);
    #КонецВставки // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
    Объект.ЛицевыеСчета.Очистить();
    Объект.РасшифровкаПлатежа.Очистить();
    Объект.РасшифровкаРассрочки.Очистить();
    Объект.СведенияОДобровольномСтраховании.Очистить();

    // Запрос возвращает список лицевых счетов в зависимости от выбранной пользователем команды "ПодменюЗаполнить":
    // 1. Осуществляется выбор всех счетов, относящихся к выбранному зданию из справочника"КВП_ЛицевыеСчета";
    // 2. Производится отбор действующих счетов среди полученных в п.1, и данные передаются во временную таблицу "втСписокДействующихЛицевыхСчетов";
    // 3. Из действующих лицевых счетов отбираем только те, по которым есть сведения для взаиморасчетов в организации документа, помещаем итоговый список
    //    лицевых счетов во временную таблицу втЛицевыеСчетаИзСведенийДляВзаиморасчетов;
    // 4. Из полученных в п.3 счетов выбираем счета с имеющейся задолженностью и помещаем их во Временную таблицу "втСписокЛицевыхСчетовСЗадолженностью";
    // 5. Соединяем таблицы "втЛицевыеСчетаИзСведенийДляВзаиморасчетов" и "втСписокЛицевыхСчетовСЗадолженностью" левым соединением,
    //    получаем список лицевых счетов, исходя из выбранного пользователем параметра "ТолькоЛицевыеСчетаИмеющиеЗадолженность",
    //    если выбрана команда подменю "ЗаполнитьТаблицуВсемиЛицевымиСчетами" выводятся все действующие лицевые счета из таблицы "втСписокДействующихЛицевыхСчетов",
    //    если выбрана команда подменю "ЗаполнитьЛицевымиСчетамиСЗадолженностью" выводятся все действующие лицевые счета из таблицы "втСписокЛицевыхСчетовСЗадолженностью".

    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Период",                  Новый Граница(Объект.Дата, ВидГраницы.Исключая));
    Запрос.УстановитьПараметр("Организация",             Объект.Организация);
    #Удаление // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления
    Запрос.УстановитьПараметр("Здание",                  Объект.Дом);
    #КонецУдаления
    #Вставка // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++

    Если ЭтоЗаполнениеПоКонтрагенту = Истина Тогда
        Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Объект.Контрагент);
    Иначе
        Запрос.УстановитьПараметр("Здание", ЭтотОбъект.Объект.Дом);
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
    Запрос.УстановитьПараметр("НачалоПредыдущегоМесяца", НачалоМесяца(ДобавитьМесяц(Объект.Дата, - 1)));
    Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  КонецМесяца(ДобавитьМесяц(Объект.Дата, - 1)));
    Запрос.УстановитьПараметр("СледующийМесяц",          КонецМесяца(ДобавитьМесяц(Объект.Дата, 1)));
    Запрос.УстановитьПараметр("УслугаСтрахования",       УслугаДобровольногоСтрахования);

    Запрос.УстановитьПараметр("ТолькоЛицевыеСчетаИмеющиеЗадолженность", ТолькоЛицевыеСчетаИмеющиеЗадолженность);

    Запрос.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
    |ПОМЕСТИТЬ втСписокЛицевыхСчетов
    |ИЗ
    |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
    |ГДЕ
    |	КВП_ЛицевыеСчета.Адрес.Владелец В ИЕРАРХИИ(&Здание)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ЛицевыеСчета.ЛицевойСчет
    |ПОМЕСТИТЬ втСписокДействующихЛицевыхСчетов
    |ИЗ
    |	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
    |			&Период,
    |			ЛицевойСчет В
    |				(ВЫБРАТЬ
    |					втСписокЛицевыхСчетов.ЛицевойСчет
    |				ИЗ
    |					втСписокЛицевыхСчетов КАК втСписокЛицевыхСчетов)) КАК ЛицевыеСчета
    |ГДЕ
    |	ЛицевыеСчета.Действует
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
    |	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование
    |ПОМЕСТИТЬ втЛицевыеСчетаИзСведенийДляВзаиморасчетов
    |ИЗ
    |	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
    |			&Период,
    |			ЛицевойСчет В
    |					(ВЫБРАТЬ
    |						втСписокДействующихЛицевыхСчетов.ЛицевойСчет
    |					ИЗ
    |						втСписокДействующихЛицевыхСчетов КАК втСписокДействующихЛицевыхСчетов)
    |				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
    #Вставка // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
    |ГДЕ
    |   ИСТИНА
    |   И &ГП_УсловиеСведенийДляВзаиморасчетовПоЛС
    #КонецВставки // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет
    |ПОМЕСТИТЬ втСписокЛицевыхСчетовСоСтрахованием
    |ИЗ
    |	РегистрНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Обороты(
    |			&НачалоПредыдущегоМесяца,
    |			&КонецПредыдущегоМесяца,
    |			,
    |			Организация = &Организация
    |				И ЛицевойСчет В
    |					(ВЫБРАТЬ
    |						втСписокДействующихЛицевыхСчетов.ЛицевойСчет
    |					ИЗ
    |						втСписокДействующихЛицевыхСчетов КАК втСписокДействующихЛицевыхСчетов)
    |				И Услуга = &УслугаСтрахования
    |				И КОНЕЦПЕРИОДА(МесяцНачисления, МЕСЯЦ) = &СледующийМесяц) КАК УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты
    |ГДЕ
    |	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.СуммаНачисленияОборот > 0
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
    |	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
    |ПОМЕСТИТЬ втСписокЛицевыхСчетовСЗадолженностью
    |ИЗ
    |	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
    |			&Период,
    |			Организация = &Организация
    |				И ЛицевойСчет В
    |					(ВЫБРАТЬ
    |						втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчет
    |					ИЗ
    |						втЛицевыеСчетаИзСведенийДляВзаиморасчетов КАК втЛицевыеСчетаИзСведенийДляВзаиморасчетов)
    |				И &УсловиеНаУслуги) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
    |ГДЕ
    |	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ЕСТЬNULL(втСписокЛицевыхСчетовСЗадолженностью.ЛицевойСчет, втСписокЛицевыхСчетовСоСтрахованием.ЛицевойСчет) КАК ЛицевойСчет
    |ПОМЕСТИТЬ втСписокЛицевыхСчетовСДолгамиИНачислениями
    |ИЗ
    |	втСписокЛицевыхСчетовСоСтрахованием КАК втСписокЛицевыхСчетовСоСтрахованием
    |		ПОЛНОЕ СОЕДИНЕНИЕ втСписокЛицевыхСчетовСЗадолженностью КАК втСписокЛицевыхСчетовСЗадолженностью
    |		ПО втСписокЛицевыхСчетовСоСтрахованием.ЛицевойСчет = втСписокЛицевыхСчетовСЗадолженностью.ЛицевойСчет
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчет КАК Объект
    |ИЗ
    |	втЛицевыеСчетаИзСведенийДляВзаиморасчетов КАК втЛицевыеСчетаИзСведенийДляВзаиморасчетов
    |		ЛЕВОЕ СОЕДИНЕНИЕ втСписокЛицевыхСчетовСДолгамиИНачислениями КАК втСписокЛицевыхСчетовСДолгамиИНачислениями
    |		ПО втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчет = втСписокЛицевыхСчетовСДолгамиИНачислениями.ЛицевойСчет
    |ГДЕ
    |	(НЕ &ТолькоЛицевыеСчетаИмеющиеЗадолженность
    |			ИЛИ ВЫБОР
    |				КОГДА втСписокЛицевыхСчетовСДолгамиИНачислениями.ЛицевойСчет ЕСТЬ NULL
    |					ТОГДА ЛОЖЬ
    |				ИНАЧЕ ИСТИНА
    |			КОНЕЦ)
    |
    |УПОРЯДОЧИТЬ ПО
    |	втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчетНаименование";

    // Необходимо учесть возможность раздельного учета услуг кап. ремонта.
    УсловиеНаУслуги = "ИСТИНА";
    Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
        Если Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт Тогда
            УсловиеНаУслуги = "НЕ Услуга В (&СписокУслугКапРемонта)";
        ИначеЕсли Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
            УсловиеНаУслуги = "Услуга В (&СписокУслугКапРемонта)"
        КонецЕсли;
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаУслуги", УсловиеНаУслуги);
    Запрос.УстановитьПараметр("СписокУслугКапРемонта", мСтруктураНастроекКапРемонта.СписокУслуг);

    #Вставка // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++

    ГП_ДанныеЗамены = Новый Структура;
    ГП_ДанныеЗамены.Вставить("ИсходныйТекстУсловияЗамены", "&ГП_УсловиеСведенийДляВзаиморасчетовПоЛС");
    ГП_ДанныеЗамены.Вставить("ТекстЗамены", "ИСТИНА");

    Если ЭтоЗаполнениеПоКонтрагенту = Истина Тогда
        // Добавляем условие по Контрагенту
        ГП_ДанныеЗамены.Вставить("ТекстЗамены", "УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент = &Контрагент");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, ГП_ДанныеЗамены.ИсходныйТекстУсловияЗамены, ГП_ДанныеЗамены.ТекстЗамены);
        Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Объект.Контрагент);

        // Исключаем фильтр по зданиям
        ГП_ДанныеЗамены.ИсходныйТекстУсловияЗамены = "КВП_ЛицевыеСчета.Адрес.Владелец В ИЕРАРХИИ(&Здание)";
        ГП_ДанныеЗамены.ТекстЗамены = "ИСТИНА";
        Запрос.Текст = СтрЗаменить(Запрос.Текст, ГП_ДанныеЗамены.ИсходныйТекстУсловияЗамены, ГП_ДанныеЗамены.ТекстЗамены);
    Иначе
        // Заменяем &ГП_УсловиеСведенийДляВзаиморасчетовПоЛС на ИСТИНА
        Запрос.Текст = СтрЗаменить(Запрос.Текст, ГП_ДанныеЗамены.ИсходныйТекстУсловияЗамены, ГП_ДанныеЗамены.ТекстЗамены);
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
    Объект.ЛицевыеСчета.Загрузить(Запрос.Выполнить().Выгрузить());

    #Вставка // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++

    Если ЭтоЗаполнениеПоКонтрагенту Тогда
        ДокументаОплатыДляЗаполнения = ?(ЭтотОбъект.Объект.ДокументыПоступленияДенежныхСредств.Количество() > 0,
            ЭтотОбъект.Объект.ДокументыПоступленияДенежныхСредств[0].Документ, Неопределено);

        СуммаРаспределенияПоЛС = 0;

        Если ДокументаОплатыДляЗаполнения = Неопределено Тогда
            Если ЭтотОбъект.Параметры.Свойство("ГП_ДанныеЗаполнения") = Ложь Тогда
                ОбщегоНазначения.СообщитьПользователю("Не указан документ оплаты");
            Иначе
                ДокументаОплатыДляЗаполнения = ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.ДокументОплаты;
                СуммаРаспределенияПоЛС = ЭтотОбъект.Параметры.СуммаДокументаОплаты;
            КонецЕсли;
        ИначеЕсли ЭтотОбъект.Объект.ДокументыПоступленияДенежныхСредств.Количество() > 1 Тогда
            ОбщегоНазначения.СообщитьПользователю("Внимание! при заполнении сумм будет учтен только первый документ оплат");
        КонецЕсли;

        Если СуммаРаспределенияПоЛС = 0 И ДокументаОплатыДляЗаполнения <> Неопределено Тогда
            СуммаРаспределенияПоЛС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументаОплатыДляЗаполнения, "СуммаДокумента");
        КонецЕсли;

        СписокЛицевыхСчетов = ЭтотОбъект.Объект.ЛицевыеСчета.Выгрузить(, "Объект").ВыгрузитьКолонку("Объект");

        ГП_ЗаполнитьТаблицуЛицевыхСчетовПоКонтрагентуНаСервере(СуммаРаспределенияПоЛС, ДокументаОплатыДляЗаполнения, СписокЛицевыхСчетов);
    КонецЕсли;

    #КонецВставки // Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
    // Вызываем процедуру "ЗаполнитьДопДанныеВТаблице" для заполнения следующих реквизитов:
    // "Помещение", "Владелец", "ФлагРедактированияНастроек".
    ЗаполнитьДопДанныеВТаблице();
    ОбновитьСтатусыЧековВТабличнойЧастиСервере();

КонецПроцедуры

#КонецОбласти // ПереопределениеСтандартногоФункционала
// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --

// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ГП_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
    ГП_СоздатьДополнительныеЭлементыНаСервере();

    Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка) = Ложь И ЭтотОбъект.Параметры.Свойство("ГП_ДанныеЗаполнения") = Истина Тогда
        // ЗаполнитьЗначенияСвойств(ЭтотОбъект.Объект, ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения);
        ДокументОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Объект");

        ДокументОбъект.Заполнить(ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения);

        ДокументОбъект.Дата = ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.Дата;
        // ДокументОбъект.УстановитьВремя(РежимАвтоВремя.Последним);

        ДокументОбъект.Контрагент = ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.Контрагент;

        ДокументОбъект.ДокументыПоступленияДенежныхСредств.Очистить();
        НоваяСтрокаДокументов = ДокументОбъект.ДокументыПоступленияДенежныхСредств.Добавить();
        НоваяСтрокаДокументов.Документ = ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.ДокументОплаты;

        ЭтотОбъект.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

        ГП_ЗаполнитьТаблицуЛицевыхСчетовПоКонтрагентуНаСервере(
            ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.СуммаДокументаОплаты,
            ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.ДокументОплаты);
    КонецЕсли;

    ГП_НастроитьВидимостьЭлементовФормыНаСервере();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы
// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --

// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ГП_ЗаполнитьТаблицуЛицевыхСчетовПоКонтрагентуНаСервере(
    Знач СуммаРаспределенияПоЛС, Знач ДокументОплаты, Знач СписокЛицевыхСчетов = Неопределено)

    // Получение таблицы л/с контрагента
    СписокЛицевыхСчетов = ?(СписокЛицевыхСчетов <> Неопределено, СписокЛицевыхСчетов,
            ГП_РаботаСЛицевымиСчетами.ПолучитьЛицевыеСчетаКонтрагента(
                ЭтотОбъект.Объект.Контрагент,
                ЭтотОбъект.Объект.Организация,
                ЭтотОбъект.Объект.Дата,
                Истина));

    // Получение данные взаиморасчетов по л/с
    ТаблицаНачисленийНаЛС = ГП_ПолучитьНачисленияДляСпискаЛицевыхСчетовНаСервере(
            СписокЛицевыхСчетов, ЭтотОбъект.Объект.Организация, Новый Граница(ЭтотОбъект.Объект.Дата, ВидГраницы.Исключая));

    // Формирования таблицы данных распределения оплаты по л/с
    ДанныеЗаполнения = ГП_СформироватьТаблицуОплатДляСпискаЛСНаСервере(
            ТаблицаНачисленийНаЛС, СуммаРаспределенияПоЛС, ДокументОплаты, ЭтотОбъект.Объект.Контрагент);

    // Заполнение ТЧ ЛицевыеСчета
    ГП_ОчиститьЗаполненныеДанныеОплатНаСервере();
    Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
        НоваяСтрокаЛС = ЭтотОбъект.Объект.ЛицевыеСчета.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрокаЛС, СтрокаДанных);

        // По умолчанию - Настройка распределения: "Автоматически"
        НоваяСтрокаЛС.РаспределятьПоУказаннымУслугам = Ложь;
        НоваяСтрокаЛС.ФлагРедактирования = Ложь;
        НоваяСтрокаЛС.ФлагРедактированияНастроек = 1;
        НоваяСтрокаЛС.ВариантРаспределения = "";
    КонецЦикла;

    ОбновитьСтатусыЧековВТабличнойЧастиСервере();
КонецПроцедуры

// Устарела. Переход на `ГП_РегистрацияОплатыСлужебный.СформироватьТаблицуОплатДляСпискаЛС`
//
// Параметры:
//  ТаблицаНачисленийНаЛС - ТаблицаЗначений
//  СуммаРаспределения - Число
//  ДокументОплаты - ДокументСсылка
//  Контрагент - СправочникСсылка.Контрагенты
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Объект - СправочникСсылка.КВП_ЛицевыеСчета
//      * ДокументОплаты - ДокументСсылка
//      * Сумма - Число
//      * Помещение - СправочникСсылка.УПЖКХ_Помещения
//      * Здание - СправочникСсылка.КВП_Здания
//      * Владелец - СправочникСсылка.Контрагенты
&НаСервере
Функция ГП_СформироватьТаблицуОплатДляСпискаЛСНаСервере(
        Знач ТаблицаНачисленийНаЛС, Знач СуммаРаспределения, Знач ДокументОплаты, Знач Контрагент)

    Возврат ГП_РегистрацияОплатыСлужебный.СформироватьТаблицуОплатДляСпискаЛС(
        ТаблицаНачисленийНаЛС, СуммаРаспределения, ДокументОплаты, Контрагент);
КонецФункции

&НаСервере
Функция ГП_ВыполнитьРаспределениеОплатыНаСервере(Знач ДанныеДляРаспределения, Знач ПараметрыРаспределения)
    Возврат ГП_РегистрацияОплатыСлужебный.СформироватьТаблицуРаспределенияОплаты(
        ПараметрыРаспределения.СуммаРаспределения,
        ПараметрыРаспределения.ОбщаяСуммаНачислений,
        ДанныеДляРаспределения,
        ПараметрыРаспределения.ДокументОплаты,
        ПараметрыРаспределения.Контрагент,
        ?(ПараметрыРаспределения.Свойство("РаспределятьРавномерно"), ПараметрыРаспределения.РаспределятьРавномерно, Ложь));
КонецФункции

&НаСервереБезКонтекста
Функция ГП_РассчитатьКоэффициентРаспределенияНаСервере(
        Знач СуммаНачисления, Знач СуммаРаспределения, Знач КоличествоСтрокРаспределения = Неопределено)

    Возврат ГП_РегистрацияОплатыСлужебный.РассчитатьКоэффициентРаспределения(
        СуммаНачисления, СуммаРаспределения, КоличествоСтрокРаспределения);
КонецФункции

&НаСервереБезКонтекста
Функция ГП_ПодготовитьСтруктуруДанныхДляРаспределенияОплатыНаСервере(Знач ТаблицаНачисленийНаЛС)
    Возврат ГП_РегистрацияОплатыСлужебный.ПодготовитьСтруктуруДанныхДляРаспределенияОплаты(ТаблицаНачисленийНаЛС);
КонецФункции

// Параметры:
//  СписокЛицевыхСчетов - Массив, СписокЗначений из СправочникСсылка.КВП_ЛицевыеСчета
//  ОрганизацияСсылка - СправочникСсылка.Организации, Неопределено
//  Период - Дата, Неопределено
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//      * СуммаНачисленияОстаток - Число
&НаСервереБезКонтекста
Функция ГП_ПолучитьНачисленияДляСпискаЛицевыхСчетовНаСервере(Знач СписокЛицевыхСчетов, Знач ОрганизацияСсылка, Знач Период)
    ТаблицаНачисленийНаЛС = ГП_РегистрацияОплатыСлужебный.ПолучитьНачисленияДляСпискаЛицевыхСчетов(
        СписокЛицевыхСчетов, ОрганизацияСсылка, Период);

    Если ТаблицаНачисленийНаЛС.Количество() = 0 Тогда
        // Если нет остатков по взаиморасчетам но есть л/с
        Для каждого ТекущийЛС Из СписокЛицевыхСчетов Цикл
            НоваяСтрокаДанных = ТаблицаНачисленийНаЛС.Добавить();
            НоваяСтрокаДанных.ЛицевойСчет = ТекущийЛС;
            НоваяСтрокаДанных.СуммаНачисленияОстаток = 0;
        КонецЦикла;
    КонецЕсли;

    Возврат ТаблицаНачисленийНаЛС;
КонецФункции

&НаСервере
Процедура ГП_ОчиститьЗаполненныеДанныеОплатНаСервере()
	ЭтотОбъект.Объект.ЛицевыеСчета.Очистить();
	ЭтотОбъект.Объект.РасшифровкаПлатежа.Очистить();
	ЭтотОбъект.Объект.РасшифровкаРассрочки.Очистить();
	ЭтотОбъект.Объект.СведенияОДобровольномСтраховании.Очистить();
КонецПроцедуры

#Область НастройкиФормы

&НаСервере
Функция ГП_СоздатьПолеКонтрагентНаСервере()
    Результат = Новый Структура("Элемент");

    // Создание элемента формы
    ИмяСоздаваемогоЭлемента = "ГП_Контрагент";
    ПараметрыЭлемента = Новый Структура("Заголовок, ПутьКДанным, Видимость");
    ПараметрыЭлемента.Заголовок = "Контрагент";
    ПараметрыЭлемента.ПутьКДанным = "Объект.Контрагент";
    ПараметрыЭлемента.Видимость = Истина;

    Результат.Элемент = ГП_РаботаСФормамиКлиентСервер.СоздатьПолеФормы(ИмяСоздаваемогоЭлемента, ПараметрыЭлемента, ЭтотОбъект,
            "ГруппаСлева", "ВидОплаты");

    Возврат Результат;
КонецФункции

&НаСервере
Процедура ГП_СоздатьДополнительныеЭлементыНаСервере()
    ГП_СоздатьПолеКонтрагентНаСервере();
КонецПроцедуры

&НаСервере
Процедура ГП_НастроитьВидимостьЭлементовФормыНаСервере()
    ЭтотОбъект.Элементы.ВидОплаты.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти // НастройкиФормы

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
