// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ГП_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
    Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка) = Ложь И ЭтотОбъект.Параметры.Свойство("ГП_ДанныеЗаполнения") = Истина Тогда
        // ЗаполнитьЗначенияСвойств(ЭтотОбъект.Объект, ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения);
        ДокументОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Объект");

        ДокументОбъект.Заполнить(ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения);

        ДокументОбъект.Дата = ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.Дата;
        ДокументОбъект.УстановитьВремя(РежимАвтоВремя.Последним);

        ДокументОбъект.Контрагент = ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.Контрагент;

        ДокументОбъект.ДокументыПоступленияДенежныхСредств.Очистить();
        НоваяСтрокаДокументов = ДокументОбъект.ДокументыПоступленияДенежныхСредств.Добавить();
        НоваяСтрокаДокументов.Документ = ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.ДокументОплаты;

        ЭтотОбъект.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

        ЭтотОбъект.Объект.ЛицевыеСчета.Очистить();

        ГП_ЗаполнитьТаблицуЛицевыхСчетовПоКонтрагентуНаСервере(
            ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.СуммаДокументаОплаты,
            ЭтотОбъект.Параметры.ГП_ДанныеЗаполнения.ДокументОплаты,
            ЭтотОбъект.Объект.Контрагент,
            ЭтотОбъект.Объект.Организация,
            ЭтотОбъект.Объект.Дата);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы
// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --

// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления ++
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ГП_ЗаполнитьТаблицуЛицевыхСчетовПоКонтрагентуНаСервере(Знач СуммаРаспределенияПоЛС, Знач ДокументОплаты, Знач Контрагент, Знач Организация, Знач ДатаАктуальности)
    ТаблицаЛСКонтрагента = ГП_РаботаСЛицевымиСчетами.ПолучитьЛицевыеСчетаКонтрагента(Контрагент, Организация, ДатаАктуальности);

    СписокЛицевыхСчетов = ТаблицаЛСКонтрагента.ВыгрузитьКолонку("ЛицевойСчет");

    ТаблицаНачисленийНаЛС = ГП_ПолучитьНачисленияСпискаЛицевыхСчетовНаСервере(СписокЛицевыхСчетов);

    ГП_СформироватьТаблицуОплатДляСпискаЛСНаСервере(ТаблицаНачисленийНаЛС, СуммаРаспределенияПоЛС, ДокументОплаты, Контрагент);
КонецПроцедуры

&НаСервере
Процедура ГП_СформироватьТаблицуОплатДляСпискаЛСНаСервере(Знач ТаблицаНачисленийНаЛС, Знач СуммаРаспределения, Знач ДокументОплаты, Знач Контрагент)
    СтруктураДанныхДляРаспределения = ГП_ПодготовитьСтруктуруДанныхДляРаспределенияОплатыНаСервере(ТаблицаНачисленийНаЛС);
    ДанныеДляПропорциональногоРаспределения = СтруктураДанныхДляРаспределения.ДанныеДляПропорциональногоРаспределения;
    ДанныеДляРавномерногоРаспределения = СтруктураДанныхДляРаспределения.ДанныеДляРавномерногоРаспределения;

    СуммаНачисленияНаВсеЛС = ДанныеДляПропорциональногоРаспределения.Итог("СуммаНачисленияОстаток");
    СуммаДляПропорциональногоРаспределения = Мин(Макс(СуммаНачисленияНаВсеЛС, 0), СуммаРаспределения);
    СуммаДляРавномерногоРаспределения = СуммаРаспределения - СуммаДляПропорциональногоРаспределения;

    #Область Отладка
    ГП_ДиагностикаКлиентСервер.Утверждение(СуммаДляПропорциональногоРаспределения >= 0 И СуммаДляРавномерногоРаспределения >= 0,
        "Сумма распределения не может быть меньше 0");
    #КонецОбласти // Отладка

    // Основной цикл распределения по л/с где есть суммы на оплату (долг)
    ГП_ВыполнитьРаспределениеОплаты(
        СуммаДляПропорциональногоРаспределения,
        СуммаНачисленияНаВсеЛС,
        ДанныеДляПропорциональногоРаспределения,
        ДокументОплаты, Контрагент, Ложь);

    // Распределение аванса
    Если СуммаДляРавномерногоРаспределения > 0 Тогда
        #Область Отладка
        ГП_ДиагностикаКлиентСервер.Утверждение(ДанныеДляРавномерногоРаспределения.Количество(),
            "Нет данных л/с для равномерного распределения");
        #КонецОбласти // Отладка

        ГП_ВыполнитьРаспределениеОплаты(
            СуммаДляРавномерногоРаспределения,
            СуммаНачисленияНаВсеЛС,
            ДанныеДляРавномерногоРаспределения,
            ДокументОплаты, Контрагент, Истина);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ГП_ВыполнитьРаспределениеОплаты(
        Знач СуммаРаспределения, Знач ОбшаяСуммаНачислений, Знач ДанныеДляРаспределения, Знач ДокументОплаты, Знач Контрагент, Знач РаспределятьРавномерно = Ложь)

    РезультатФункции = Новый Структура("ОстаточноеРаспределение, СтрокаМаксимальнойСуммы", 0);

    Если ДанныеДляРаспределения.Количество() = 0 Тогда
        Возврат РезультатФункции; // Нет данных для распределения
    КонецЕсли;

    НераспределеннаяСумма = СуммаРаспределения;
    РезультатФункции.СтрокаМаксимальнойСуммы = Неопределено;
    Для Каждого СтрокаЛС Из ДанныеДляРаспределения Цикл
        КоэффициентРаспределенияЛС = ГП_РассчитатьКоэффициентРаспределения(
                СтрокаЛС.СуммаНачисленияОстаток, ОбшаяСуммаНачислений, ?(РаспределятьРавномерно = Истина,
                    ДанныеДляРаспределения.Количество(), Неопределено));

        #Область Отладка
        ГП_ДиагностикаКлиентСервер.Утверждение(КоэффициентРаспределенияЛС >= 0,
            "Коэффициент распределения должен не может иметь отрицательное значение");
        #КонецОбласти // Отладка

        НоваяСтрокаЛС = ЭтотОбъект.Объект.ЛицевыеСчета.Добавить();

        НоваяСтрокаЛС.Объект = СтрокаЛС.ЛицевойСчет;
        НоваяСтрокаЛС.ДокументОплаты = ДокументОплаты;
        НоваяСтрокаЛС.Сумма = ?(КоэффициентРаспределенияЛС = 1,
                СтрокаЛС.СуммаНачисленияОстаток,
                Окр(СуммаРаспределения * КоэффициентРаспределенияЛС, 2, 0));

        НоваяСтрокаЛС.Помещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЛС.ЛицевойСчет, "Адрес");
        НоваяСтрокаЛС.Здание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаЛС.Помещение, "Владелец");
        НоваяСтрокаЛС.Владелец = Контрагент;

        // По умолчанию - Настройка распределения: "Автоматически"
        НоваяСтрокаЛС.РаспределятьПоУказаннымУслугам = Ложь;
        НоваяСтрокаЛС.ФлагРедактирования = Ложь;
        НоваяСтрокаЛС.ФлагРедактированияНастроек = 1;
        НоваяСтрокаЛС.ВариантРаспределения = "";

        НераспределеннаяСумма = НераспределеннаяСумма - НоваяСтрокаЛС.Сумма;

        Если РезультатФункции.СтрокаМаксимальнойСуммы = Неопределено Тогда
            РезультатФункции.СтрокаМаксимальнойСуммы = НоваяСтрокаЛС;
        КонецЕсли;

        Если РезультатФункции.СтрокаМаксимальнойСуммы.Сумма < НоваяСтрокаЛС.Сумма Тогда
            РезультатФункции.СтрокаМаксимальнойСуммы = НоваяСтрокаЛС;
        КонецЕсли;
    КонецЦикла;

    Если НераспределеннаяСумма <> 0 И РезультатФункции.СтрокаМаксимальнойСуммы <> Неопределено Тогда
        РезультатФункции.СтрокаМаксимальнойСуммы.Сумма =
            РезультатФункции.СтрокаМаксимальнойСуммы.Сумма + НераспределеннаяСумма;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГП_РассчитатьКоэффициентРаспределения(Знач СуммаНачисления, СуммаРаспределения, КоличествоСтрокРаспределения = Неопределено)
    КоэффициентРаспределенияЛС = 1;

    РаспределятьРавномерно = КоличествоСтрокРаспределения <> Неопределено;

    Если РаспределятьРавномерно = Ложь Тогда
        Если СуммаНачисления <> СуммаРаспределения Тогда
            КоэффициентРаспределенияЛС = ?(СуммаРаспределения > 0,
                    СуммаНачисления / СуммаРаспределения, 0);
        КонецЕсли;
    Иначе
        КоэффициентРаспределенияЛС = ?(КоличествоСтрокРаспределения = 0, 0, КоэффициентРаспределенияЛС / КоличествоСтрокРаспределения);
    КонецЕсли;

    Возврат КоэффициентРаспределенияЛС;
КонецФункции

&НаСервереБезКонтекста
Функция ГП_ПодготовитьСтруктуруДанныхДляРаспределенияОплатыНаСервере(Знач ТаблицаНачисленийНаЛС)
    РезультатФункции = Новый Структура("ДанныеДляПропорциональногоРаспределения, ДанныеДляРавномерногоРаспределения");

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ПОМЕСТИТЬ ВТ_ТаблицаНачисленийНаЛС
        |ИЗ
        |   &ТаблицаНачисленийНаЛС КАК ТаблицаНачисленийНаЛС
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ИЗ
        |   ВТ_ТаблицаНачисленийНаЛС КАК ВТ_ТаблицаНачисленийНаЛС
        |ГДЕ
        |   ВТ_ТаблицаНачисленийНаЛС.СуммаНачисленияОстаток > 0
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ИЗ
        |   ВТ_ТаблицаНачисленийНаЛС КАК ВТ_ТаблицаНачисленийНаЛС
        |;
        |";

    Запрос.УстановитьПараметр("ТаблицаНачисленийНаЛС", ТаблицаНачисленийНаЛС);
    РезультатПакетаЗапроса = Запрос.ВыполнитьПакет();

    РезультатФункции.ДанныеДляПропорциональногоРаспределения = РезультатПакетаЗапроса[1].Выгрузить();
    РезультатФункции.ДанныеДляРавномерногоРаспределения = РезультатПакетаЗапроса[2].Выгрузить();

    Возврат РезультатФункции;
КонецФункции

&НаСервереБезКонтекста
Функция ГП_ПолучитьНачисленияСпискаЛицевыхСчетовНаСервере(
        Знач СписокЛицевыхСчетов, Знач ОрганизацияСсылка = Неопределено, Знач Период = Неопределено)
    ОрганизацияСсылка = ?(ОрганизацияСсылка = Неопределено,
            УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), ОрганизацияСсылка);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
        |	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
        |ИЗ
        |	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&Период, ЛицевойСчет В (&СписокЛицевыхСчетов) И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
        |";

    Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
    Если Период = Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Период", "");
    Иначе
        Запрос.УстановитьПараметр("Период", Период);
    КонецЕсли;
    Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 01.11.2024 [F00230427] Создание регистрации оплаты на основании поступления --
