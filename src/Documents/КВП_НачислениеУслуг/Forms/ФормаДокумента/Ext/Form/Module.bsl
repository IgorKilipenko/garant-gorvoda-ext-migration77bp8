// Гарант+ Килипенко 16.09.2024 [F00227727] Доработать заполнение документа начисление по приборам учета ++
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ГП_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
    ИспользоватьНовыйМеханизмОтражения = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(
            УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());

    Если ИспользоватьНовыйМеханизмОтражения = Ложь Тогда
        // Информация:
        // Функция заполнения документа отражения рассчитана на работу со старым механизмом отражения.
        //  Для работы с новым механизмом функция не адаптирована т.к. на момент разработки
        //  новый механизм не завершен разработчиками конфигурации
        ГП_СоздатьКомандуОтразитьНачисленияВРегламентномУчетеНаСервере();
    КонецЕсли;

    ЭтоНовыйДокументБезКопирования = Объект.Ссылка.Пустая()
        И (ЭтотОбъект.Параметры.Свойство("ЗначениеКопирования") = Ложь
            ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Параметры.ЗначениеКопирования));
    Если Отказ ИЛИ ЭтоНовыйДокументБезКопирования Тогда
        Возврат;
    КонецЕсли;

    ГП_ЗаполнитьНаОснованииВводаПоказанийНаПУНаСервере();

    // ДАЛЕЕ РАБОТАЕТ СТАНДАРТНЫЙ МЕХАНИЗМ:

    мКоличествоДнейЗаданоВручную = НЕ Объект.Ссылка.Пустая();

    мТочностьОбъемаНачислений = Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить();

    Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
        УстановитьПояснениеКДобровольномуСтрахованию(Объект.Дата, Элементы.НадписьПояснениеДобровольногоСтрахования.Заголовок);
    КонецЕсли;

    // Заполнение оперативных параметров.
    мДатаДокумента = Объект.Дата;
    мОрганизация = Объект.Организация;

    ЗаполнитьКоличествоДнейНачисления(Ложь);

    Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета
        ИЛИ Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
        ЗаполнитьДеревоУслуг();
        ЗаполнитьДопДанныеВСтрокахДерева();
    ИначеЕсли Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
        ЗаполнитьДеревоУслугПоПоказаниямПУ();
        ЗаполнитьДопДанныеВСтрокахДерева(Истина);

        РазрешитьРучноеРедактированиеНачисленийПоПоказаниямПУ = Константы.УПЖКХ_РазрешитьРучноеРедактированиеНачисленийПоПоказаниямПУ.Получить();
        Элементы.ДеревоПоПоказаниямПУРучноеРедактированиеНачисленийПоПоказаниямПУ.Пометка = РазрешитьРучноеРедактированиеНачисленийПоПоказаниямПУ;
    Иначе
        ЗаполнитьДопДанныеВУслугах();
        ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
    КонецЕсли;

    // Установить видимость реквизитов и заголовков колонок.
    УправлениеФормой(ЭтаФорма);

    // Установка условного оформления формы, вместо настройки оформления через свойства формы.
    // Это реализовано для обслуживания условного оформления.
    УстановитьУсловноеОформление();

    // Установка заголовка формы.
    УстановитьЗаголовокФормы(ЭтаФорма);

    // Установить доступность формы с учетом ключа СЛК.
    СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);

    УстановитьТочностьОбъемовНачислений();

    // Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
    // начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
    // по-прежнему заполняется в проводках.
    // При использовании нового механизма отражения колонки с договором выводить не будем. Видимость устанавливается
    // только при открытии формы, так как новый механизм использует только один клиент и он скорее всего не будет
    // создавать документы в периоде до начала использования нового механизма.
    Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Объект.Дата) Тогда

        Элементы.ДеревоУслугДоговор.Видимость = Ложь;
        Элементы.ДеревоПоПоказаниямПУДоговор.Видимость = Ложь;
        Элементы.УслугиДоговор.Видимость = Ложь;
        Элементы.НачисленияПоРассрочкеДоговор.Видимость = Ложь;

    КонецЕсли;

    // ПодсистемыЖКХ.ОтладкаРасчетов
    ПротоколРасчетов = ПолучитьПротоколРасчетов();
    // Конец ПодсистемыЖКХ.ОтладкаРасчетов
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы
// Гарант+ Килипенко 16.09.2024 [F00227727] Доработать заполнение документа начисление по приборам учета --

// Гарант+ Килипенко 18.09.2024 [F00228484] Доработка отражения в рег учете ++
#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ГП_ОтразитьНачисленияВРегламентномУчетеПриНажатии(Команда)
    Если ЭтотОбъект.Объект.Ссылка.Пустая() ИЛИ ЭтотОбъект.Объект.Проведен = Ложь Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Документ должен быть записан и проведен.");
        РезультатДиалога = Ждать ГП_ОбщегоНазначенияКлиент.СпроситьПользователяОГотовностиВыполнятьОперациюАсинх(
                "Для продолжения необходимо записать и провести документ.");
        Если РезультатДиалога = Ложь Тогда
            Возврат; // Пользователь отказался от выполнения операции
        Иначе
            ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
        КонецЕсли;
    КонецЕсли;

    Если ЭтотОбъект.Объект.Проведен = Ложь Тогда
        Возврат; // Документ остался не проведенным
    КонецЕсли;

    ОткрытьНовыйДокументОтраженияНачисленийВРегламентномУчете();
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы
// Гарант+ Килипенко 18.09.2024 [F00228484] Доработка отражения в рег учете --

// Гарант+ Килипенко 18.09.2024 [F00228484] Доработка отражения в рег учете ++
#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ГП_ЗаполнитьНаОснованииВводаПоказанийНаПУНаСервере()
    РезультатФункции = Новый Структура("Успех", Истина);

    // Это новый документ
    ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ = Объект.Ссылка.Пустая();
    // Это начисления по показаниям ПУ
    ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ = ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ
        И ЭтотОбъект.Параметры.Свойство("ГП_ВидОперации")
        И ЭтотОбъект.Параметры.ГП_ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ;
    // Передано значение услуги для начисления
    ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ = ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ
        И ЭтотОбъект.Параметры.Свойство("ГП_Услуга");
    // Передан список л/с для заполнения
    ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ = ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ
        И ЭтотОбъект.Параметры.Свойство("ГП_СписокЛицевыхСчетов")
        И ТипЗнч(ЭтотОбъект.Параметры.ГП_СписокЛицевыхСчетов) = Тип("СписокЗначений");

    Если ЭтоНовыйДокументНаОснованииВводаПоказанийНаПУ = Ложь Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции; // Нет данных для заполнения
    КонецЕсли;

    ЭтотОбъект.Объект.Услуга = ЭтотОбъект.Параметры.ГП_Услуга;
    ЭтотОбъект.Объект.ВидОперации = ЭтотОбъект.Параметры.ГП_ВидОперации;
    ЭтотОбъект.Объект.УслугиПоПоказаниямПУ.Очистить();

    Если ЭтотОбъект.Параметры.Свойство("ГП_ДатаВводаПоказаний") Тогда
        // Добавляем 1 секунду к дате ввода показаний
        ЭтотОбъект.Объект.Дата = Мин(ЭтотОбъект.Параметры.ГП_ДатаВводаПоказаний + 1, ТекущаяДатаСеанса());
    КонецЕсли;

    // Заполнение ТЧ Услуги
    ДокументОбъект = ДанныеФормыВЗначение(ЭтотОбъект.Объект, Тип("ДокументОбъект.КВП_НачислениеУслуг"));
    ДокументОбъект.ЗаполнитьТабличнуюЧастьУслуги(ЭтотОбъект.Параметры.ГП_СписокЛицевыхСчетов);
    ЗначениеВДанныеФормы(ДокументОбъект, ЭтотОбъект.Объект);

    Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ОткрытьНовыйДокументОтраженияНачисленийВРегламентномУчете()
    ПараметрыОтраженияНачислений = Новый Структура;
    ДанныеЗаполненияОтражения = ГП_ПолучитьДанныеЗаполненияДокументаОтраженияНаСервере();
    ПараметрыОтраженияНачислений.Вставить("ГП_ДанныеЗаполненияПоНачислениям", ДанныеЗаполненияОтражения);

    ФормаНачисленияУслуг = ОткрытьФорму("Документ.КВП_ОтражениеНачисленийВРеглУчете.Форма.ФормаДокументаСтарыйМеханизмОтражения",
            ПараметрыОтраженияНачислений, , , , , , РежимОткрытияОкнаФормы.Независимый);

    Возврат ФормаНачисленияУслуг;
КонецФункции

&НаСервере
Функция ГП_ПолучитьДанныеЗаполненияДокументаОтраженияНаСервере(Знач ЗаполнятьКомпенсациюЛьгот = Истина)
    РезультатФункции = Новый Структура;
    РезультатФункции.Вставить("ВидОперации", Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации);
    РезультатФункции.Вставить("ТипДокументаОтражения", "Реализация товаров и услуг");
    РезультатФункции.Вставить("Организация", ЭтотОбъект.Объект.Организация);
    // По изначальному ТЗ дата документа устанавливалась на конец месяца
    РезультатФункции.Вставить("Дата", ?(ЗначениеЗаполнено(ЭтотОбъект.Объект.Дата),
            КонецДня(ЭтотОбъект.Объект.Дата), КонецДня(ТекущаяДатаСеанса())));
    РезультатФункции.Вставить("ИспользуетсяНовыйМеханизмОтраженияНачислений", Ложь);
    РезультатФункции.Вставить("УчитыватьНДС", Истина);
    РезультатФункции.Вставить("СуммаВключаетНДС", Ложь);
    РезультатФункции.Вставить("ВыполнятьОтражениеНачисленийСОбъемамиИТарифами", Истина);

    СтруктураДанныхНачислений = ГП_ПолучитьКонтрагентаИДоговорПриборовУчетаНаСервере(ЭтотОбъект.Объект.Ссылка);
    Если СтруктураДанныхНачислений.Успех Тогда
        РезультатФункции.Вставить("Контрагент", СтруктураДанныхНачислений.Контрагент);

        // !!! Уточнить! по какой логике заполнять раздел компенсации льгот (если вообще это необходимо)
        Если ЗаполнятьКомпенсациюЛьгот Тогда
            РезультатФункции.Вставить("КонтрагентКомпенсацииЛьгот", СтруктураДанныхНачислений.Контрагент);
            РезультатФункции.Вставить("ДоговорКонтрагентаКомпенсацииЛьгот", СтруктураДанныхНачислений.Договор);
        КонецЕсли;
    Иначе
        ОбщегоНазначения.СообщитьПользователю("Не найден контрагент по данным таблицы начислений");
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

&НаСервереБезКонтекста
Функция ГП_ПолучитьКонтрагентаИДоговорПриборовУчетаНаСервере(Знач ДокументНачисленияУслугСсылка)
    РезультатФункции = Новый Структура("Успех, Контрагент, Договор", Истина);

    ТаблицаКонтрагентовНачислений = ГП_РаботаСНачислениемУслуг.ПолучитьКонтрагентовПриборовУчетаДокумента(ДокументНачисленияУслугСсылка);
    Если ТаблицаКонтрагентовНачислений.Количество() = 0 Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции;
    КонецЕсли;

    РезультатФункции.Контрагент = ТаблицаКонтрагентовНачислений[0].Контрагент;
    РезультатФункции.Договор = ТаблицаКонтрагентовНачислений[0].Договор;

    Возврат РезультатФункции;
КонецФункции

#Область СозданиеЭлементовФормы

&НаСервере
Функция ГП_СоздатьКомандуОтразитьНачисленияВРегламентномУчетеНаСервере()
    Результат = Новый Структура("Кнопка, Команда");

    // Создание команды формы
    Результат.Команда = ЭтотОбъект.Команды.Добавить("ГП_ОтразитьНачисленияВРегламентномУчете");
    Результат.Команда.Заголовок = "Отразить в регл. учете";
    Результат.Команда.Действие = "ГП_ОтразитьНачисленияВРегламентномУчетеПриНажатии";

    // Создание элемента формы
    Результат.Кнопка = ЭтотОбъект.Элементы.Добавить(
            "ГП_ОтразитьНачисленияВРегламентномУчете",
            Тип("КнопкаФормы"),
            ЭтотОбъект.Элементы.ДеревоПоПоказаниямПУКоманднаяПанель);
    Результат.Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
    Результат.Кнопка.ИмяКоманды = Результат.Команда.Имя;

    Возврат Результат;
КонецФункции

#КонецОбласти // СозданиеЭлементовФормы

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 18.09.2024 [F00228484] Доработка отражения в рег учете --
