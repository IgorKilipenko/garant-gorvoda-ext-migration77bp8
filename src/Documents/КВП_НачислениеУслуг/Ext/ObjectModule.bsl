// Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении ++
#Область ПереопределениеФункционала

&ИзменениеИКонтроль("ПолучитьКэшПериодовСчетчиков")
Функция ГП_ПолучитьКэшПериодовСчетчиков(ТаблицаСчетчиков)

    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ТаблицаДанных.Услуга КАК Услуга,
    |	ТаблицаДанных.Счетчик КАК Счетчик,
    |	ТаблицаДанных.Объект КАК Объект,
    |	ТаблицаДанных.СписокУслуг КАК СписокУслуг,
    |	ТаблицаДанных.Здание КАК Здание,
    |	ТаблицаДанных.Помещение КАК Помещение
    |ПОМЕСТИТЬ ТаблицаСчетчиков
    |ИЗ
    |	&ТаблицаДанных КАК ТаблицаДанных
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ТаблицаДанных.Счетчик
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ТаблицаСчетчиков.Здание КАК Здание,
    |	ТаблицаСчетчиков.Помещение КАК Помещение,
    |	ТаблицаСчетчиков.Объект КАК Объект,
    |	ТаблицаСчетчиков.Услуга КАК Услуга,
    |	ТаблицаСчетчиков.Счетчик КАК Счетчик,
    |	ТаблицаСчетчиков.СписокУслуг КАК СписокУслуг,
    |	НАЧАЛОПЕРИОДА(&ДатаНач, ДЕНЬ) КАК Период,
    |	ЕСТЬNULL(УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует, ЛОЖЬ) КАК Действует,
    |	ВЫБОР
    |		КОГДА УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета ЕСТЬ NULL
    |			ТОГДА ЛОЖЬ
    |		ИНАЧЕ ИСТИНА
    |	КОНЕЦ КАК СчетчикБылУстановлен
    |ПОМЕСТИТЬ втСостоянияПриборовУчетаВПериоде
    |ИЗ
    |	ТаблицаСчетчиков КАК ТаблицаСчетчиков
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный КАК УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный
    |		ПО ТаблицаСчетчиков.Счетчик = УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета
    |			И (ВЫБОР
    |				КОГДА УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
    |					ТОГДА УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект = ТаблицаСчетчиков.Объект
    |				ИНАЧЕ ИСТИНА
    |			КОНЕЦ)
    |			И (УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала <= &ДатаНач)
    |			И (УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаОкончания >= &ДатаНач)
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ТаблицаСчетчиков.Здание,
    |	ТаблицаСчетчиков.Помещение,
    |	ТаблицаСчетчиков.Объект,
    |	ТаблицаСчетчиков.Услуга,
    |	ТаблицаСчетчиков.Счетчик,
    |	ТаблицаСчетчиков.СписокУслуг,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует,
    |	ИСТИНА
    |ИЗ
    |	ТаблицаСчетчиков КАК ТаблицаСчетчиков
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный КАК УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный
    |		ПО ТаблицаСчетчиков.Счетчик = УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета
    |			И (ВЫБОР
    |				КОГДА УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
    |					ТОГДА УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект = ТаблицаСчетчиков.Объект
    |				ИНАЧЕ ИСТИНА
    |			КОНЕЦ)
    |			И (УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	КВП_Тарифы.Период КАК Период,
    |	КВП_Тарифы.Объект КАК Объект,
    |	КВП_Тарифы.Услуга КАК Услуга
    |ПОМЕСТИТЬ врКВП_Тарифы
    |ИЗ
    |	РегистрСведений.КВП_Тарифы КАК КВП_Тарифы
    |ГДЕ
    |	КВП_Тарифы.Организация = &Организация
    |	И КВП_Тарифы.Период МЕЖДУ &ДатаНач И &ДатаКон
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период КАК Период,
    |	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет КАК ЛицевойСчет
    |ПОМЕСТИТЬ врУПЖКХ_СведенияДляВзаиморасчетовПоЛС
    |ИЗ
    |	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
    |ГДЕ
    |	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период МЕЖДУ &ДатаНач И &ДатаКон
    |	И УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = &Организация
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	втСостоянияПриборовУчетаВПериоде.Здание КАК Здание,
    |	втСостоянияПриборовУчетаВПериоде.Помещение КАК Помещение,
    |	втСостоянияПриборовУчетаВПериоде.Объект КАК Объект,
    |	втСостоянияПриборовУчетаВПериоде.Услуга КАК Услуга,
    |	втСостоянияПриборовУчетаВПериоде.Счетчик КАК Счетчик,
    |	втСостоянияПриборовУчетаВПериоде.СписокУслуг КАК СписокУслуг,
    |	втСостоянияПриборовУчетаВПериоде.Период КАК Период,
    |	втСостоянияПриборовУчетаВПериоде.Действует КАК Действует,
    |	втСостоянияПриборовУчетаВПериоде.СчетчикБылУстановлен КАК СчетчикБылУстановлен,
    |	NULL КАК СменаТарифа,
    |	NULL КАК СменаДоговора
    |ПОМЕСТИТЬ врТаблицаИтоговыхПериодов
    |ИЗ
    |	втСостоянияПриборовУчетаВПериоде КАК втСостоянияПриборовУчетаВПериоде
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ТаблицаСчетчиков.Здание,
    |	ТаблицаСчетчиков.Помещение,
    |	ТаблицаСчетчиков.Объект,
    |	ТаблицаСчетчиков.Услуга,
    |	ТаблицаСчетчиков.Счетчик,
    |	ТаблицаСчетчиков.СписокУслуг,
    |	КВП_Тарифы.Период,
    |	NULL,
    |	NULL,
    |	ИСТИНА,
    |	NULL
    |ИЗ
    |	врКВП_Тарифы КАК КВП_Тарифы
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетчиков КАК ТаблицаСчетчиков
    |		ПО (ИСТИНА)
    |			И (КВП_Тарифы.Объект = НЕОПРЕДЕЛЕНО
    |				ИЛИ КВП_Тарифы.Объект = ТаблицаСчетчиков.Здание
    |				ИЛИ КВП_Тарифы.Объект = ТаблицаСчетчиков.Помещение)
    |			И (КВП_Тарифы.Услуга В (ТаблицаСчетчиков.СписокУслуг))
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ТаблицаСчетчиков.Здание,
    |	ТаблицаСчетчиков.Помещение,
    |	ТаблицаСчетчиков.Объект,
    |	ТаблицаСчетчиков.Услуга,
    |	ТаблицаСчетчиков.Счетчик,
    |	ТаблицаСчетчиков.СписокУслуг,
    |	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период,
    |	NULL,
    |	NULL,
    |	NULL,
    |	ИСТИНА
    |ИЗ
    |	врУПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетчиков КАК ТаблицаСчетчиков
    |		ПО УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет = ТаблицаСчетчиков.Объект
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТаблицаИтоговыхПериодов.Период КАК Период,
    |	МАКСИМУМ(ТаблицаИтоговыхПериодов.Действует) КАК Действует,
    |	МАКСИМУМ(ТаблицаИтоговыхПериодов.СчетчикБылУстановлен) КАК СчетчикБылУстановлен,
    |	МАКСИМУМ(ТаблицаИтоговыхПериодов.СменаТарифа) КАК СменаТарифа,
    |	МАКСИМУМ(ТаблицаИтоговыхПериодов.СменаДоговора) КАК СменаДоговора,
    |	ТаблицаИтоговыхПериодов.Услуга КАК Услуга,
    |	ТаблицаИтоговыхПериодов.Счетчик КАК Счетчик,
    |	ТаблицаИтоговыхПериодов.Объект КАК Объект,
    |	ТаблицаИтоговыхПериодов.СписокУслуг КАК СписокУслуг,
    |	ТаблицаИтоговыхПериодов.Здание КАК Здание,
    |	ТаблицаИтоговыхПериодов.Помещение КАК Помещение
    |ИЗ
    |	врТаблицаИтоговыхПериодов КАК ТаблицаИтоговыхПериодов
    |
    |СГРУППИРОВАТЬ ПО
    |	ТаблицаИтоговыхПериодов.Период,
    |	ТаблицаИтоговыхПериодов.Услуга,
    |	ТаблицаИтоговыхПериодов.Счетчик,
    |	ТаблицаИтоговыхПериодов.Объект,
    |	ТаблицаИтоговыхПериодов.СписокУслуг,
    |	ТаблицаИтоговыхПериодов.Здание,
    |	ТаблицаИтоговыхПериодов.Помещение
    |
    |УПОРЯДОЧИТЬ ПО
    |	ТаблицаИтоговыхПериодов.Период";

    Запрос.УстановитьПараметр("ДатаНач",       НачалоМесяца(Дата));
    Запрос.УстановитьПараметр("ДатаКон",       КонецМесяца(Дата));
    Запрос.УстановитьПараметр("Организация",   Организация);
    Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаСчетчиков);
    #Вставка // Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении ++

    // Недействующие счетчики с причиной отключения Поверка - считаем как действующие
    Запрос.Текст = СтрЗаменить(Запрос.Текст,
        "ЕСТЬNULL(УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует, ЛОЖЬ) КАК Действует",
        "ЕСТЬNULL(УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует, ЛОЖЬ)"
            + " ИЛИ ЕСТЬNULL(УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПричинаОтключения, НЕОПРЕДЕЛЕНО)"
            + " = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка)"
            + " КАК Действует");

    #КонецВставки // Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении --

    КэшПериодовСчетчиков = Запрос.Выполнить().Выгрузить();

    КэшПериодовСчетчиков.Индексы.Добавить("Счетчик,Объект,Услуга");

    // Добавляем индексирование для дальнейшего отбора периодов объектов, в которых уже был установлен другой счетчик.
    // Это нужно для того, чтобы разделять случаи, когда счетчики на объект никогда не устанавливались и нужно начислять
    // по норме за период до его установки, и случая, когда уже был установлен другой счетчик и по новому не нужно
    // начислять по норме за период до его установки.
    КэшПериодовСчетчиков.Индексы.Добавить("Объект, Услуга, Здание, Помещение, СчетчикБылУстановлен");

    Возврат КэшПериодовСчетчиков;

КонецФункции

&ИзменениеИКонтроль("ПолучитьТекстЗапросаПоПоказаниямИндивидуальныхПУ")
Функция ГП_ПолучитьТекстЗапросаПоПоказаниямИндивидуальныхПУ()

    // Лицевые счета, по которым будет производиться начисление услуги.

    ТекстЗапроса = "
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ТаблицаЛС.Объект КАК ЛицевойСчет,
    |	ТаблицаЛС.ОбъектАдрес КАК Помещение,
    |	ТаблицаЛС.ОбъектНаименование КАК ЛицевойСчетНаименование,
    |	ТаблицаЛС.Услуга,
    |	ТаблицаЛС.СпособРасчета
    |ПОМЕСТИТЬ ТаблицаЛС
    |ИЗ
    |	&ТаблицаЛС КАК ТаблицаЛС
    |;
    |";


    // Получаем приборы учета,закрепленные за лицевыми счетами.
    // Для начисления получаем только приборы учета, не являющиеся "выходными".

    ТекстЗапроса = ТекстЗапроса + "
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект КАК ЛицевойСчет,
    |	ВЫРАЗИТЬ(УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект КАК Справочник.КВП_ЛицевыеСчета).Адрес КАК Помещение,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета КАК Счетчик,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги КАК Услуга
    |ПОМЕСТИТЬ ТаблицаЗакрепленныхПУНаЛС
    |ИЗ
    |	РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный КАК УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный
    |ГДЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект В(&СпОбъектов)
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги В(&Услуга)
    |	И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ПризнакВыходногоСчетчика
    |	И (УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала <= &ДатаНач
    |				И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаОкончания >= &ДатаНач
    |			ИЛИ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон)
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует
    |;
    |";

    // Получаем приборы учета,закрепленные за помещениями.
    // Для начисления получаем только приборы учета, не являющиеся "выходными".

    ТекстЗапроса = ТекстЗапроса + "
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект КАК Помещение,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета КАК Счетчик,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги КАК Услуга
    |ПОМЕСТИТЬ ТаблицаЗакрепленныхПУНаПомещения
    |ИЗ
    |	РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный КАК УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный
    |ГДЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект В(&СпПомещений)
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги В(&Услуга)
    |	И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ПризнакВыходногоСчетчика
    |	И (УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала <= &ДатаНач
    |				И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаОкончания >= &ДатаНач
    |			ИЛИ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон)
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует
    |;
    |";

    // Дополняем список приборов учета помещениями, за которыми закреплен прибор учета,
    // т.к. документ может заполняться с отбором.
    // Например, прибор учета установлен на несколько помещений, начисление услуги производится
    // по конкретному л/с или помещению.

    ТекстЗапроса = ТекстЗапроса + "
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект КАК Помещение,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета КАК Счетчик,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги КАК Услуга
    |ПОМЕСТИТЬ ДополненнаяТаблицаЗакрепленныхПУНаПомещения
    |ИЗ
    |	РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный КАК УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный
    |ГДЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета В
    |			(ВЫБРАТЬ
    |				ТаблицаЗакрепленныхПУНаПомещения.Счетчик
    |			ИЗ
    |				ТаблицаЗакрепленныхПУНаПомещения КАК ТаблицаЗакрепленныхПУНаПомещения)
    |	И (УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала <= &ДатаНач
    |				И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаОкончания >= &ДатаНач
    |			ИЛИ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон)
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	ДопТаблицаЛС.Помещение,
    |	ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка),
    |	ДопТаблицаЛС.Услуга.ВидУслуги
    |ИЗ
    |	ТаблицаЛС КАК ДопТаблицаЛС
    |;
    |";
    #Вставка // Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении ++
    // Добавление условия добавления в расчеты выключенных счетчиков по причине окончания поверки
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
        "И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует",
        "И (УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует"
            + " ИЛИ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПричинаОтключения"
            + " = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка))");
    #КонецВставки // Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении --

    // Определяем открытые лицевые счета, на которые назначена услуга.
    // Они необходимы для определения долей распределения показаний ПУ по л/с.
    // Определяем их в этом же запросе, а не по заранее подготовленной таблице ТаблицаЛС,
    // т.к. документ может заполняться с отбором.
    // Например, прибор учета установлен на помещение, начисление услуги производится по конкретному л/с,
    // при этом на это же помещение открыт еще один л/с. В таблице ТаблицаЛС будет только выбранный л/с.

    ТекстЗапроса = ТекстЗапроса + "
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	Назначения.ЛицевойСчет КАК ЛицевойСчет
    |ПОМЕСТИТЬ НазначенныеНачисления
    |ИЗ
    |	(ВЫБРАТЬ
    |		КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет
    |	ИЗ
    |		РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
    |				&Дата,
    |				Организация = &Организация
    |					И Услуга В (&Услуга)
    |					И ДатаИзменения < &ДатаНач
    |					И Объект.Адрес В
    |						(ВЫБРАТЬ
    |							СписокПомещений.Помещение
    |						ИЗ
    |							ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)) КАК КВП_НазначенныеНачисленияСрезПоследних
    |	ГДЕ
    |		КВП_НазначенныеНачисленияСрезПоследних.Действует
    |
    |	ОБЪЕДИНИТЬ ВСЕ
    |
    |	ВЫБРАТЬ
    |		КВП_НазначенныеНачисления.Объект
    |	ИЗ
    |		РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
    |	ГДЕ
    |		КВП_НазначенныеНачисления.Период <= КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ)
    |		И КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
    |		И КВП_НазначенныеНачисления.Услуга В (&Услуга)
    |		И КВП_НазначенныеНачисления.Организация = &Организация
    |		И КВП_НазначенныеНачисления.Действует
    |		И КВП_НазначенныеНачисления.Объект.Адрес В
    |				(ВЫБРАТЬ
    |					СписокПомещений.Помещение
    |				ИЗ
    |					ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)) КАК Назначения
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	КВП_ЛицевыеСчета.Объект КАК Помещение,
    |	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
    |ПОМЕСТИТЬ ВрТаблицаОткрытыхЛС
    |ИЗ
    |	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
    |			&ДатаНач,
    |			Объект В
    |				(ВЫБРАТЬ
    |					СписокПомещений.Помещение
    |				ИЗ
    |					ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)) КАК КВП_ЛицевыеСчета
    |ГДЕ
    |	КВП_ЛицевыеСчета.Действует
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ
    |	КВП_ЛицевыеСчета.Объект,
    |	КВП_ЛицевыеСчета.ЛицевойСчет
    |ИЗ
    |	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
    |ГДЕ
    |	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
    |	И КВП_ЛицевыеСчета.Объект В
    |			(ВЫБРАТЬ
    |				СписокПомещений.Помещение
    |			ИЗ
    |				ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)
    |	И КВП_ЛицевыеСчета.Действует
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВрТаблицаОткрытыхЛС.Помещение КАК Помещение,
    |	ВрТаблицаОткрытыхЛС.ЛицевойСчет КАК ЛицевойСчет
    |ПОМЕСТИТЬ ТаблицаОткрытыхЛС
    |ИЗ
    |	ВрТаблицаОткрытыхЛС КАК ВрТаблицаОткрытыхЛС
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НазначенныеНачисления КАК ТаблицаНазначенных
    |		ПО (ТаблицаНазначенных.ЛицевойСчет = ВрТаблицаОткрытыхЛС.ЛицевойСчет)
    |;
    |";


    // Определим количество открытых лицевых счетов по помещениям, на которые установлены ПУ.
    // Оно необходимо для определения долей распределения показаний ПУ по л/с.

    ТекстЗапроса = ТекстЗапроса + "
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |		ТаблицаЗакрепленныхПУНаПомещения.Счетчик,
    |		ТаблицаЗакрепленныхПУНаПомещения.Помещение,
    |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОткрытыхЛС.ЛицевойСчет) КАК КоличествоВладельцев
    |ПОМЕСТИТЬ ТаблицаКоличестваВладельцевПУ
    |ИЗ
    |	ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК ТаблицаЗакрепленныхПУНаПомещения
    |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОткрытыхЛС КАК ТаблицаОткрытыхЛС
    |		ПО (ТаблицаОткрытыхЛС.Помещение = ТаблицаЗакрепленныхПУНаПомещения.Помещение)
    |СГРУППИРОВАТЬ ПО
    |	ТаблицаЗакрепленныхПУНаПомещения.Счетчик,
    |	ТаблицаЗакрепленныхПУНаПомещения.Помещение
    |;
    |";


    // Определяем введены ли показания приборов учета за текущий период.
    // По данному признаку определяется, что начисление будет производиться по показаниям
    // приборов учета.

    ТекстЗапроса = ТекстЗапроса + "
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	КВП_ПоказанияСчетчиков.Счетчик,
    |	ИСТИНА КАК ЕстьПоказания
    |ПОМЕСТИТЬ ТаблицаПоказанийЗаПериод
    |ИЗ
    |	РегистрСведений.КВП_ПоказанияСчетчиков КАК КВП_ПоказанияСчетчиков
    |ГДЕ
    |	КВП_ПоказанияСчетчиков.Период МЕЖДУ &ДатаНач И &ДатаКон
    |	И (НЕ КВП_ПоказанияСчетчиков.НачальноеПоказание)
    |	И (КВП_ПоказанияСчетчиков.Счетчик.ВидУслуги В (&Услуга))
    |	И НЕ КВП_ПоказанияСчетчиков.Счетчик.ПризнакВыходногоСчетчика
    |;
    |";


    // Получаем итоговую таблицу лицевых счетов с расходом по приборам учета.

    ТекстЗапроса = ТекстЗапроса + "
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ТаблицаЛС.Помещение.Владелец КАК Здание,
    |	ТаблицаЛС.Помещение.Подъезд КАК Подъезд,
    |	ТаблицаЛС.Помещение КАК Помещение,
    |	ТаблицаЛС.ЛицевойСчет КАК ЛицевойСчет,
    |	ТаблицаЛС.ЛицевойСчетНаименование КАК ЛицевойСчетНаименование,
    |	ТаблицаСчетчиков.Счетчик КАК Счетчик,
    |	ЕСТЬNULL(ТаблицаСчетчиков.ЕстьСчетчик, ЛОЖЬ) КАК ЕстьСчетчик,
    |	ЕСТЬNULL(ТаблицаСчетчиков.СчетчикНаПомещение, ЛОЖЬ) КАК СчетчикНаПомещение,
    |	ТаблицаЛС.Услуга КАК Услуга,
    |	ТаблицаЛС.СпособРасчета КАК СпособРасчета,
    |	ЕСТЬNULL(ТаблицаСчетчиков.ДневноеПоказаниеОстаток, 0) КАК ДневноеПоказаниеОстаток,
    |	ЕСТЬNULL(ТаблицаСчетчиков.НочноеПоказаниеОстаток, 0) КАК НочноеПоказаниеОстаток,
    |	ЕСТЬNULL(ТаблицаСчетчиков.ПиковоеПоказаниеОстаток, 0) КАК ПиковоеПоказаниеОстаток
    |ПОМЕСТИТЬ ГотоваяТаблицаСРасходомПоПУ
    |ИЗ
    |	ТаблицаЛС КАК ТаблицаЛС
    |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |			ТаблицаСчетчиковЛС.Помещение КАК Помещение,
    |			ТаблицаСчетчиковЛС.ЛицевойСчет КАК ЛицевойСчет,
    |			ТаблицаСчетчиковЛС.Счетчик КАК Счетчик,
    |			ИСТИНА КАК ЕстьСчетчик,
    |			ЛОЖЬ КАК СчетчикНаПомещение,
    |			ТаблицаСчетчиковЛС.Услуга КАК Услуга,
    |			СУММА(ВЫБОР
    |					КОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
    |							И НЕ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток ЕСТЬ NULL
    |							И (УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
    |								ИЛИ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
    |						ТОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток
    |					ИНАЧЕ 0
    |				КОНЕЦ) КАК ДневноеПоказаниеОстаток,
    |			СУММА(ВЫБОР
    |					КОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
    |							И НЕ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток ЕСТЬ NULL
    |							И (УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
    |								ИЛИ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
    |						ТОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток
    |					ИНАЧЕ 0
    |				КОНЕЦ) КАК НочноеПоказаниеОстаток,
    |			СУММА(ВЫБОР
    |					КОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
    |							И НЕ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток ЕСТЬ NULL
    |							И (УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
    |								ИЛИ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
    |						ТОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток
    |					ИНАЧЕ 0
    |				КОНЕЦ) КАК ПиковоеПоказаниеОстаток
    |		ИЗ
    |			ТаблицаЗакрепленныхПУНаЛС КАК ТаблицаСчетчиковЛС
    |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Остатки(
    |						&Дата,
    |						Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
    |							И Услуга В (&Услуга)) КАК УПЖКХ_РасчетПриборовУчетаОстатки
    |				ПО ТаблицаСчетчиковЛС.Услуга = УПЖКХ_РасчетПриборовУчетаОстатки.Услуга
    |					И (УПЖКХ_РасчетПриборовУчетаОстатки.Объект = ТаблицаСчетчиковЛС.ЛицевойСчет)
    |					И (УПЖКХ_РасчетПриборовУчетаОстатки.Счетчик = ТаблицаСчетчиковЛС.Счетчик)
    |
    |		СГРУППИРОВАТЬ ПО
    |			ТаблицаСчетчиковЛС.Помещение,
    |			ТаблицаСчетчиковЛС.ЛицевойСчет,
    |			ТаблицаСчетчиковЛС.Счетчик,
    |			ТаблицаСчетчиковЛС.Услуга
    |
    |		ОБЪЕДИНИТЬ ВСЕ
    |
    |		ВЫБРАТЬ
    |			ТаблицаСчетчиковПомещений.Помещение,
    |			NULL,
    |			ТаблицаСчетчиковПомещений.Счетчик,
    |			ИСТИНА,
    |			ИСТИНА,
    |			ТаблицаСчетчиковПомещений.Услуга,
    |			СУММА(ВЫБОР
    |					КОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
    |							И НЕ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток ЕСТЬ NULL
    |							И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
    |								ИЛИ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
    |						ТОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток
    |					ИНАЧЕ 0
    |				КОНЕЦ),
    |			СУММА(ВЫБОР
    |					КОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
    |							И НЕ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток ЕСТЬ NULL
    |							И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
    |								ИЛИ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
    |						ТОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток
    |					ИНАЧЕ 0
    |				КОНЕЦ),
    |			СУММА(ВЫБОР
    |					КОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
    |							И НЕ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток ЕСТЬ NULL
    |							И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
    |								ИЛИ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
    |						ТОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток
    |					ИНАЧЕ 0
    |				КОНЕЦ)
    |		ИЗ
    |			ТаблицаЗакрепленныхПУНаПомещения КАК ТаблицаСчетчиковПомещений
    |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Остатки(
    |						&Дата,
    |						Объект ССЫЛКА Справочник.УПЖКХ_Помещения
    |							И Услуга В (&Услуга)) КАК УПЖКХ_РасчетПриборовУчетаПомещенийОстатки
    |				ПО (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.Объект = ТаблицаСчетчиковПомещений.Помещение)
    |					И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.Счетчик = ТаблицаСчетчиковПомещений.Счетчик)
    |					И ТаблицаСчетчиковПомещений.Услуга = УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.Услуга
    |
    |		СГРУППИРОВАТЬ ПО
    |			ТаблицаСчетчиковПомещений.Помещение,
    |			ТаблицаСчетчиковПомещений.Счетчик,
    |			ТаблицаСчетчиковПомещений.Услуга) КАК ТаблицаСчетчиков
    |		ПО ТаблицаЛС.Помещение = ТаблицаСчетчиков.Помещение
    |			И (ТаблицаЛС.ЛицевойСчет = ТаблицаСчетчиков.ЛицевойСчет
    |				ИЛИ ТаблицаСчетчиков.ЛицевойСчет ЕСТЬ NULL)
    |			И ТаблицаЛС.Услуга = ТаблицаСчетчиков.Услуга
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	ВЫРАЗИТЬ(УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект КАК Справочник.КВП_ЛицевыеСчета).Адрес КАК Помещение,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект КАК ЛицевойСчет,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги КАК Услуга,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала КАК ДатаИзменения
    |ПОМЕСТИТЬ ТаблицаЗакрепленныхПУПоверкаУтратаПоломка
    |ИЗ
    |	РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный КАК УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный
    |ГДЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект В
    |			(ВЫБРАТЬ
    |				ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет КАК ЛицевойСчет
    |			ИЗ
    |				ГотоваяТаблицаСРасходомПоПУ КАК ГотоваяТаблицаСРасходомПоПУ
    |			ГДЕ
    |				НЕ ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик)
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги В(&Услуга)
    |	И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ПризнакВыходногоСчетчика
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала <= &ДатаНач
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаОкончания >= &ДатаНач
    |	И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПричинаОтключения В(&ПричиныВременногоОтключенияПУ)
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект,
    |	NULL,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги,
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала
    |ИЗ
    |	РегистрСведений.УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный КАК УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный
    |ГДЕ
    |	УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Объект В
    |			(ВЫБРАТЬ
    |				ГотоваяТаблицаСРасходомПоПУ.Помещение КАК Помещение
    |			ИЗ
    |				ГотоваяТаблицаСРасходомПоПУ КАК ГотоваяТаблицаСРасходомПоПУ
    |			ГДЕ
    |				НЕ ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик)
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ВидУслуги В(&Услуга)
    |	И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПриборУчета.ПризнакВыходногоСчетчика
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаНачала <= &ДатаНач
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ДатаОкончания >= &ДатаНач
    |	И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует
    |	И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПричинаОтключения В(&ПричиныВременногоОтключенияПУ)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Помещение КАК Помещение,
    |	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.ЛицевойСчет КАК ЛицевойСчет,
    |	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Услуга КАК Услуга,
    |	ВЫБОР
    |		КОГДА ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Помещение.ВидПомещения.ЭтоЖилойФонд
    |			ТОГДА ВЫБОР
    |					КОГДА &ДатаНач < ДОБАВИТЬКДАТЕ(ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.ДатаИзменения, МЕСЯЦ, ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений)
    |						ТОГДА ИСТИНА
    |					ИНАЧЕ ЛОЖЬ
    |				КОНЕЦ
    |		ИНАЧЕ ВЫБОР
    |				КОГДА &ДатаНач < ДОБАВИТЬКДАТЕ(ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.ДатаИзменения, МЕСЯЦ, ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений)
    |					ТОГДА ИСТИНА
    |				ИНАЧЕ ЛОЖЬ
    |			КОНЕЦ
    |	КОНЕЦ КАК ЕстьСчетчикСУчетомПоверкиПоломкиУтраты
    |ПОМЕСТИТЬ ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета
    |ИЗ
    |	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка КАК ТаблицаЗакрепленныхПУПоверкаУтратаПоломка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ГотоваяТаблицаСРасходомПоПУ.Здание КАК Здание,
    |	ГотоваяТаблицаСРасходомПоПУ.Подъезд КАК Подъезд,
    |	ГотоваяТаблицаСРасходомПоПУ.Помещение КАК Помещение,
    |	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет КАК ЛицевойСчет,
    |	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчетНаименование КАК ЛицевойСчетНаименование,
    |	ГотоваяТаблицаСРасходомПоПУ.Счетчик КАК Счетчик,
    |	ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик КАК ЕстьСчетчик,
    |	ГотоваяТаблицаСРасходомПоПУ.СчетчикНаПомещение КАК СчетчикНаПомещение,
    |	ГотоваяТаблицаСРасходомПоПУ.Услуга КАК Услуга,
    |	ГотоваяТаблицаСРасходомПоПУ.СпособРасчета КАК СпособРасчета,
    |	СУММА(ГотоваяТаблицаСРасходомПоПУ.ДневноеПоказаниеОстаток) КАК ДневноеПоказаниеОстаток,
    |	СУММА(ГотоваяТаблицаСРасходомПоПУ.НочноеПоказаниеОстаток) КАК НочноеПоказаниеОстаток,
    |	СУММА(ГотоваяТаблицаСРасходомПоПУ.ПиковоеПоказаниеОстаток) КАК ПиковоеПоказаниеОстаток,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик
    |					ИЛИ ЕСТЬNULL(ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.ЕстьСчетчикСУчетомПоверкиПоломкиУтраты, ЛОЖЬ)
    |				ТОГДА ИСТИНА
    |			ИНАЧЕ ЛОЖЬ
    |		КОНЕЦ) КАК ЕстьСчетчикСУчетомПоверкиПоломкиУтраты
    |ПОМЕСТИТЬ ГотоваяТаблицаПУ
    |ИЗ
    |	ГотоваяТаблицаСРасходомПоПУ КАК ГотоваяТаблицаСРасходомПоПУ
    |		ЛЕВОЕ СОЕДИНЕНИЕ ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета КАК ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета
    |		ПО ГотоваяТаблицаСРасходомПоПУ.Помещение = ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.Помещение
    |			И ГотоваяТаблицаСРасходомПоПУ.Услуга = ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.Услуга
    |			И (ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет = ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.ЛицевойСчет
    |				ИЛИ ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.ЛицевойСчет ЕСТЬ NULL)
    |
    |СГРУППИРОВАТЬ ПО
    |	ГотоваяТаблицаСРасходомПоПУ.СчетчикНаПомещение,
    |	ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик,
    |	ГотоваяТаблицаСРасходомПоПУ.Счетчик,
    |	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчетНаименование,
    |	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет,
    |	ГотоваяТаблицаСРасходомПоПУ.Помещение,
    |	ГотоваяТаблицаСРасходомПоПУ.Подъезд,
    |	ГотоваяТаблицаСРасходомПоПУ.Здание,
    |	ГотоваяТаблицаСРасходомПоПУ.Услуга,
    |	ГотоваяТаблицаСРасходомПоПУ.СпособРасчета
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ГотоваяТаблицаПУ.Здание КАК ЗданиеПодъезд
    |ПОМЕСТИТЬ ТаблицаЗданийПодъездов
    |ИЗ
    |	ГотоваяТаблицаПУ КАК ГотоваяТаблицаПУ
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ
    |	ГотоваяТаблицаПУ.Подъезд
    |ИЗ
    |	ГотоваяТаблицаПУ КАК ГотоваяТаблицаПУ";

    #Вставка // Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении ++
    // Добавление условия добавления в расчеты выключенных счетчиков по причине окончания поверки
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
        "И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует",
        "И НЕ УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.Действует"
            + " И УПЖКХ_ИсторияСостоянийПриборовУчетаИнтервальный.ПричинаОтключения"
            + " <> ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка)");
    #КонецВставки // Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении --
    Возврат ТекстЗапроса;

КонецФункции

// Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей ++
//
&ИзменениеИКонтроль("ЗаполнитьТабличнуюЧастьУслуги")
Процедура ГП_ЗаполнитьТабличнуюЧастьУслуги(СписокОбъектов)

	РасходПоОбщедомовымУслугам					= 0;
	РасходПоОбщедомовымПУ						= 0;
	СуммарныйОтрицательныйОДНПрошлыхПериодов	= 0;

	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)

	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;

	// Начисления на л/с
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета
	 Или ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда

		СтруктураПараметров = Новый Структура;
		// Добровольное страхование начисляем за месяц по принципу "текущий месяц + 2 месяца".
		СтруктураПараметров.Вставить("Период",                     ?(ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования, ДобавитьМесяц(Дата, 2), Дата));
		СтруктураПараметров.Вставить("ДатаДок",                    Дата);
		СтруктураПараметров.Вставить("Организация",                Организация);
		СтруктураПараметров.Вставить("Услуга",                     Услуга);
		СтруктураПараметров.Вставить("ЭтоДобровольноеСтрахование", ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования);

		ТаблицаНачислений = КВП_СформироватьТаблицуНачислений(Ссылка, СтруктураПараметров, СписокОбъектов,
													мНастройкиУчетнойПолитикиТСЖ, КоличествоДнейНачисления);

		// Определим границы периода начисления.
		НачалоПериода = НачалоМесяца(Дата);
		КонецПериода  = НачалоПериода + (КоличествоДнейНачисления - 1) * ДлинаСуток;

		СтруктураПараметров.Вставить("НачалоПериода",  НачалоПериода);
		СтруктураПараметров.Вставить("КонецПериода",   КонецПериода);
		СтруктураПараметров.Вставить("СписокОбъектов", СписокОбъектов);

		// Дополним таблицу услуг начислениями зависимых услуг.
		ДополнитьТаблицуНачисленийЗависимымиУслугами(ТаблицаНачислений, СтруктураПараметров);

		// Сортируем данные таблицы для корректного построения дерева с начислениями на форме документа.
		МассивПолейСортировки = ПоляСортировкиТЧУслуги();
		ТаблицаНачислений = УПЖКХ_ОбщегоНазначенияСервер.СортироватьТаблицуЗначений(ТаблицаНачислений,
			МассивПолейСортировки);

		Услуги.Загрузить(ТаблицаНачислений);

	// Начисления комиссии банка
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка Тогда

		Если ЗначениеЗаполнено(Услуга) Тогда
			Если НЕ Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выберите услугу со способом расчета ""Комиссия банка"".");
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НачалоПериода = НачалоМесяца(Дата);
		КонецПериода  = КонецДня(КонецМесяца(Дата));

		// получим список лицевых счетов для списка объектов
		ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(Дата, СписокОбъектов);
		СписокЛицевыхСчетов = Новый СписокЗначений();
		Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
			Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
				СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
			КонецЕсли;
		КонецЦикла;

		// Получим таблицу всех лицевых счетов, для которых назначена услуга Комиссия банка.
		ТаблицаОбъектов = КВП_ПолучитьТаблицуДействующихУслугВПериоде(Дата, СписокЛицевыхСчетов, Услуга, Новый Структура("Организация", Организация));

		// В полученной таблице объектов будет колонка "Объект", содержащая лицевые счета.
		// Далее данная таблица будет загружаться в ТЧ Услуги, в которой колонка, содержащая
		// лицевые счета, называется "ЛицевыеСчета". Поэтому переименуем в данной таблице
		// колонку "Объект" в "ЛицевыеСчета".
		ТаблицаОбъектов.Колонки.Объект.Имя = "ЛицевыеСчета";

		ТаблицаОбъектов.Колонки.Добавить("СуммаНачислений");
		ТаблицаОбъектов.Колонки.Добавить("Тариф");
		ТаблицаОбъектов.Колонки.Добавить("Начислено");
		ТаблицаОбъектов.Колонки.Добавить("Договор");

		// Определим сумму комиссии банка исходя из всех начислений лицевого счета.
		Для Каждого ТекСтрока Из ТаблицаОбъектов Цикл
			ЛицевойСчет = ТекСтрока.ЛицевыеСчета;
			ТекСтрока.Тариф = КВП_ТарифПоЛицевомуСчету(Дата,
														   Организация,
														   Услуга,
														   ЛицевойСчет,
														   Перечисления.КВП_ВидыТарифов.КомиссияБанка);
			ТекСтрока.СуммаНачислений = ПолучитьСуммуНачисленийПоОбъекту(ЛицевойСчет, ТекСтрока.Услуга);
			ТекСтрока.Начислено = ТекСтрока.СуммаНачислений
								* ?(Услуга.РасчетКомиссииСверху,
									ТекСтрока.Тариф / 100,
									ТекСтрока.Тариф / ( ?(ТекСтрока.Тариф = 100, ТекСтрока.Тариф, 100 - ТекСтрока.Тариф) ));
			ТекСтрока.Договор =
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСтрока.ЛицевыеСчета, Организация,
																								КонецПериода, "Договор");
		КонецЦикла;

		// удалим строки, по которым не было начислений.
		Отбор = Новый Структура;
		Отбор.Вставить("СуммаНачислений", 0);
		МассивСтрок = ТаблицаОбъектов.НайтиСтроки(Отбор);
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ТаблицаОбъектов.Удалить(СтрокаМассива);
		КонецЦикла;

		Услуги.Загрузить(ТаблицаОбъектов);

	// Начисления по приборам учета
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда

		// Списывать расход приборов учета будем по ТЧ "Счетчики"
		// без учета ручной корректировки расхода в форме документа.
		// Ранее использовались следующие подходы при списании расхода:
		// 1. по остаткам регистра накопления "Расчет приборов учета";
		// 2. по ТЧ "Счетчики" с учетом ручной корректировки расхода на форме документа.
		ВариантСписанияРасходаПоПриборамУчета = Перечисления.УПЖКХ_ВариантыСписанияРасходаПоПриборамУчета.ПоТЧСчетчики_Версия3;

		ПолучатьСведенияОбУчетеИндНачисленийПриРасчетеОДНТолькоПоУслугамДокумента = Истина;

		УслугиПоПоказаниямПУ.Очистить();

		// Очищаем таблицу объектов, по которым распределен ОДН.
		// Таблицу необходимо очищать как при расчете, так и при перезаполнении,
		// в противном случае могут возникнуть ситуации, когда распределения не было, а таблица заполнена.
		ОбъектыСРаспределеннымРасходомОДН.Очистить();

		ВыполнятьРасчетБезПоказанийПриВозобновленииПодачиПоказаний =
			УПЖКХ_ПараметрыУчетаСервер.ИспользоватьРасчетБезПоказанийПриВозобновленииПодачиПоказанийПоПУ(Дата);

		ТЗУслугиПоПоказаниямПУ = УслугиПоПоказаниямПУ.ВыгрузитьКолонки();
		// Удалим колонки и добавим новые для увеличения разрядности дробной части.
		// Сделано для увеличения точности расчета.
		ТЗУслугиПоПоказаниямПУ.Колонки.Удалить("Сумма");
		ТЗУслугиПоПоказаниямПУ.Колонки.Удалить("ПоказаниеСчЛС");
		ТЗУслугиПоПоказаниямПУ.Колонки.Добавить("Сумма",
													УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(20, 6));
		ТЗУслугиПоПоказаниямПУ.Колонки.Добавить("ПоказаниеСчЛС",
													УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(20, 6));

		// Получим список услуг из регистра "УПЖКХ_УслугиОбщедомовогоСчетчика".
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УслугаОбщедомовогоСчетчика",      Услуга);
		СтруктураПараметров.Вставить("РаспределятьНаУслугуБазаРасчета", Истина);

		ДопСписокУслуг = КВП_ТаблицаУслугОбщедомовогоСчетчика(СтруктураПараметров).ВыгрузитьКолонку("Услуга");
        #Вставка // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей ++

        Если ДопСписокУслуг = Неопределено Тогда
            ДопСписокУслуг = Новый Массив;
        КонецЕсли;
        // ДопСписокУслуг.Добавить(ГП_РаботаСУслугами.ПолучитьУслугуКанализации().Ссылка);
        // ДопСписокУслуг.Добавить(ГП_РаботаСУслугами.ПолучитьУслугуГорячееВодоснабжение().Ссылка);

        ДопСписокУслуг.Добавить(ГП_РаботаСУслугами.ПолучитьУслугуКанализации().Ссылка);
        Для каждого СтрокаУслугПоказаний Из ЭтотОбъект.ГП_УслугиВводаПоказаний Цикл
            ДопСписокУслуг.Добавить(СтрокаУслугПоказаний.Услуга);
        КонецЦикла;

        #КонецВставки // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей --

		// Сформируем таблицу лицевых счетов с назначенными услугами, по которым будем производить начисление.
		ТаблицаЛС = ТаблицаЛСПоУслуге(СписокОбъектов, ДопСписокУслуг);

		// Определим таблицу периодов действия услуг на лицевых счетах.
		// Сделано для оптимизации определения периодов. Данные по всем л/с и услугам
		// будут храниться в одной таблице.
		СписокУслуг = ДопСписокУслуг;
		СписокУслуг.Добавить(Услуга);
        #Вставка // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей ++

        ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокУслуг);

        #КонецВставки // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей --

		мТаблицаПериодовДействияУслуги = ПолучитьПериодыДействияУслуги(ТаблицаЛС.ВыгрузитьКолонку("Объект"), СписокУслуг, Организация,
		                                                  НачалоМесяца(Дата), КонецМесяца(Дата), Дата);

		// Добавим данные по ИПУ в таблицу услуг.
		ДополнитьТаблицуУслугПоПоказаниямИндивидуальнымиНачислениями(ТЗУслугиПоПоказаниямПУ, ТаблицаЛС, ДопСписокУслуг);

		мТаблицаПериодовДействияУслуги = Неопределено;

		// Для информации:
		// Теперь зависимые услуги сразу начисляются в табличной части документа, а не при его проведении.

		// Дополним таблицу услуг начислениями зависимых услуг.
		ДополнитьТаблицуУслугПУЗависимымиУслугами(ТЗУслугиПоПоказаниямПУ);

		// Для информации:
		// Сторно определяется сразу как для основных услуг, так и для зависимых,
		// т.к на момент вычисления сторно данные по зависимым имеются в табличной части.

		// Дополним таблицу услуг суммами сторно.
		ДополнитьТаблицуУслугПоПоказаниямСуммамиСторно(ТЗУслугиПоПоказаниямПУ);

		// Сворачиваем по типу расчета для того, чтобы при проведении можно было
		// однозначно определить какие начисления произведены по показаниям
		// для списания показаний с регистра "Расчет приборов учета".
		ТЗУслугиПоПоказаниямПУ.Свернуть("ЛицевойСчет, Услуга, СоставнаяУслуга, ВидТарифа, Тариф, ТипРасчета, ФормулаРасчета,
		                                |Договор, НачалоПериода, КонецПериода, СостояниеПУ, Тарифность, Сторно, ВидСторно,
		                                |ТарифДляСторнирования, НачислениеПоПовышающемуКоэффициенту,
		                                |УслугаОснование, Зависимая, ЗависимаяПоНормативу, РасчетСУчетомСистемПУ",
		                                "ПоказаниеСчЛС, Сумма");

		// Сортируем данные таблицы для корректного построения дерева с начислениями на форме документа.
		МассивПолейСортировки = ПоляСортировкиТЧУслугиПоПоказаниямПУ();
		ТЗУслугиПоПоказаниямПУ = УПЖКХ_ОбщегоНазначенияСервер.СортироватьТаблицуЗначений(ТЗУслугиПоПоказаниямПУ,
			МассивПолейСортировки);

		УслугиПоПоказаниямПУ.Загрузить(ТЗУслугиПоПоказаниямПУ);

	// Начисления по рассрочке.
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки Тогда

		ТаблицаЛС = Новый ТаблицаЗначений;
		ТаблицаЛС.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));

		// получим список лицевых счетов для списка объектов
		ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(Дата, СписокОбъектов);

		Для Каждого ТекОбъект Из ОбъектыНачисления Цикл

			Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда

				СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
				Для Каждого ТекЭлементСписка Из ТекОбъект.СписокОбъектов Цикл

					ТекущийЛС = ТекЭлементСписка.Значение;

					НоваяСтрокаТаблицыЛС = ТаблицаЛС.Добавить();
					НоваяСтрокаТаблицыЛС.ЛицевойСчет = ТекущийЛС;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		ТаблицаРассрочки = ПолучитьТаблицуСведенийОРассрочке(ТаблицаЛС);
		НачисленияПоРассрочке.Загрузить(ТаблицаРассрочки);

	КонецЕсли;

	// СтандартныеПодсистемы.ОценкаПроизводительности(
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗаполнениеДокументаНачислениеУслугПоПУЖкх", ВремяНачала);
	Иначе
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗаполнениеДокументаНачислениеУслугПоОбычнойУслугеЖкх", ВремяНачала);
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности)

КонецПроцедуры // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей --

// Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей ++
//
&ИзменениеИКонтроль("ДополнитьТаблицуУслугПУЗависимымиУслугами")
Процедура ГП_ДополнитьТаблицуУслугПУЗависимымиУслугами(ТаблицаПоУслугам, ПоПрочимОрганизациям)

	// Процедура вызывается дважды:
	// 1. При заполнении табличной части для начисления зависимых услуг по организации, указанной в шапке документа.
	// 2. При проведении документа для начисления зависимых услуг по прочим организациям.


	// Начислять зависимые услуги (ЗУ) на сторно, на объемы повышающих коэффициентов, на сами ЗУ не нужно.
	// Поэтому подготовим таблицу, из которой исключим начисления по сторно, по повышающим коэффициентам и ЗУ.
	// А далее уже продолжим начисление ЗУ по полученной таблице.
	СтруктураПоиска = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
	СтрокиДляНачисленияЗависимыхУслуг = ТаблицаПоУслугам.НайтиСтроки(СтруктураПоиска);
	ТаблицаПоказаний = ТаблицаПоУслугам.Скопировать(СтрокиДляНачисленияЗависимыхУслуг);

	// Дополним таблицу данными по зданиям лицевых счетов.
	// Здания необходимы для учета настроек по зависимым услугам в разрезе домов.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаПоказаний
	|ИЗ
	|	&ТаблицаПоказаний КАК ТаблицаПоказаний
	|;
	|
	|ВЫБРАТЬ
	|	*,
	|	ЛицевойСчет.Адрес.Владелец КАК Здание
	|ИЗ
	|	ТаблицаПоказаний";
	Запрос.УстановитьПараметр("ТаблицаПоказаний", ТаблицаПоказаний);
	ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();

	// Зависимые услуги рассчитываются без учета составных, поэтому сворачиваем строки начислений.
	ТаблицаПоказаний.Свернуть("ЛицевойСчет, Здание, Услуга, УслугаОснование, ВидТарифа, ТипРасчета, ФормулаРасчета,
	                          |НачалоПериода, КонецПериода, Тарифность, СостояниеПУ, Договор, Зависимая,
	                          |ТолькоДляРаспределения, ЗависимаяПоНормативу",
	                          "ПоказаниеСчЛС, КоличествоРаспределенияПомещение,
	                          |КоличествоРаспределенияПодъезд, КоличествоРаспределенияЗдание");

	СписокЛС     = СформироватьСписокПоКолонкеТаблицы(ТаблицаПоказаний, "ЛицевойСчет");
	СписокЗданий = СформироватьСписокПоКолонкеТаблицы(ТаблицаПоказаний, "Здание");
	СписокУслуг  = СформироватьСписокПоКолонкеТаблицы(ТаблицаПоказаний, "Услуга");

	// Получим зависимые услуги.
	ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(КонецМесяца(Дата),
															  СписокУслуг,
															  Организация,
															  СписокЗданий,,
															  ПоПрочимОрганизациям);
	Если ТаблицаЗависимыхУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДопСтруктураПараметров = Новый Структура;
	Если ПоПрочимОрганизациям Тогда
		МассивВидовДоговоров = УПЖКХ_РаботаСЛицевымиСчетами.ПолучитьВидыДоговоров();
		ДопСтруктураПараметров.Вставить("МассивВидовДоговоров", МассивВидовДоговоров);
	КонецЕсли;

	// "Закэшируем" тарифы на конец месяца для каждого л/с по каждой зависимой услуге, чтобы в случае,
	// если период равен концу месяца, тарифы получались из кэша, а не для каждого л/с.
	// Реализовано в целях оптимизации.
	КэшТарифовПоВсемЛС = Новый ТаблицаЗначений;

	ДатаКонцаМесяца = КонецМесяца(Дата);
	СписокТарифов = Новый СписокЗначений;
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Ночной);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Пиковый);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Общий);

	Для Каждого СтрокаЗависимойУслуги ИЗ ТаблицаЗависимыхУслуг Цикл

		КэшПоУслуге = КВП_ТарифПоЛицевомуСчету(ДатаКонцаМесяца, Организация, СтрокаЗависимойУслуги.Услуга, СписокЛС, СписокТарифов);

		Если КэшТарифовПоВсемЛС.Количество() = 0 Тогда

			КэшТарифовПоВсемЛС = КэшПоУслуге.Скопировать();

			КэшТарифовПоВсемЛС.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			КэшТарифовПоВсемЛС.ЗаполнитьЗначения(ДатаКонцаМесяца, "Период");

			КэшТарифовПоВсемЛС.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
			КэшТарифовПоВсемЛС.ЗаполнитьЗначения(СтрокаЗависимойУслуги.Услуга, "Услуга");

		Иначе
			Для Каждого СтрокаТарифа ИЗ КэшПоУслуге Цикл

				НоваяСтрока = КэшТарифовПоВсемЛС.Добавить();
				НоваяСтрока.Период = ДатаКонцаМесяца;
				НоваяСтрока.Услуга = СтрокаЗависимойУслуги.Услуга;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТарифа);

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если КэшТарифовПоВсемЛС.Количество() > 0 Тогда
		КэшТарифовПоВсемЛС.Индексы.Добавить("Объект, Услуга, ВидТарифа");
		ДопСтруктураПараметров.Вставить("КэшТарифовНаКонецМесяца", КэшТарифовПоВсемЛС);
	КонецЕсли;

	// Для информации:
	// В таблице зависимых услуг хранятся настройки зависимостей услуг
	// всегда в разрезе зданий, полученные с учетом приоритетов настроек по объектам.
	// Поэтому сразу отбираем по объекту и начисляем зависимые услуги.

	// Проверяем настройку начисления зависимых услуг (задается в "Настройках параметров учета (ЖКХ)").
	Если НЕ мЗависимыеУслугиПоСобственномуНормативу Тогда

		// Если настройка не установлена, начисление ЗУ выполнется по периодам начисления услуг-оснований
		// в соответствии с объемами начисления услуг-оснований и коэффициентов ЗУ.

		Для Каждого СтрокаЗависимойУслуги ИЗ ТаблицаЗависимыхУслуг Цикл

			СтрокиТаблицыПоказаний = ТаблицаПоказаний.НайтиСтроки(Новый Структура("Услуга, Здание",
																	СтрокаЗависимойУслуги.УслугаОснование,
																	СтрокаЗависимойУслуги.Объект));
            #Вставка // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей ++

            Если СтрокаЗависимойУслуги.УслугаОснование = ГП_РаботаСУслугами.ПолучитьУслугуКанализации().Ссылка
                И СтрокаЗависимойУслуги.Услуга = ГП_РаботаСУслугами.ПолучитьУслугуНегативногоВоздействияНаЦСВ().Ссылка Тогда

                НовыйМассивЗависимыхУслуг = ТаблицаЗависимыхУслуг.НайтиСтроки(Новый Структура(
                            "Услуга, Объект", СтрокаЗависимойУслуги.УслугаОснование, СтрокаЗависимойУслуги.Объект));

                ИсключаемыеСтрокаПоказания = Новый Массив;
                Для Сч = 0 По СтрокиТаблицыПоказаний.Количество() - 1 Цикл
                    Если СтрокиТаблицыПоказаний[Сч].ПоказаниеСчЛС = 0
                        И СтрокиТаблицыПоказаний[Сч].СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ Тогда

                        ИсключаемыеСтрокаПоказания.Добавить(Сч);
                    КонецЕсли;
                КонецЦикла;

                Для Каждого СтрокаДляИсключения Из ИсключаемыеСтрокаПоказания Цикл
                    СтрокиТаблицыПоказаний.Удалить(СтрокаДляИсключения);
                КонецЦикла;

                Для Каждого ЭлементУслуги Из НовыйМассивЗависимыхУслуг Цикл
                    НайденныеСтрокиТаблицыПоказаний = ТаблицаПоказаний.Скопировать().НайтиСтроки(Новый Структура("Услуга, Здание",
                                ЭлементУслуги.УслугаОснование,
                                СтрокаЗависимойУслуги.Объект));
                    Для Каждого ЭлементПоказаний Из НайденныеСтрокиТаблицыПоказаний Цикл
                        ЭлементПоказаний.Услуга = СтрокаЗависимойУслуги.УслугаОснование;
                        СтрокиТаблицыПоказаний.Добавить(ЭлементПоказаний);
                    КонецЦикла;
                    //ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиТаблицыПоказаний, НайденныеСтрокиТаблицыПоказаний, Истина);
                КонецЦикла;
            КонецЕсли;

            #КонецВставки // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей --

			Для Каждого СтрокаПоказания ИЗ СтрокиТаблицыПоказаний Цикл

				Если НЕ СтрокаЗависимойУслуги.УслугаОснование = СтрокаПоказания.Услуга Тогда
					Продолжить;
				КонецЕсли;

				// Добавляем новую строку в таблицу начислений по текущей зависимой услуге.
				ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ(СтрокаЗависимойУслуги, СтрокаПоказания, ТаблицаПоУслугам,
																			ДопСтруктураПараметров, ПоПрочимОрганизациям);

			КонецЦикла;

		КонецЦикла;

	Иначе
		// Если настройка установлена, тогда начисление ЗУ выполняется по расходу услуг-оснований только
		// в случае установленных действующих ИПУ по всем услугам-основаниям.
		// Поэтому проверяем есть ли установленные ИПУ по всем услугам-основаниям.
		// Если приборы имеются по всем услугам-основаниям - расчет ЗУ производим по объемам услуг-оснований,
		// в противном случае (если хотя бы по одной услуге-основанию нет ИПУ) - расчет будет произведен по
		// нормативу самой зависимой услуги (при начислении "обычных" услуг).

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период",        Дата);
		СтруктураПараметров.Вставить("НачалоПериода", НачалоМесяца(Дата));
		СтруктураПараметров.Вставить("КонецПериода",  КонецМесяца(Дата));
		СтруктураПараметров.Вставить("Организация",   Организация);
		СтруктураПараметров.Вставить("СписокЗданий",  СписокЗданий);

		// Получаем периоды, в которых ЗУ по ПУ необходимо начислить по собственному нормативу.
		ТаблицаПериодов = Документы.КВП_НачислениеУслуг.ПолучитьПериодыНачисленияЗависимыхУслугПоСобственномуНормативу(ТаблицаПоказаний,
																		СтруктураПараметров, ТаблицаЗависимыхУслуг, ПоПрочимОрганизациям);
		ТаблицаПериодов.Колонки.Добавить("ДнейНачислено", Новый ОписаниеТипов("Число"));

		// Определим временную таблицу периодов, в которых зависимую
		// услугу необходимо начислять по собственному нормативу.
		ВрТаблицаПериодов = ТаблицаПериодов.СкопироватьКолонки();

		Для Каждого СтрокаЛС ИЗ СписокЛС Цикл

			Для Каждого СтрокаЗависимойУслуги ИЗ ТаблицаЗависимыхУслуг Цикл

				ВрТаблицаПериодов.Очистить();

				// Отбираем периоды зависимой услуги, где она будет начисляться по собственному нормативу,
				// и записываем во временную таблицу.
				СтрокиПоЗависимойУслуге = ТаблицаПериодов.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, Здание",
																		СтрокаЛС.Значение,
																		СтрокаЗависимойУслуги.Услуга,
																		СтрокаЗависимойУслуги.Объект));

				Для Каждого ТекСтрока Из СтрокиПоЗависимойУслуге Цикл
					НоваяСтрока = ВрТаблицаПериодов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.УслугаОснование = СтрокаЗависимойУслуги.УслугаОснование;
					НоваяСтрока.ДнейНачислено   = (ТекСтрока.КонецПериода - ТекСтрока.НачалоПериода) / ДлинаСуток + 1;
				КонецЦикла;

				// Отбираем только нужные нам строки с начислениями услуги-основания,
				// и записываем во временную таблицу.
				СтрокиПоУслугеОснованию = ТаблицаПоказаний.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, Здание",
																		СтрокаЛС.Значение,
																		СтрокаЗависимойУслуги.УслугаОснование,
																		СтрокаЗависимойУслуги.Объект));
				Для Каждого ТекСтрока Из СтрокиПоУслугеОснованию Цикл
					НоваяСтрока = ВрТаблицаПериодов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.Услуга          = СтрокаЗависимойУслуги.Услуга;
					НоваяСтрока.УслугаОснование = СтрокаЗависимойУслуги.УслугаОснование;
					НоваяСтрока.ДнейНачислено   = (ТекСтрока.КонецПериода - ТекСтрока.НачалоПериода) / ДлинаСуток + 1;
				КонецЦикла;

				// Разбиваем на общие подпериоды.
				ТаблицаОбщихПериодов = ПолучитьОбщиеПериодыНачисленияЗависимойУслуги(ВрТаблицаПериодов);

				// Таблица общих периодов уже имеет все нужные данные.
				Для Каждого ТекСтрока Из ТаблицаОбщихПериодов Цикл
					// Добавляем новую строку в таблицу начислений по текущей зависимой услуге.
					ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ(СтрокаЗависимойУслуги, ТекСтрока, ТаблицаПоУслугам,
																				ДопСтруктураПараметров, ПоПрочимОрганизациям);
				КонецЦикла;

			КонецЦикла; // Цикл по зависимым услугам

		КонецЦикла; // Цикл по л/с

	КонецЕсли;

КонецПроцедуры // Гарант+ Килипенко 15.11.2024 [F00231120] Доработка механизма начисления для цепочек зависимостей --

#КонецОбласти // ПереопределениеФункционала
// Гарант+ Килипенко 16.10.2024 [F00229732] Отключение контроля даты поверки ПУ при начислении --

// Гарант+ Килипенко 16.09.2024 [F00227727] Доработать заполнение документа начисление по приборам учета ++
#Область ОбработчикиСобытий

&После ("ОбработкаПроверкиЗаполнения")
Процедура ГП_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
    // Отмена проверки реквизита Объект - т.к. ТЧ УслугиПоПоказаниямПУ заполняется из документа Ввод показаний счетчика
    Если ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ
        И ЭтотОбъект.УслугиПоПоказаниямПУ.Количество() > 0 Тогда
        ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Объект");
    КонецЕсли;
КонецПроцедуры

// Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров ++
//
&После ("ПередЗаписью")
Процедура ГП_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    ПрефиксСпискаДоговоров = "#";

    Если Отказ
        ИЛИ (ПустаяСтрока(ЭтотОбъект.Комментарий) = Ложь И СтрНачинаетсяС(ЭтотОбъект.Комментарий, ПрефиксСпискаДоговоров) = Ложь) Тогда
        Возврат; // Если комментарий заполнен пользователем - тогда не формируем список
    КонецЕсли;

    КоллекцияСчетчиковФормирования = ЭтотОбъект.Счетчики.ВыгрузитьКолонку("Счетчик");
    СтрокаСпискаДоговоров = ГП_ПриборыУчета.СформироватьСтрокуСпискаДоговоровПоПУ(КоллекцияСчетчиковФормирования);
    Если СтрокаСпискаДоговоров = Неопределено Тогда
        Возврат; // Список не сформирован
    КонецЕсли;

    // Записываем в комментарий список договоров счетчиков
    ЭтотОбъект.Комментарий = СтрШаблон("%1 %2", ПрефиксСпискаДоговоров, СтрокаСпискаДоговоров);
КонецПроцедуры // Гарант+ Килипенко 15.10.2024 [F00229737] Формирование комментария со списком договоров --

// Гарант+ Килипенко 23.10.2024 [F00229783] Отражение начислений в разрезе л/с ++
//
&После("ОбработкаПроведения")
Процедура ГП_ОбработкаПроведения(Отказ, РежимПроведения)
    Если Отказ Тогда
        Возврат;
    КонецЕсли;

    ГП_РаботаСНачислениемУслуг.ДополнитьДвиженияОтраженияДаннымиЛС(
        ЭтотОбъект.Движения.УПЖКХ_Начисления, ЭтотОбъект.Движения.КВП_НачислениеДляОтраженияВРеглУчете)
КонецПроцедуры // Гарант+ Килипенко 23.10.2024 [F00229783] Отражение начислений в разрезе л/с --

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 16.09.2024 [F00227727] Доработать заполнение документа начисление по приборам учета --
